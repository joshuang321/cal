; Listing generated by Microsoft (R) Optimizing Compiler Version 19.37.32825.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	__u8
PUBLIC	__u16
PUBLIC	__u32
PUBLIC	__u64
PUBLIC	__i8
PUBLIC	__i16
PUBLIC	__i32
PUBLIC	__i64
PUBLIC	__f32
PUBLIC	__f64
PUBLIC	__bool
PUBLIC	__vec2
PUBLIC	__vec3
PUBLIC	__vec4
PUBLIC	__mat2
PUBLIC	__mat3
PUBLIC	__mat4
PUBLIC	__h
PUBLIC	__g
PUBLIC	__normalize
PUBLIC	__magnitude
PUBLIC	_functions
PUBLIC	_None_toString
PUBLIC	_u8_toString
PUBLIC	_u16_toString
PUBLIC	_u32_toString
PUBLIC	_u64_toString
PUBLIC	_i8_toString
PUBLIC	_i16_toString
PUBLIC	_i32_toString
PUBLIC	_i64_toString
PUBLIC	_f32_toString
PUBLIC	_f64_toString
PUBLIC	_bool_toString
PUBLIC	_real_toString
PUBLIC	_vec2_toString
PUBLIC	_vec3_toString
PUBLIC	_vec4_toString
PUBLIC	_mat2_toString
PUBLIC	_mat3_toString
PUBLIC	_mat4_toString
PUBLIC	_func_toString
PUBLIC	_add_u8_u8
PUBLIC	_add_u16_u16
PUBLIC	_add_u32_u32
PUBLIC	_add_u64_u64
PUBLIC	_add_i8_i8
PUBLIC	_add_i16_i16
PUBLIC	_add_i32_i32
PUBLIC	_add_i64_i64
PUBLIC	_add_f32_f32
PUBLIC	_add_f64_f64
PUBLIC	_add_real_real
PUBLIC	_add_vec2_vec2
PUBLIC	_add_vec3_vec3
PUBLIC	_add_vec4_vec4
PUBLIC	_add_mat2_mat2
PUBLIC	_add_mat3_mat3
PUBLIC	_add_mat4_mat4
PUBLIC	_sub_u8_u8
PUBLIC	_sub_u16_u16
PUBLIC	_sub_u32_u32
PUBLIC	_sub_u64_u64
PUBLIC	_sub_i8_i8
PUBLIC	_sub_i16_i16
PUBLIC	_sub_i32_i32
PUBLIC	_sub_i64_i64
PUBLIC	_sub_f32_f32
PUBLIC	_sub_f64_f64
PUBLIC	_sub_real_real
PUBLIC	_sub_vec2_vec2
PUBLIC	_sub_vec3_vec3
PUBLIC	_sub_vec4_vec4
PUBLIC	_sub_mat2_mat2
PUBLIC	_sub_mat3_mat3
PUBLIC	_sub_mat4_mat4
PUBLIC	_mul_u8_u8
PUBLIC	_mul_u16_u16
PUBLIC	_mul_u32_u32
PUBLIC	_mul_u64_u64
PUBLIC	_mul_i8_i8
PUBLIC	_mul_i16_i16
PUBLIC	_mul_i32_i32
PUBLIC	_mul_i64_i64
PUBLIC	_mul_f32_f32
PUBLIC	_mul_f64_f64
PUBLIC	_mul_real_real
PUBLIC	_mul_vec2_vec2
PUBLIC	_mul_vec3_vec3
PUBLIC	_mul_vec4_vec4
PUBLIC	_mul_mat2_mat2
PUBLIC	_mul_mat3_mat3
PUBLIC	_mul_mat4_mat4
PUBLIC	_div_u8_u8
PUBLIC	_div_u16_u16
PUBLIC	_div_u32_u32
PUBLIC	_div_u64_u64
PUBLIC	_div_i8_i8
PUBLIC	_div_i16_i16
PUBLIC	_div_i32_i32
PUBLIC	_div_i64_i64
PUBLIC	_div_f32_f32
PUBLIC	_div_f64_f64
PUBLIC	_div_real_real
PUBLIC	_pwr_u8_u8
PUBLIC	_pwr_u16_u16
PUBLIC	_pwr_u32_u32
PUBLIC	_pwr_u64_u64
PUBLIC	_pwr_i8_i8
PUBLIC	_pwr_i16_i16
PUBLIC	_pwr_i32_i32
PUBLIC	_pwr_i64_i64
PUBLIC	_pwr_f32_f32
PUBLIC	_pwr_f64_f64
PUBLIC	_pwr_real_real
PUBLIC	_sr_u8_u8
PUBLIC	_sr_u16_u16
PUBLIC	_sr_u32_u32
PUBLIC	_sr_u64_u64
PUBLIC	_sr_i8_i8
PUBLIC	_sr_i16_i16
PUBLIC	_sr_i32_i32
PUBLIC	_sr_i64_i64
PUBLIC	_sl_u8_u8
PUBLIC	_sl_u16_u16
PUBLIC	_sl_u32_u32
PUBLIC	_sl_u64_u64
PUBLIC	_sl_i8_i8
PUBLIC	_sl_i16_i16
PUBLIC	_sl_i32_i32
PUBLIC	_sl_i64_i64
PUBLIC	_band_u8_u8
PUBLIC	_band_u16_u16
PUBLIC	_band_u32_u32
PUBLIC	_band_u64_u64
PUBLIC	_band_i8_i8
PUBLIC	_band_i16_i16
PUBLIC	_band_i32_i32
PUBLIC	_band_i64_i64
PUBLIC	_and_bool_bool
PUBLIC	_bor_u8_u8
PUBLIC	_bor_u16_u16
PUBLIC	_bor_u32_u32
PUBLIC	_bor_u64_u64
PUBLIC	_bor_i8_i8
PUBLIC	_bor_i16_i16
PUBLIC	_bor_i32_i32
PUBLIC	_bor_i64_i64
PUBLIC	_or_bool_bool
PUBLIC	_cmt_u8_u8
PUBLIC	_cmt_u16_u16
PUBLIC	_cmt_u32_u32
PUBLIC	_cmt_u64_u64
PUBLIC	_cmt_i8_i8
PUBLIC	_cmt_i16_i16
PUBLIC	_cmt_i32_i32
PUBLIC	_cmt_i64_i64
PUBLIC	_cmt_f32_f32
PUBLIC	_cmt_f64_f64
PUBLIC	_cmt_real_real
PUBLIC	_clt_u8_u8
PUBLIC	_clt_u16_u16
PUBLIC	_clt_u32_u32
PUBLIC	_clt_u64_u64
PUBLIC	_clt_i8_i8
PUBLIC	_clt_i16_i16
PUBLIC	_clt_i32_i32
PUBLIC	_clt_i64_i64
PUBLIC	_clt_f32_f32
PUBLIC	_clt_f64_f64
PUBLIC	_clt_real_real
PUBLIC	_cmteq_u8_u8
PUBLIC	_cmteq_u16_u16
PUBLIC	_cmteq_u32_u32
PUBLIC	_cmteq_u64_u64
PUBLIC	_cmteq_i8_i8
PUBLIC	_cmteq_i16_i16
PUBLIC	_cmteq_i32_i32
PUBLIC	_cmteq_i64_i64
PUBLIC	_cmteq_f32_f32
PUBLIC	_cmteq_f64_f64
PUBLIC	_cmteq_real_real
PUBLIC	_clteq_u8_u8
PUBLIC	_clteq_u16_u16
PUBLIC	_clteq_u32_u32
PUBLIC	_clteq_u64_u64
PUBLIC	_clteq_i8_i8
PUBLIC	_clteq_i16_i16
PUBLIC	_clteq_i32_i32
PUBLIC	_clteq_i64_i64
PUBLIC	_clteq_f32_f32
PUBLIC	_clteq_f64_f64
PUBLIC	_clteq_real_real
PUBLIC	_ceq_u8_u8
PUBLIC	_ceq_u16_u16
PUBLIC	_ceq_u32_u32
PUBLIC	_ceq_u64_u64
PUBLIC	_ceq_i8_i8
PUBLIC	_ceq_i16_i16
PUBLIC	_ceq_i32_i32
PUBLIC	_ceq_i64_i64
PUBLIC	_ceq_f32_f32
PUBLIC	_ceq_f64_f64
PUBLIC	_ceq_real_real
PUBLIC	_cneq_u8_u8
PUBLIC	_cneq_u16_u16
PUBLIC	_cneq_u32_u32
PUBLIC	_cneq_u64_u64
PUBLIC	_cneq_i8_i8
PUBLIC	_cneq_i16_i16
PUBLIC	_cneq_i32_i32
PUBLIC	_cneq_i64_i64
PUBLIC	_cneq_f32_f32
PUBLIC	_cneq_f64_f64
PUBLIC	_cneq_real_real
PUBLIC	_addSignatures
PUBLIC	_subSignatures
PUBLIC	_mulSignatures
PUBLIC	_divSignatures
PUBLIC	_pwrSignatures
PUBLIC	_srSignatures
PUBLIC	_slSignatures
PUBLIC	_bandSignatures
PUBLIC	_andSignatures
PUBLIC	_borSignatures
PUBLIC	_orSignatures
PUBLIC	_cmtSignatures
PUBLIC	_cltSignatures
PUBLIC	_cmteqSignatures
PUBLIC	_clteqSignatures
PUBLIC	_ceqSignatures
PUBLIC	_cneqSignatures
PUBLIC	_opTbl
PUBLIC	_err_strings
_DATA	SEGMENT
_functions DQ	FLAT:$SG37491
	DQ	FLAT:__u8
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37492
	DQ	FLAT:__u16
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37493
	DQ	FLAT:__u32
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37494
	DQ	FLAT:__u64
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37495
	DQ	FLAT:__i8
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37496
	DQ	FLAT:__i16
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37497
	DQ	FLAT:__i32
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37498
	DQ	FLAT:__i64
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37499
	DQ	FLAT:__f32
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37500
	DQ	FLAT:__f64
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37501
	DQ	FLAT:__bool
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37502
	DQ	FLAT:__vec2
	DD	02H
	ORG $+4
	DQ	FLAT:$SG37503
	DQ	FLAT:__vec3
	DD	03H
	ORG $+4
	DQ	FLAT:$SG37504
	DQ	FLAT:__vec4
	DD	04H
	ORG $+4
	DQ	FLAT:$SG37505
	DQ	FLAT:__mat2
	DD	04H
	ORG $+4
	DQ	FLAT:$SG37506
	DQ	FLAT:__mat3
	DD	09H
	ORG $+4
	DQ	FLAT:$SG37507
	DQ	FLAT:__mat4
	DD	010H
	ORG $+4
	DQ	FLAT:$SG37508
	DQ	FLAT:__g
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37509
	DQ	FLAT:__h
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37510
	DQ	FLAT:__normalize
	DD	01H
	ORG $+4
	DQ	FLAT:$SG37511
	DQ	FLAT:__magnitude
	DD	01H
	ORG $+4
$SG37491 DB	'u8', 00H
	ORG $+1
$SG37492 DB	'u16', 00H
$SG37493 DB	'u32', 00H
$SG37494 DB	'u64', 00H
$SG37495 DB	'i8', 00H
	ORG $+1
$SG37496 DB	'i16', 00H
$SG37497 DB	'i32', 00H
$SG37498 DB	'i64', 00H
$SG37499 DB	'f32', 00H
$SG37500 DB	'f64', 00H
$SG37501 DB	'bool', 00H
	ORG $+3
$SG37502 DB	'vec2', 00H
	ORG $+3
$SG37503 DB	'vec3', 00H
	ORG $+3
$SG37504 DB	'vec4', 00H
	ORG $+3
$SG37505 DB	'mat2', 00H
	ORG $+3
$SG37506 DB	'mat3', 00H
	ORG $+3
$SG37507 DB	'mat4', 00H
	ORG $+3
$SG37508 DB	'g', 00H
	ORG $+2
$SG37509 DB	'h', 00H
	ORG $+2
$SG37510 DB	'normalize', 00H
	ORG $+6
$SG37511 DB	'magnitude', 00H
	ORG $+6
_func_toString DQ FLAT:_None_toString
	DQ	FLAT:_u8_toString
	DQ	FLAT:_u16_toString
	DQ	FLAT:_u32_toString
	DQ	FLAT:_u64_toString
	DQ	FLAT:_i8_toString
	DQ	FLAT:_i16_toString
	DQ	FLAT:_i32_toString
	DQ	FLAT:_i64_toString
	DQ	FLAT:_f32_toString
	DQ	FLAT:_f64_toString
	DQ	FLAT:_bool_toString
	DQ	FLAT:_real_toString
	DQ	FLAT:_vec2_toString
	DQ	FLAT:_vec3_toString
	DQ	FLAT:_vec4_toString
	DQ	FLAT:_mat2_toString
	DQ	FLAT:_mat3_toString
	DQ	FLAT:_mat4_toString
$SG38706 DB	'OP_SR', 00H
	ORG $+2
_addSignatures DD 01H
	DD	01H
	DQ	FLAT:_add_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_add_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_add_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_add_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_add_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_add_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_add_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_add_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_add_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_add_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_add_real_real
	DD	0dH
	DD	0dH
	DQ	FLAT:_add_vec2_vec2
	DD	0eH
	DD	0eH
	DQ	FLAT:_add_vec3_vec3
	DD	0fH
	DD	0fH
	DQ	FLAT:_add_vec4_vec4
	DD	010H
	DD	010H
	DQ	FLAT:_add_mat2_mat2
	DD	011H
	DD	011H
	DQ	FLAT:_add_mat3_mat3
	DD	012H
	DD	012H
	DQ	FLAT:_add_mat4_mat4
_subSignatures DD 01H
	DD	01H
	DQ	FLAT:_sub_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_sub_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_sub_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_sub_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_sub_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_sub_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_sub_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_sub_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_sub_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_sub_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_sub_real_real
	DD	0dH
	DD	0dH
	DQ	FLAT:_sub_vec2_vec2
	DD	0eH
	DD	0eH
	DQ	FLAT:_sub_vec3_vec3
	DD	0fH
	DD	0fH
	DQ	FLAT:_sub_vec4_vec4
	DD	010H
	DD	010H
	DQ	FLAT:_sub_mat2_mat2
	DD	011H
	DD	011H
	DQ	FLAT:_sub_mat3_mat3
	DD	012H
	DD	012H
	DQ	FLAT:_sub_mat4_mat4
_mulSignatures DD 01H
	DD	01H
	DQ	FLAT:_mul_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_mul_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_mul_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_mul_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_mul_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_mul_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_mul_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_mul_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_mul_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_mul_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_mul_real_real
	DD	0dH
	DD	0dH
	DQ	FLAT:_mul_vec2_vec2
	DD	0eH
	DD	0eH
	DQ	FLAT:_mul_vec3_vec3
	DD	0fH
	DD	0fH
	DQ	FLAT:_mul_vec4_vec4
	DD	010H
	DD	010H
	DQ	FLAT:_mul_mat2_mat2
	DD	011H
	DD	011H
	DQ	FLAT:_mul_mat3_mat3
	DD	012H
	DD	012H
	DQ	FLAT:_mul_mat4_mat4
_divSignatures DD 01H
	DD	01H
	DQ	FLAT:_div_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_div_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_div_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_div_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_div_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_div_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_div_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_div_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_div_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_div_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_div_real_real
_pwrSignatures DD 01H
	DD	01H
	DQ	FLAT:_pwr_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_pwr_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_pwr_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_pwr_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_pwr_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_pwr_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_pwr_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_pwr_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_pwr_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_pwr_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_pwr_real_real
_srSignatures DD 01H
	DD	01H
	DQ	FLAT:_sr_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_sr_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_sr_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_sr_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_sr_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_sr_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_sr_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_sr_i64_i64
_slSignatures DD 01H
	DD	01H
	DQ	FLAT:_sl_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_sl_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_sl_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_sl_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_sl_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_sl_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_sl_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_sl_i64_i64
_bandSignatures DD 01H
	DD	01H
	DQ	FLAT:_band_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_band_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_band_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_band_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_band_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_band_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_band_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_band_i64_i64
_andSignatures DD 0bH
	DD	0bH
	DQ	FLAT:_and_bool_bool
_borSignatures DD 01H
	DD	01H
	DQ	FLAT:_bor_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_bor_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_bor_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_bor_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_bor_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_bor_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_bor_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_bor_i64_i64
_orSignatures DD 0bH
	DD	0bH
	DQ	FLAT:_or_bool_bool
_cmtSignatures DD 01H
	DD	01H
	DQ	FLAT:_cmt_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_cmt_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_cmt_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_cmt_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_cmt_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_cmt_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_cmt_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_cmt_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_cmt_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_cmt_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_cmt_real_real
_cltSignatures DD 01H
	DD	01H
	DQ	FLAT:_clt_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_clt_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_clt_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_clt_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_clt_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_clt_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_clt_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_clt_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_clt_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_clt_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_clt_real_real
_cmteqSignatures DD 01H
	DD	01H
	DQ	FLAT:_cmteq_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_cmteq_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_cmteq_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_cmteq_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_cmteq_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_cmteq_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_cmteq_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_cmteq_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_cmteq_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_cmteq_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_cmteq_real_real
_clteqSignatures DD 01H
	DD	01H
	DQ	FLAT:_clteq_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_clteq_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_clteq_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_clteq_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_clteq_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_clteq_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_clteq_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_clteq_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_clteq_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_clteq_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_clteq_real_real
_ceqSignatures DD 01H
	DD	01H
	DQ	FLAT:_ceq_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_ceq_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_ceq_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_ceq_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_ceq_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_ceq_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_ceq_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_ceq_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_ceq_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_ceq_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_ceq_real_real
_cneqSignatures DD 01H
	DD	01H
	DQ	FLAT:_cneq_u8_u8
	DD	02H
	DD	02H
	DQ	FLAT:_cneq_u16_u16
	DD	03H
	DD	03H
	DQ	FLAT:_cneq_u32_u32
	DD	04H
	DD	04H
	DQ	FLAT:_cneq_u64_u64
	DD	05H
	DD	05H
	DQ	FLAT:_cneq_i8_i8
	DD	06H
	DD	06H
	DQ	FLAT:_cneq_i16_i16
	DD	07H
	DD	07H
	DQ	FLAT:_cneq_i32_i32
	DD	08H
	DD	08H
	DQ	FLAT:_cneq_i64_i64
	DD	09H
	DD	09H
	DQ	FLAT:_cneq_f32_f32
	DD	0aH
	DD	0aH
	DQ	FLAT:_cneq_f64_f64
	DD	0cH
	DD	0cH
	DQ	FLAT:_cneq_real_real
_opTbl	DD	01H
	ORG $+4
	DQ	FLAT:_addSignatures
	DD	011H
	ORG $+4
	DD	02H
	ORG $+4
	DQ	FLAT:_subSignatures
	DD	011H
	ORG $+4
	DD	03H
	ORG $+4
	DQ	FLAT:_mulSignatures
	DD	011H
	ORG $+4
	DD	04H
	ORG $+4
	DQ	FLAT:_divSignatures
	DD	0bH
	ORG $+4
	DD	05H
	ORG $+4
	DQ	FLAT:_pwrSignatures
	DD	0bH
	ORG $+4
	DD	06H
	ORG $+4
	DQ	FLAT:_srSignatures
	DD	08H
	ORG $+4
	DD	07H
	ORG $+4
	DQ	FLAT:_slSignatures
	DD	08H
	ORG $+4
	DD	08H
	ORG $+4
	DQ	FLAT:_bandSignatures
	DD	08H
	ORG $+4
	DD	09H
	ORG $+4
	DQ	FLAT:_andSignatures
	DD	01H
	ORG $+4
	DD	0aH
	ORG $+4
	DQ	FLAT:_borSignatures
	DD	08H
	ORG $+4
	DD	0bH
	ORG $+4
	DQ	FLAT:_orSignatures
	DD	01H
	ORG $+4
	DD	0cH
	ORG $+4
	DQ	FLAT:_cmtSignatures
	DD	0bH
	ORG $+4
	DD	0dH
	ORG $+4
	DQ	FLAT:_cltSignatures
	DD	0bH
	ORG $+4
	DD	0eH
	ORG $+4
	DQ	FLAT:_cmteqSignatures
	DD	0bH
	ORG $+4
	DD	0fH
	ORG $+4
	DQ	FLAT:_clteqSignatures
	DD	0bH
	ORG $+4
	DD	010H
	ORG $+4
	DQ	FLAT:_ceqSignatures
	DD	0bH
	ORG $+4
	DD	011H
	ORG $+4
	DQ	FLAT:_cneqSignatures
	DD	0bH
	ORG $+4
$SG38700 DB	'OP_NONE', 00H
$SG38701 DB	'OP_ADD', 00H
	ORG $+1
$SG38702 DB	'OP_SUB', 00H
	ORG $+1
$SG38703 DB	'OP_MUL', 00H
	ORG $+1
$SG38704 DB	'OP_DIV', 00H
	ORG $+1
$SG38705 DB	'OP_PWR', 00H
	ORG $+1
$SG38707 DB	'OP_SL', 00H
	ORG $+2
$SG38708 DB	'OP_BAND', 00H
$SG38709 DB	'OP_AND', 00H
	ORG $+1
$SG38710 DB	'OP_BOR', 00H
	ORG $+1
$SG38711 DB	'OP_OR', 00H
	ORG $+2
$SG38712 DB	'OP_CMT', 00H
	ORG $+1
$SG38713 DB	'OP_CLT', 00H
	ORG $+1
$SG38714 DB	'OP_CMTEQ', 00H
	ORG $+7
$SG38715 DB	'OP_CLTEQ', 00H
	ORG $+3
$SG38716 DB	'OP_CEQ', 00H
	ORG $+5
$SG38717 DB	'OP_CNEQ', 00H
$SG38718 DB	'OP_EQ', 00H
	ORG $+2
$SG38719 DB	'OP_ASG', 00H
	ORG $+1
$SG38720 DB	'OP_FUNC', 00H
$SG38721 DB	'OP_OBRAK', 00H
	ORG $+7
$SG38722 DB	'OP_CBRAK', 00H
	ORG $+7
_err_strings DQ	FLAT:$SG39049
	DQ	FLAT:$SG39050
	DQ	FLAT:$SG39051
	DQ	FLAT:$SG39052
$SG39049 DB	'Unkown operation between with two types or something.', 0aH
	DB	00H
	ORG $+1
$SG39050 DB	'Using unknown variable, or missing arguements or somethi'
	DB	'ng.', 0aH, 00H
	ORG $+3
$SG39051 DB	'Using unknown function or something.', 0aH, 00H
	ORG $+2
$SG39052 DB	'Calculation failed due to wrong type or something.', 0aH
	DB	00H
_DATA	ENDS
PUBLIC	WinMain
PUBLIC	InitTerminal
PUBLIC	UnInitTerminal
PUBLIC	IncrementCircular
PUBLIC	DecrementCircular
PUBLIC	UpdateTerminal
PUBLIC	IncrementBuffer
PUBLIC	AddToBuffer
PUBLIC	IncrementLine
PUBLIC	AddLine
PUBLIC	InputTermChar
PUBLIC	InputTermBuffer
PUBLIC	InputTerminal
PUBLIC	PaintTerminal
PUBLIC	IsRealConst
PUBLIC	GetReals
PUBLIC	_normalize_vec2
PUBLIC	_normalize_vec3
PUBLIC	_normalize_vec4
PUBLIC	_magnitude_vec2
PUBLIC	_magnitude_vec3
PUBLIC	_magnitude_vec4
PUBLIC	TypeToString
PUBLIC	IsStringEqual
PUBLIC	LookupFunction
PUBLIC	LookupOp
PUBLIC	InitLang
PUBLIC	UnInitLang
PUBLIC	GetHash
PUBLIC	NewHshNode
PUBLIC	AddSynTreeChild
PUBLIC	IsVStringEqual
PUBLIC	CopyVString
PUBLIC	CopyVar
PUBLIC	CopyVariable
PUBLIC	StoreVariable
PUBLIC	GetVariable
PUBLIC	OpToString
PUBLIC	CosumeOperand
PUBLIC	GetOpPred
PUBLIC	GetOpPred2
PUBLIC	GetOpArgCount
PUBLIC	IsBiggerOrEqPred
PUBLIC	CosumeConstant
PUBLIC	CharInStr
PUBLIC	CosumeVariable
PUBLIC	EatWhitespace
PUBLIC	GetSyntaxHint
PUBLIC	PopNumVars
PUBLIC	PopOperand
PUBLIC	PushOperand
PUBLIC	BuildSyntaxTree
PUBLIC	DrawRectangledText
PUBLIC	PaintSynTree
PUBLIC	EvalSyntaxTree
PUBLIC	PrintError
PUBLIC	InterpStatement
PUBLIC	InitDraw
PUBLIC	UnInitDraw
PUBLIC	UpdateDraw
PUBLIC	ResizeWindows
PUBLIC	PaintWindow
PUBLIC	InitApp
PUBLIC	UnInitApp
PUBLIC	WindowProc
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@4010000000000000
PUBLIC	__real@43e0000000000000
EXTRN	__report_rangecheckfailure:PROC
EXTRN	strlen:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	__imp_GetModuleHandleA:PROC
EXTRN	__imp_MulDiv:PROC
EXTRN	__imp_BitBlt:PROC
EXTRN	__imp_CreateCompatibleBitmap:PROC
EXTRN	__imp_CreateCompatibleDC:PROC
EXTRN	__imp_CreateFontA:PROC
EXTRN	__imp_DeleteDC:PROC
EXTRN	__imp_DeleteObject:PROC
EXTRN	__imp_GetDeviceCaps:PROC
EXTRN	__imp_GetStockObject:PROC
EXTRN	__imp_GetTextExtentPoint32A:PROC
EXTRN	__imp_LineTo:PROC
EXTRN	__imp_PatBlt:PROC
EXTRN	__imp_Rectangle:PROC
EXTRN	__imp_SelectObject:PROC
EXTRN	__imp_SetBkColor:PROC
EXTRN	__imp_SetBkMode:PROC
EXTRN	__imp_SetTextColor:PROC
EXTRN	__imp_GetTextMetricsA:PROC
EXTRN	__imp_MoveToEx:PROC
EXTRN	__imp_TextOutA:PROC
EXTRN	__imp_GetMessageA:PROC
EXTRN	__imp_TranslateMessage:PROC
EXTRN	__imp_DispatchMessageA:PROC
EXTRN	__imp_SendMessageA:PROC
EXTRN	__imp_DefWindowProcA:PROC
EXTRN	__imp_PostQuitMessage:PROC
EXTRN	__imp_RegisterClassA:PROC
EXTRN	__imp_CreateWindowExA:PROC
EXTRN	__imp_ShowWindow:PROC
EXTRN	__imp_MoveWindow:PROC
EXTRN	__imp_UpdateWindow:PROC
EXTRN	__imp_GetDC:PROC
EXTRN	__imp_ReleaseDC:PROC
EXTRN	__imp_BeginPaint:PROC
EXTRN	__imp_EndPaint:PROC
EXTRN	__imp_InvalidateRect:PROC
EXTRN	__imp_GetWindowTextA:PROC
EXTRN	__imp_GetClientRect:PROC
EXTRN	__imp_FillRect:PROC
EXTRN	__imp_LoadCursorA:PROC
EXTRN	__imp_LoadIconA:PROC
EXTRN	__imp_SetProcessDPIAware:PROC
EXTRN	_wassert:PROC
EXTRN	strtod:PROC
EXTRN	pow:PROC
EXTRN	sqrt:PROC
EXTRN	powf:PROC
EXTRN	snprintf:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
EXTRN	_fltused:DWORD
_BSS	SEGMENT
?_buf@?1??InputTerminal@@9@9 DB 0100H DUP (?)		; `InputTerminal'::`2'::_buf
?app@?1??WindowProc@@9@9 DQ 01H DUP (?)			; `WindowProc'::`2'::app
?buf@?3??WindowProc@@9@9 DB 0101H DUP (?)		; `WindowProc'::`4'::buf
_BSS	ENDS
pdata	SEGMENT
$pdata$WinMain DD imagerel $LN7
	DD	imagerel $LN7+526
	DD	imagerel $unwind$WinMain
$pdata$InitTerminal DD imagerel $LN4
	DD	imagerel $LN4+389
	DD	imagerel $unwind$InitTerminal
$pdata$UnInitTerminal DD imagerel $LN3
	DD	imagerel $LN3+36
	DD	imagerel $unwind$UnInitTerminal
$pdata$UpdateTerminal DD imagerel $LN8
	DD	imagerel $LN8+266
	DD	imagerel $unwind$UpdateTerminal
$pdata$IncrementBuffer DD imagerel $LN6
	DD	imagerel $LN6+210
	DD	imagerel $unwind$IncrementBuffer
$pdata$AddToBuffer DD imagerel $LN5
	DD	imagerel $LN5+153
	DD	imagerel $unwind$AddToBuffer
$pdata$IncrementLine DD imagerel $LN5
	DD	imagerel $LN5+209
	DD	imagerel $unwind$IncrementLine
$pdata$AddLine DD imagerel $LN5
	DD	imagerel $LN5+198
	DD	imagerel $unwind$AddLine
$pdata$InputTermChar DD imagerel $LN4
	DD	imagerel $LN4+77
	DD	imagerel $unwind$InputTermChar
$pdata$InputTermBuffer DD imagerel $LN9
	DD	imagerel $LN9+154
	DD	imagerel $unwind$InputTermBuffer
$pdata$InputTerminal DD imagerel $LN3
	DD	imagerel $LN3+89
	DD	imagerel $unwind$InputTerminal
$pdata$PaintTerminal DD imagerel $LN8
	DD	imagerel $LN8+456
	DD	imagerel $unwind$PaintTerminal
$pdata$__u8 DD	imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$__u8
$pdata$__u16 DD	imagerel $LN4
	DD	imagerel $LN4+146
	DD	imagerel $unwind$__u16
$pdata$__u32 DD	imagerel $LN4
	DD	imagerel $LN4+146
	DD	imagerel $unwind$__u32
$pdata$__u64 DD	imagerel $LN5
	DD	imagerel $LN5+200
	DD	imagerel $unwind$__u64
$pdata$__i8 DD	imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$__i8
$pdata$__i16 DD	imagerel $LN4
	DD	imagerel $LN4+146
	DD	imagerel $unwind$__i16
$pdata$__i32 DD	imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$__i32
$pdata$__i64 DD	imagerel $LN4
	DD	imagerel $LN4+126
	DD	imagerel $unwind$__i64
$pdata$__f32 DD	imagerel $LN4
	DD	imagerel $LN4+126
	DD	imagerel $unwind$__f32
$pdata$__f64 DD	imagerel $LN4
	DD	imagerel $LN4+147
	DD	imagerel $unwind$__f64
$pdata$__bool DD imagerel $LN4
	DD	imagerel $LN4+145
	DD	imagerel $unwind$__bool
$pdata$GetReals DD imagerel $LN7
	DD	imagerel $LN7+147
	DD	imagerel $unwind$GetReals
$pdata$__vec2 DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$__vec2
$pdata$__vec3 DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$__vec3
$pdata$__vec4 DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$__vec4
$pdata$__mat2 DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$__mat2
$pdata$__mat3 DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$__mat3
$pdata$__mat4 DD imagerel $LN4
	DD	imagerel $LN4+209
	DD	imagerel $unwind$__mat4
$pdata$__h DD	imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$__h
$pdata$__g DD	imagerel $LN4
	DD	imagerel $LN4+155
	DD	imagerel $unwind$__g
$pdata$_normalize_vec2 DD imagerel $LN3
	DD	imagerel $LN3+155
	DD	imagerel $unwind$_normalize_vec2
$pdata$_normalize_vec3 DD imagerel $LN3
	DD	imagerel $LN3+209
	DD	imagerel $unwind$_normalize_vec3
$pdata$_normalize_vec4 DD imagerel $LN3
	DD	imagerel $LN3+257
	DD	imagerel $unwind$_normalize_vec4
$pdata$__normalize DD imagerel $LN9
	DD	imagerel $LN9+403
	DD	imagerel $unwind$__normalize
$pdata$_magnitude_vec2 DD imagerel $LN3
	DD	imagerel $LN3+69
	DD	imagerel $unwind$_magnitude_vec2
$pdata$_magnitude_vec3 DD imagerel $LN3
	DD	imagerel $LN3+91
	DD	imagerel $unwind$_magnitude_vec3
$pdata$_magnitude_vec4 DD imagerel $LN3
	DD	imagerel $LN3+107
	DD	imagerel $unwind$_magnitude_vec4
$pdata$__magnitude DD imagerel $LN9
	DD	imagerel $LN9+411
	DD	imagerel $unwind$__magnitude
$pdata$_None_toString DD imagerel $LN3
	DD	imagerel $LN3+52
	DD	imagerel $unwind$_None_toString
$pdata$_u8_toString DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_u8_toString
$pdata$_u16_toString DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_u16_toString
$pdata$_u32_toString DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$_u32_toString
$pdata$_u64_toString DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$_u64_toString
$pdata$_i8_toString DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_i8_toString
$pdata$_i16_toString DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$_i16_toString
$pdata$_i32_toString DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$_i32_toString
$pdata$_i64_toString DD imagerel $LN3
	DD	imagerel $LN3+61
	DD	imagerel $unwind$_i64_toString
$pdata$_f32_toString DD imagerel $LN3
	DD	imagerel $LN3+70
	DD	imagerel $unwind$_f32_toString
$pdata$_f64_toString DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_f64_toString
$pdata$_bool_toString DD imagerel $LN5
	DD	imagerel $LN5+87
	DD	imagerel $unwind$_bool_toString
$pdata$_real_toString DD imagerel $LN3
	DD	imagerel $LN3+67
	DD	imagerel $unwind$_real_toString
$pdata$_vec2_toString DD imagerel $LN3
	DD	imagerel $LN3+103
	DD	imagerel $unwind$_vec2_toString
$pdata$_vec3_toString DD imagerel $LN3
	DD	imagerel $LN3+130
	DD	imagerel $unwind$_vec3_toString
$pdata$_vec4_toString DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$_vec4_toString
$pdata$_mat2_toString DD imagerel $LN3
	DD	imagerel $LN3+158
	DD	imagerel $unwind$_mat2_toString
$pdata$_mat3_toString DD imagerel $LN3
	DD	imagerel $LN3+330
	DD	imagerel $unwind$_mat3_toString
$pdata$_mat4_toString DD imagerel $LN3
	DD	imagerel $LN3+561
	DD	imagerel $unwind$_mat4_toString
$pdata$TypeToString DD imagerel $LN3
	DD	imagerel $LN3+65
	DD	imagerel $unwind$TypeToString
$pdata$IsStringEqual DD imagerel $LN7
	DD	imagerel $LN7+154
	DD	imagerel $unwind$IsStringEqual
$pdata$LookupFunction DD imagerel $LN7
	DD	imagerel $LN7+124
	DD	imagerel $unwind$LookupFunction
$pdata$_add_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_add_u8_u8
$pdata$_add_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_add_u16_u16
$pdata$_add_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$_add_u32_u32
$pdata$_add_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$_add_u64_u64
$pdata$_add_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_add_i8_i8
$pdata$_add_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_add_i16_i16
$pdata$_add_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+135
	DD	imagerel $unwind$_add_i32_i32
$pdata$_add_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+138
	DD	imagerel $unwind$_add_i64_i64
$pdata$_add_f32_f32 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_add_f32_f32
$pdata$_add_f64_f64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_add_f64_f64
$pdata$_add_real_real DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_add_real_real
$pdata$_add_vec2_vec2 DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$_add_vec2_vec2
$pdata$_add_vec3_vec3 DD imagerel $LN3
	DD	imagerel $LN3+292
	DD	imagerel $unwind$_add_vec3_vec3
$pdata$_add_vec4_vec4 DD imagerel $LN3
	DD	imagerel $LN3+353
	DD	imagerel $unwind$_add_vec4_vec4
$pdata$_add_mat2_mat2 DD imagerel $LN3
	DD	imagerel $LN3+353
	DD	imagerel $unwind$_add_mat2_mat2
$pdata$_add_mat3_mat3 DD imagerel $LN3
	DD	imagerel $LN3+658
	DD	imagerel $unwind$_add_mat3_mat3
$pdata$_add_mat4_mat4 DD imagerel $LN3
	DD	imagerel $LN3+1123
	DD	imagerel $unwind$_add_mat4_mat4
$pdata$_sub_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_sub_u8_u8
$pdata$_sub_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_sub_u16_u16
$pdata$_sub_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$_sub_u32_u32
$pdata$_sub_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_sub_u64_u64
$pdata$_sub_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_sub_i8_i8
$pdata$_sub_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_sub_i16_i16
$pdata$_sub_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$_sub_i32_i32
$pdata$_sub_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_sub_i64_i64
$pdata$_sub_f32_f32 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_sub_f32_f32
$pdata$_sub_f64_f64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_sub_f64_f64
$pdata$_sub_real_real DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_sub_real_real
$pdata$_sub_vec2_vec2 DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$_sub_vec2_vec2
$pdata$_sub_vec3_vec3 DD imagerel $LN3
	DD	imagerel $LN3+292
	DD	imagerel $unwind$_sub_vec3_vec3
$pdata$_sub_vec4_vec4 DD imagerel $LN3
	DD	imagerel $LN3+353
	DD	imagerel $unwind$_sub_vec4_vec4
$pdata$_sub_mat2_mat2 DD imagerel $LN3
	DD	imagerel $LN3+353
	DD	imagerel $unwind$_sub_mat2_mat2
$pdata$_sub_mat3_mat3 DD imagerel $LN3
	DD	imagerel $LN3+658
	DD	imagerel $unwind$_sub_mat3_mat3
$pdata$_sub_mat4_mat4 DD imagerel $LN3
	DD	imagerel $LN3+1123
	DD	imagerel $unwind$_sub_mat4_mat4
$pdata$_mul_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_mul_u8_u8
$pdata$_mul_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_mul_u16_u16
$pdata$_mul_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$_mul_u32_u32
$pdata$_mul_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_mul_u64_u64
$pdata$_mul_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_mul_i8_i8
$pdata$_mul_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_mul_i16_i16
$pdata$_mul_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$_mul_i32_i32
$pdata$_mul_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_mul_i64_i64
$pdata$_mul_f32_f32 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_mul_f32_f32
$pdata$_mul_f64_f64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_mul_f64_f64
$pdata$_mul_real_real DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_mul_real_real
$pdata$_mul_vec2_vec2 DD imagerel $LN3
	DD	imagerel $LN3+231
	DD	imagerel $unwind$_mul_vec2_vec2
$pdata$_mul_vec3_vec3 DD imagerel $LN3
	DD	imagerel $LN3+292
	DD	imagerel $unwind$_mul_vec3_vec3
$pdata$_mul_vec4_vec4 DD imagerel $LN3
	DD	imagerel $LN3+353
	DD	imagerel $unwind$_mul_vec4_vec4
$pdata$_mul_mat2_mat2 DD imagerel $LN3
	DD	imagerel $LN3+553
	DD	imagerel $unwind$_mul_mat2_mat2
$pdata$_mul_mat3_mat3 DD imagerel $LN3
	DD	imagerel $LN3+1558
	DD	imagerel $unwind$_mul_mat3_mat3
$pdata$_mul_mat4_mat4 DD imagerel $LN3
	DD	imagerel $LN3+3485
	DD	imagerel $unwind$_mul_mat4_mat4
$pdata$_div_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_div_u8_u8
$pdata$_div_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_div_u16_u16
$pdata$_div_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$_div_u32_u32
$pdata$_div_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_div_u64_u64
$pdata$_div_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_div_i8_i8
$pdata$_div_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_div_i16_i16
$pdata$_div_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+136
	DD	imagerel $unwind$_div_i32_i32
$pdata$_div_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_div_i64_i64
$pdata$_div_f32_f32 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_div_f32_f32
$pdata$_div_f64_f64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_div_f64_f64
$pdata$_div_real_real DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_div_real_real
$pdata$_pwr_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$_pwr_u8_u8
$pdata$_pwr_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$_pwr_u16_u16
$pdata$_pwr_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$_pwr_u32_u32
$pdata$_pwr_u64_u64 DD imagerel $LN8
	DD	imagerel $LN8+294
	DD	imagerel $unwind$_pwr_u64_u64
$pdata$_pwr_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+171
	DD	imagerel $unwind$_pwr_i8_i8
$pdata$_pwr_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+172
	DD	imagerel $unwind$_pwr_i16_i16
$pdata$_pwr_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+165
	DD	imagerel $unwind$_pwr_i32_i32
$pdata$_pwr_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+169
	DD	imagerel $unwind$_pwr_i64_i64
$pdata$_pwr_f32_f32 DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$_pwr_f32_f32
$pdata$_pwr_f64_f64 DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$_pwr_f64_f64
$pdata$_pwr_real_real DD imagerel $LN3
	DD	imagerel $LN3+148
	DD	imagerel $unwind$_pwr_real_real
$pdata$_sr_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_sr_u8_u8
$pdata$_sr_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_sr_u16_u16
$pdata$_sr_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$_sr_u32_u32
$pdata$_sr_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+154
	DD	imagerel $unwind$_sr_u64_u64
$pdata$_sr_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_sr_i8_i8
$pdata$_sr_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_sr_i16_i16
$pdata$_sr_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$_sr_i32_i32
$pdata$_sr_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+154
	DD	imagerel $unwind$_sr_i64_i64
$pdata$_sl_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_sl_u8_u8
$pdata$_sl_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_sl_u16_u16
$pdata$_sl_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$_sl_u32_u32
$pdata$_sl_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+154
	DD	imagerel $unwind$_sl_u64_u64
$pdata$_sl_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_sl_i8_i8
$pdata$_sl_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_sl_i16_i16
$pdata$_sl_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+150
	DD	imagerel $unwind$_sl_i32_i32
$pdata$_sl_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+154
	DD	imagerel $unwind$_sl_i64_i64
$pdata$_band_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_band_u8_u8
$pdata$_band_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_band_u16_u16
$pdata$_band_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$_band_u32_u32
$pdata$_band_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_band_u64_u64
$pdata$_band_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_band_i8_i8
$pdata$_band_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_band_i16_i16
$pdata$_band_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$_band_i32_i32
$pdata$_band_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_band_i64_i64
$pdata$_and_bool_bool DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_and_bool_bool
$pdata$_bor_u8_u8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_bor_u8_u8
$pdata$_bor_u16_u16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_bor_u16_u16
$pdata$_bor_u32_u32 DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$_bor_u32_u32
$pdata$_bor_u64_u64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_bor_u64_u64
$pdata$_bor_i8_i8 DD imagerel $LN3
	DD	imagerel $LN3+139
	DD	imagerel $unwind$_bor_i8_i8
$pdata$_bor_i16_i16 DD imagerel $LN3
	DD	imagerel $LN3+140
	DD	imagerel $unwind$_bor_i16_i16
$pdata$_bor_i32_i32 DD imagerel $LN3
	DD	imagerel $LN3+137
	DD	imagerel $unwind$_bor_i32_i32
$pdata$_bor_i64_i64 DD imagerel $LN3
	DD	imagerel $LN3+141
	DD	imagerel $unwind$_bor_i64_i64
$pdata$_or_bool_bool DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_or_bool_bool
$pdata$_cmt_u8_u8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmt_u8_u8
$pdata$_cmt_u16_u16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmt_u16_u16
$pdata$_cmt_u32_u32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_cmt_u32_u32
$pdata$_cmt_u64_u64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_cmt_u64_u64
$pdata$_cmt_i8_i8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmt_i8_i8
$pdata$_cmt_i16_i16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmt_i16_i16
$pdata$_cmt_i32_i32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_cmt_i32_i32
$pdata$_cmt_i64_i64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_cmt_i64_i64
$pdata$_cmt_f32_f32 DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$_cmt_f32_f32
$pdata$_cmt_f64_f64 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmt_f64_f64
$pdata$_cmt_real_real DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmt_real_real
$pdata$_clt_u8_u8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clt_u8_u8
$pdata$_clt_u16_u16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clt_u16_u16
$pdata$_clt_u32_u32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_clt_u32_u32
$pdata$_clt_u64_u64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_clt_u64_u64
$pdata$_clt_i8_i8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clt_i8_i8
$pdata$_clt_i16_i16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clt_i16_i16
$pdata$_clt_i32_i32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_clt_i32_i32
$pdata$_clt_i64_i64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_clt_i64_i64
$pdata$_clt_f32_f32 DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$_clt_f32_f32
$pdata$_clt_f64_f64 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clt_f64_f64
$pdata$_clt_real_real DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clt_real_real
$pdata$_cmteq_u8_u8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmteq_u8_u8
$pdata$_cmteq_u16_u16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmteq_u16_u16
$pdata$_cmteq_u32_u32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_cmteq_u32_u32
$pdata$_cmteq_u64_u64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_cmteq_u64_u64
$pdata$_cmteq_i8_i8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmteq_i8_i8
$pdata$_cmteq_i16_i16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmteq_i16_i16
$pdata$_cmteq_i32_i32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_cmteq_i32_i32
$pdata$_cmteq_i64_i64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_cmteq_i64_i64
$pdata$_cmteq_f32_f32 DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$_cmteq_f32_f32
$pdata$_cmteq_f64_f64 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmteq_f64_f64
$pdata$_cmteq_real_real DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cmteq_real_real
$pdata$_clteq_u8_u8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clteq_u8_u8
$pdata$_clteq_u16_u16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clteq_u16_u16
$pdata$_clteq_u32_u32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_clteq_u32_u32
$pdata$_clteq_u64_u64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_clteq_u64_u64
$pdata$_clteq_i8_i8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clteq_i8_i8
$pdata$_clteq_i16_i16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clteq_i16_i16
$pdata$_clteq_i32_i32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_clteq_i32_i32
$pdata$_clteq_i64_i64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_clteq_i64_i64
$pdata$_clteq_f32_f32 DD imagerel $LN5
	DD	imagerel $LN5+161
	DD	imagerel $unwind$_clteq_f32_f32
$pdata$_clteq_f64_f64 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clteq_f64_f64
$pdata$_clteq_real_real DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_clteq_real_real
$pdata$_ceq_u8_u8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_ceq_u8_u8
$pdata$_ceq_u16_u16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_ceq_u16_u16
$pdata$_ceq_u32_u32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_ceq_u32_u32
$pdata$_ceq_u64_u64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_ceq_u64_u64
$pdata$_ceq_i8_i8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_ceq_i8_i8
$pdata$_ceq_i16_i16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_ceq_i16_i16
$pdata$_ceq_i32_i32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_ceq_i32_i32
$pdata$_ceq_i64_i64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_ceq_i64_i64
$pdata$_ceq_f32_f32 DD imagerel $LN5
	DD	imagerel $LN5+163
	DD	imagerel $unwind$_ceq_f32_f32
$pdata$_ceq_f64_f64 DD imagerel $LN5
	DD	imagerel $LN5+164
	DD	imagerel $unwind$_ceq_f64_f64
$pdata$_ceq_real_real DD imagerel $LN5
	DD	imagerel $LN5+164
	DD	imagerel $unwind$_ceq_real_real
$pdata$_cneq_u8_u8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cneq_u8_u8
$pdata$_cneq_u16_u16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cneq_u16_u16
$pdata$_cneq_u32_u32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_cneq_u32_u32
$pdata$_cneq_u64_u64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_cneq_u64_u64
$pdata$_cneq_i8_i8 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cneq_i8_i8
$pdata$_cneq_i16_i16 DD imagerel $LN5
	DD	imagerel $LN5+162
	DD	imagerel $unwind$_cneq_i16_i16
$pdata$_cneq_i32_i32 DD imagerel $LN5
	DD	imagerel $LN5+158
	DD	imagerel $unwind$_cneq_i32_i32
$pdata$_cneq_i64_i64 DD imagerel $LN5
	DD	imagerel $LN5+160
	DD	imagerel $unwind$_cneq_i64_i64
$pdata$_cneq_f32_f32 DD imagerel $LN6
	DD	imagerel $LN6+163
	DD	imagerel $unwind$_cneq_f32_f32
$pdata$_cneq_f64_f64 DD imagerel $LN6
	DD	imagerel $LN6+164
	DD	imagerel $unwind$_cneq_f64_f64
$pdata$_cneq_real_real DD imagerel $LN6
	DD	imagerel $LN6+164
	DD	imagerel $unwind$_cneq_real_real
$pdata$LookupOp DD imagerel $LN13
	DD	imagerel $LN13+304
	DD	imagerel $unwind$LookupOp
$pdata$InitLang DD imagerel $LN3
	DD	imagerel $LN3+59
	DD	imagerel $unwind$InitLang
$pdata$UnInitLang DD imagerel $LN3
	DD	imagerel $LN3+33
	DD	imagerel $unwind$UnInitLang
$pdata$GetHash DD imagerel $LN5
	DD	imagerel $LN5+96
	DD	imagerel $unwind$GetHash
$pdata$NewHshNode DD imagerel $LN3
	DD	imagerel $LN3+78
	DD	imagerel $unwind$NewHshNode
$pdata$IsVStringEqual DD imagerel $LN7
	DD	imagerel $LN7+154
	DD	imagerel $unwind$IsVStringEqual
$pdata$CopyVString DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$CopyVString
$pdata$CopyVar DD imagerel $LN7
	DD	imagerel $LN7+117
	DD	imagerel $unwind$CopyVar
$pdata$CopyVariable DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$CopyVariable
$pdata$StoreVariable DD imagerel $LN8
	DD	imagerel $LN8+279
	DD	imagerel $unwind$StoreVariable
$pdata$GetVariable DD imagerel $LN6
	DD	imagerel $LN6+126
	DD	imagerel $unwind$GetVariable
$pdata$CosumeOperand DD imagerel $LN43
	DD	imagerel $LN43+732
	DD	imagerel $unwind$CosumeOperand
$pdata$GetOpPred DD imagerel $LN26
	DD	imagerel $LN26+272
	DD	imagerel $unwind$GetOpPred
$pdata$GetOpPred2 DD imagerel $LN11
	DD	imagerel $LN11+133
	DD	imagerel $unwind$GetOpPred2
$pdata$GetOpArgCount DD imagerel $LN3
	DD	imagerel $LN3+23
	DD	imagerel $unwind$GetOpArgCount
$pdata$IsBiggerOrEqPred DD imagerel $LN5
	DD	imagerel $LN5+79
	DD	imagerel $unwind$IsBiggerOrEqPred
$pdata$CosumeConstant DD imagerel $LN5
	DD	imagerel $LN5+292
	DD	imagerel $unwind$CosumeConstant
$pdata$CharInStr DD imagerel $LN7
	DD	imagerel $LN7+101
	DD	imagerel $unwind$CharInStr
$pdata$CosumeVariable DD imagerel $LN7
	DD	imagerel $LN7+340
	DD	imagerel $unwind$CosumeVariable
$pdata$EatWhitespace DD imagerel $LN5
	DD	imagerel $LN5+75
	DD	imagerel $unwind$EatWhitespace
$pdata$GetSyntaxHint DD imagerel $LN9
	DD	imagerel $LN9+124
	DD	imagerel $unwind$GetSyntaxHint
$pdata$PopNumVars DD imagerel $LN9
	DD	imagerel $LN9+471
	DD	imagerel $unwind$PopNumVars
$pdata$PopOperand DD imagerel $LN3
	DD	imagerel $LN3+222
	DD	imagerel $unwind$PopOperand
$pdata$PushOperand DD imagerel $LN9
	DD	imagerel $LN9+196
	DD	imagerel $unwind$PushOperand
$pdata$BuildSyntaxTree DD imagerel $LN39
	DD	imagerel $LN39+1973
	DD	imagerel $unwind$BuildSyntaxTree
$pdata$DrawRectangledText DD imagerel $LN3
	DD	imagerel $LN3+192
	DD	imagerel $unwind$DrawRectangledText
$pdata$PaintSynTree DD imagerel $LN17
	DD	imagerel $LN17+1113
	DD	imagerel $unwind$PaintSynTree
$pdata$EvalSyntaxTree DD imagerel $LN37
	DD	imagerel $LN37+1901
	DD	imagerel $unwind$EvalSyntaxTree
$pdata$PrintError DD imagerel $LN3
	DD	imagerel $LN3+50
	DD	imagerel $unwind$PrintError
$pdata$InterpStatement DD imagerel $LN5
	DD	imagerel $LN5+311
	DD	imagerel $unwind$InterpStatement
$pdata$InitDraw DD imagerel $LN4
	DD	imagerel $LN4+410
	DD	imagerel $unwind$InitDraw
$pdata$UnInitDraw DD imagerel $LN3
	DD	imagerel $LN3+92
	DD	imagerel $unwind$UnInitDraw
$pdata$UpdateDraw DD imagerel $LN3
	DD	imagerel $LN3+72
	DD	imagerel $unwind$UpdateDraw
$pdata$ResizeWindows DD imagerel $LN3
	DD	imagerel $LN3+191
	DD	imagerel $unwind$ResizeWindows
$pdata$PaintWindow DD imagerel $LN3
	DD	imagerel $LN3+174
	DD	imagerel $unwind$PaintWindow
$pdata$InitApp DD imagerel $LN3
	DD	imagerel $LN3+94
	DD	imagerel $unwind$InitApp
$pdata$UnInitApp DD imagerel $LN3
	DD	imagerel $LN3+64
	DD	imagerel $unwind$UnInitApp
$pdata$WindowProc DD imagerel $LN17
	DD	imagerel $LN17+1110
	DD	imagerel $unwind$WindowProc
pdata	ENDS
;	COMDAT __real@43e0000000000000
CONST	SEGMENT
__real@43e0000000000000 DQ 043e0000000000000r	; 9.22337e+18
CONST	ENDS
;	COMDAT __real@4010000000000000
CONST	SEGMENT
__real@4010000000000000 DQ 04010000000000000r	; 4
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
_DATA	SEGMENT
$SG37539 DB	'%u', 00H
	ORG $+1
$SG37047 DB	'c', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'j', 00H, 'o', 00H, 's', 00H, 'h'
	DB	00H, 'u', 00H, '\', 00H, 'D', 00H, 'o', 00H, 'c', 00H, 'u', 00H
	DB	'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'c'
	DB	00H, 'a', 00H, 'l', 00H, '\', 00H, 't', 00H, 'e', 00H, 'r', 00H
	DB	'm', 00H, 'i', 00H, 'n', 00H, 'a', 00H, 'l', 00H, '.', 00H, 'c'
	DB	00H, 00H, 00H
$SG37048 DB	't', 00H, 'e', 00H, 'r', 00H, 'm', 00H, '-', 00H, '>', 00H
	DB	'b', 00H, 'u', 00H, 'f', 00H, '.', 00H, 'b', 00H, 'u', 00H, 'f'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, 00H, 00H
	ORG $+6
$SG37128 DB	'>> %.*s', 0aH, 00H
	ORG $+3
$SG37518 DB	'None', 00H
	ORG $+3
$SG37525 DB	'%uhh', 00H
	ORG $+3
$SG37532 DB	'%uh', 00H
$SG37546 DB	'%ull', 00H
	ORG $+3
$SG37553 DB	'%dhh', 00H
	ORG $+3
$SG37560 DB	'%dh', 00H
$SG37567 DB	'%d', 00H
	ORG $+1
$SG37574 DB	'%dll', 00H
	ORG $+3
$SG37581 DB	'%f', 00H
	ORG $+1
$SG37588 DB	'%f', 00H
	ORG $+1
$SG37595 DB	'true', 00H
	ORG $+3
$SG37596 DB	'false', 00H
	ORG $+2
$SG37603 DB	'%f', 00H
	ORG $+5
$SG37610 DB	'(%f, %f)', 00H
	ORG $+7
$SG37617 DB	'(%f, %f, %f)', 00H
	ORG $+3
$SG37624 DB	'(%f, %f, %f, %f)', 00H
	ORG $+7
$SG37631 DB	'((%f, %f), (%f, %f))', 00H
	ORG $+3
$SG37638 DB	'((%f, %f, %f), (%f, %f, %f), (%f, %f %f))', 00H
	ORG $+14
$SG37645 DB	'(%f, %f, %f, %f), (%f, %f, %f, %f), (%f, %f, %f, %f), (%'
	DB	'f, %f, %f))', 00H
	ORG $+12
?strsToOps@?1??OpToString@@9@9 DQ FLAT:$SG38700		; `OpToString'::`2'::strsToOps
	DQ	FLAT:$SG38701
	DQ	FLAT:$SG38702
	DQ	FLAT:$SG38703
	DQ	FLAT:$SG38704
	DQ	FLAT:$SG38705
	DQ	FLAT:$SG38706
	DQ	FLAT:$SG38707
	DQ	FLAT:$SG38708
	DQ	FLAT:$SG38709
	DQ	FLAT:$SG38710
	DQ	FLAT:$SG38711
	DQ	FLAT:$SG38712
	DQ	FLAT:$SG38713
	DQ	FLAT:$SG38714
	DQ	FLAT:$SG38715
	DQ	FLAT:$SG38716
	DQ	FLAT:$SG38717
	DQ	FLAT:$SG38718
	DQ	FLAT:$SG38719
	DQ	FLAT:$SG38720
	DQ	FLAT:$SG38721
	DQ	FLAT:$SG38722
$SG38840 DB	' =-+*$#@!^&():''"<>?,./;\|}{[]-', 00H
	ORG $+1
$SG38855 DB	'!:=-+*/^&|()<>.-,', 00H
	ORG $+2
$SG38996 DB	'%f', 00H
	ORG $+1
$SG39101 DB	'c', 00H, ':', 00H, '\', 00H, 'U', 00H, 's', 00H, 'e', 00H
	DB	'r', 00H, 's', 00H, '\', 00H, 'j', 00H, 'o', 00H, 's', 00H, 'h'
	DB	00H, 'u', 00H, '\', 00H, 'D', 00H, 'o', 00H, 'c', 00H, 'u', 00H
	DB	'm', 00H, 'e', 00H, 'n', 00H, 't', 00H, 's', 00H, '\', 00H, 'c'
	DB	00H, 'a', 00H, 'l', 00H, '\', 00H, 'g', 00H, 'r', 00H, 'a', 00H
	DB	'p', 00H, 'h', 00H, '.', 00H, 'c', 00H, 00H, 00H
	ORG $+6
$SG39102 DB	'h', 00H, 'd', 00H, 'c', 00H, 00H, 00H
$SG39103 DB	'Courier New', 00H
	ORG $+4
$SG39171 DB	'Type something here ..', 00H
	ORG $+1
$SG39172 DB	'Edit', 00H
	ORG $+3
$SG39173 DB	'Submit', 00H
	ORG $+1
$SG39174 DB	'Button', 00H
	ORG $+1
$SG39219 DB	'cal_wndclass', 00H
	ORG $+3
$SG39220 DB	'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG39221 DB	'R', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 's', 00H, 't', 00H
	DB	'e', 00H, 'r', 00H, 'C', 00H, 'l', 00H, 'a', 00H, 's', 00H, 's'
	DB	00H, 'A', 00H, '(', 00H, '&', 00H, 'w', 00H, 'c', 00H, ')', 00H
	DB	00H, 00H
$SG39222 DB	'cal', 00H
	ORG $+4
$SG39223 DB	'cal_wndclass', 00H
	ORG $+3
$SG39224 DB	'm', 00H, 'a', 00H, 'i', 00H, 'n', 00H, '.', 00H, 'c', 00H
	DB	00H, 00H
	ORG $+2
$SG39225 DB	'h', 00H, 'W', 00H, 'n', 00H, 'd', 00H, 00H, 00H
_DATA	ENDS
voltbl	SEGMENT
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:WindowProc
	DD	026H
	DD	043cH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InitDraw
	DD	025H
	DD	0182H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InterpStatement
	DD	027H
	DD	011dH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:EvalSyntaxTree
	DD	035H
	DD	074bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:PaintSynTree
	DD	02bH
	DD	0441H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:BuildSyntaxTree
	DD	027H
	DD	079bH
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:PaintTerminal
	DD	018H
	DD	01b6H
_volmd	DD	0ffffffffH
	DDSymXIndex: 	FLAT:InitTerminal
	DD	022H
	DD	0173H
voltbl	ENDS
xdata	SEGMENT
$unwind$WinMain DD 021b01H
	DD	01f011bH
$unwind$InitTerminal DD 012719H
	DD	0e218H
	DD	imagerel __GSHandlerCheck
	DD	060H
$unwind$UnInitTerminal DD 010901H
	DD	04209H
$unwind$UpdateTerminal DD 031401H
	DD	07010a214H
	DD	0600fH
$unwind$IncrementBuffer DD 010901H
	DD	06209H
$unwind$AddToBuffer DD 010d01H
	DD	0620dH
$unwind$IncrementLine DD 010901H
	DD	06209H
$unwind$AddLine DD 010901H
	DD	04209H
$unwind$InputTermChar DD 010d01H
	DD	0420dH
$unwind$InputTermBuffer DD 011301H
	DD	06213H
$unwind$InputTerminal DD 011301H
	DD	06213H
$unwind$PaintTerminal DD 011d19H
	DD	0c20eH
	DD	imagerel __GSHandlerCheck
	DD	058H
$unwind$__u8 DD	041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__u16 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__u32 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__u64 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__i8 DD	041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__i16 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__i32 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__i64 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__f32 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__f64 DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__bool DD 041301H
	DD	0170113H
	DD	0600b700cH
$unwind$GetReals DD 011301H
	DD	08213H
$unwind$__vec2 DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$__vec3 DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$__vec4 DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$__mat2 DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$__mat3 DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$__mat4 DD 041d01H
	DD	019011dH
	DD	060157016H
$unwind$__h DD	041301H
	DD	0170113H
	DD	0600b700cH
$unwind$__g DD	041301H
	DD	0170113H
	DD	0600b700cH
$unwind$_normalize_vec2 DD 011501H
	DD	06215H
$unwind$_normalize_vec3 DD 011b01H
	DD	0621bH
$unwind$_normalize_vec4 DD 011b01H
	DD	0621bH
$unwind$__normalize DD 041301H
	DD	01b0113H
	DD	0600b700cH
$unwind$_magnitude_vec2 DD 011501H
	DD	04215H
$unwind$_magnitude_vec3 DD 011b01H
	DD	0421bH
$unwind$_magnitude_vec4 DD 011b01H
	DD	0421bH
$unwind$__magnitude DD 041301H
	DD	01b0113H
	DD	0600b700cH
$unwind$_None_toString DD 011201H
	DD	06212H
$unwind$_u8_toString DD 011201H
	DD	06212H
$unwind$_u16_toString DD 011201H
	DD	06212H
$unwind$_u32_toString DD 011201H
	DD	06212H
$unwind$_u64_toString DD 011201H
	DD	06212H
$unwind$_i8_toString DD 011201H
	DD	06212H
$unwind$_i16_toString DD 011201H
	DD	06212H
$unwind$_i32_toString DD 011201H
	DD	06212H
$unwind$_i64_toString DD 011201H
	DD	06212H
$unwind$_f32_toString DD 011201H
	DD	06212H
$unwind$_f64_toString DD 011201H
	DD	06212H
$unwind$_bool_toString DD 011201H
	DD	06212H
$unwind$_real_toString DD 011201H
	DD	06212H
$unwind$_vec2_toString DD 011201H
	DD	08212H
$unwind$_vec3_toString DD 011201H
	DD	08212H
$unwind$_vec4_toString DD 011201H
	DD	0a212H
$unwind$_mat2_toString DD 011201H
	DD	0a212H
$unwind$_mat3_toString DD 041501H
	DD	07011d215H
	DD	0300f6010H
$unwind$_mat4_toString DD 0a2101H
	DD	0150121H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	0300f5010H
$unwind$TypeToString DD 011201H
	DD	06212H
$unwind$IsStringEqual DD 010e01H
	DD	0220eH
$unwind$LookupFunction DD 010901H
	DD	06209H
$unwind$_add_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_u32_u32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_u64_u64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_i32_i32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_i64_i64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_f32_f32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_f64_f64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_real_real DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_vec2_vec2 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_vec3_vec3 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_vec4_vec4 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_mat2_mat2 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_mat3_mat3 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_add_mat4_mat4 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_u32_u32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_u64_u64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_i32_i32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_i64_i64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_f32_f32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_f64_f64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_real_real DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_vec2_vec2 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_vec3_vec3 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_vec4_vec4 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_mat2_mat2 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_mat3_mat3 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sub_mat4_mat4 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_u32_u32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_u64_u64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_i32_i32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_i64_i64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_f32_f32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_f64_f64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_real_real DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_vec2_vec2 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_vec3_vec3 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_vec4_vec4 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_mat2_mat2 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_mat3_mat3 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_mul_mat4_mat4 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_u32_u32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_u64_u64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_i32_i32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_i64_i64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_f32_f32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_f64_f64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_div_real_real DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_pwr_u8_u8 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_u16_u16 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_u32_u32 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_u64_u64 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_i8_i8 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_i16_i16 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_i32_i32 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_i64_i64 DD 041801H
	DD	0190118H
	DD	060107011H
$unwind$_pwr_f32_f32 DD 041801H
	DD	0170118H
	DD	060107011H
$unwind$_pwr_f64_f64 DD 041801H
	DD	0170118H
	DD	060107011H
$unwind$_pwr_real_real DD 041801H
	DD	0170118H
	DD	060107011H
$unwind$_sr_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sr_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sr_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_sr_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_sr_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sr_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sr_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_sr_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_sl_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sl_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sl_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_sl_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_sl_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sl_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_sl_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_sl_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_band_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_band_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_band_u32_u32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_band_u64_u64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_band_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_band_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_band_i32_i32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_band_i64_i64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_and_bool_bool DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_bor_u8_u8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_bor_u16_u16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_bor_u32_u32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_bor_u64_u64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_bor_i8_i8 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_bor_i16_i16 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_bor_i32_i32 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_bor_i64_i64 DD 041801H
	DD	0130118H
	DD	060107011H
$unwind$_or_bool_bool DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_u8_u8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_u16_u16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_i8_i8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_i16_i16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_f32_f32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_f64_f64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmt_real_real DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_u8_u8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_u16_u16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_i8_i8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_i16_i16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_f32_f32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_f64_f64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clt_real_real DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_u8_u8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_u16_u16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_i8_i8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_i16_i16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_f32_f32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_f64_f64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cmteq_real_real DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_u8_u8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_u16_u16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_i8_i8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_i16_i16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_f32_f32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_f64_f64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_clteq_real_real DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_u8_u8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_u16_u16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_i8_i8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_i16_i16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_f32_f32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_f64_f64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_ceq_real_real DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_u8_u8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_u16_u16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_u32_u32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_u64_u64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_i8_i8 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_i16_i16 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_i32_i32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_i64_i64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_f32_f32 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_f64_f64 DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$_cneq_real_real DD 041801H
	DD	0150118H
	DD	060107011H
$unwind$LookupOp DD 011101H
	DD	04211H
$unwind$InitLang DD 010401H
	DD	06204H
$unwind$UnInitLang DD 010901H
	DD	04209H
$unwind$GetHash DD 010901H
	DD	02209H
$unwind$NewHshNode DD 010901H
	DD	02209H
$unwind$IsVStringEqual DD 010e01H
	DD	0220eH
$unwind$CopyVString DD 010e01H
	DD	0220eH
$unwind$CopyVar DD 031001H
	DD	0700c6210H
	DD	0600bH
$unwind$CopyVariable DD 031001H
	DD	0700c4210H
	DD	0600bH
$unwind$StoreVariable DD 031001H
	DD	0700c8210H
	DD	0600bH
$unwind$GetVariable DD 010e01H
	DD	0820eH
$unwind$CosumeOperand DD 010e01H
	DD	0420eH
$unwind$GetOpPred DD 010801H
	DD	02208H
$unwind$GetOpPred2 DD 010801H
	DD	06208H
$unwind$GetOpArgCount DD 010801H
	DD	02208H
$unwind$IsBiggerOrEqPred DD 010c01H
	DD	0620cH
$unwind$CosumeConstant DD 041801H
	DD	02b0118H
	DD	060107011H
$unwind$CharInStr DD 010d01H
	DD	0220dH
$unwind$CosumeVariable DD 041d01H
	DD	02b011dH
	DD	060157016H
$unwind$EatWhitespace DD 010e01H
	DD	0220eH
$unwind$GetSyntaxHint DD 010801H
	DD	06208H
$unwind$PopNumVars DD 011801H
	DD	08218H
$unwind$PopOperand DD 011301H
	DD	0a213H
$unwind$PushOperand DD 011801H
	DD	06218H
$unwind$BuildSyntaxTree DD 042f19H
	DD	0ff011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	07e0H
$unwind$DrawRectangledText DD 011801H
	DD	06218H
$unwind$PaintSynTree DD 023319H
	DD	02b10121H
	DD	imagerel __GSHandlerCheck
	DD	01570H
$unwind$EvalSyntaxTree DD 093d19H
	DD	020c012bH
	DD	0e01cf01eH
	DD	07018c01aH
	DD	050166017H
	DD	03015H
	DD	imagerel __GSHandlerCheck
	DD	01050H
$unwind$PrintError DD 010d01H
	DD	0420dH
$unwind$InterpStatement DD 042f19H
	DD	043011dH
	DD	060157016H
	DD	imagerel __GSHandlerCheck
	DD	0200H
$unwind$InitDraw DD 022d19H
	DD	013011bH
	DD	imagerel __GSHandlerCheck
	DD	088H
$unwind$UnInitDraw DD 010901H
	DD	04209H
$unwind$UpdateDraw DD 011201H
	DD	04212H
$unwind$ResizeWindows DD 010901H
	DD	06209H
$unwind$PaintWindow DD 011301H
	DD	0a213H
$unwind$InitApp DD 010401H
	DD	06204H
$unwind$UnInitApp DD 010901H
	DD	04209H
$unwind$WindowProc DD 042e19H
	DD	03f011cH
	DD	060147015H
	DD	imagerel __GSHandlerCheck
	DD	01e0H
xdata	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\main.c
_TEXT	SEGMENT
c$1 = 96
tv64 = 100
success$2 = 104
$T3 = 112
$T4 = 120
ps$5 = 256
t$6 = 336
__$ArrayPad$ = 480
hWnd$ = 528
uMsg$ = 536
wParam$ = 544
lParam$ = 552
WindowProc PROC

; 19   : {

$LN17:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  0000e	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00013	56		 push	 rsi
  00014	57		 push	 rdi
  00015	48 81 ec f8 01
	00 00		 sub	 rsp, 504		; 000001f8H
  0001c	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00023	48 33 c4	 xor	 rax, rsp
  00026	48 89 84 24 e0
	01 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 20   :     static App *app;
; 21   :     switch (uMsg)

  0002e	8b 84 24 18 02
	00 00		 mov	 eax, DWORD PTR uMsg$[rsp]
  00035	89 44 24 64	 mov	 DWORD PTR tv64[rsp], eax
  00039	83 7c 24 64 0f	 cmp	 DWORD PTR tv64[rsp], 15
  0003e	77 2d		 ja	 SHORT $LN16@WindowProc
  00040	83 7c 24 64 0f	 cmp	 DWORD PTR tv64[rsp], 15
  00045	0f 84 4e 03 00
	00		 je	 $LN10@WindowProc
  0004b	83 7c 24 64 01	 cmp	 DWORD PTR tv64[rsp], 1
  00050	74 3c		 je	 SHORT $LN4@WindowProc
  00052	83 7c 24 64 02	 cmp	 DWORD PTR tv64[rsp], 2
  00057	0f 84 9f 03 00
	00		 je	 $LN12@WindowProc
  0005d	83 7c 24 64 05	 cmp	 DWORD PTR tv64[rsp], 5
  00062	0f 84 e4 02 00
	00		 je	 $LN9@WindowProc
  00068	e9 aa 03 00 00	 jmp	 $LN2@WindowProc
$LN16@WindowProc:
  0006d	81 7c 24 64 11
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 273 ; 00000111H
  00075	0f 84 61 01 00
	00		 je	 $LN5@WindowProc
  0007b	81 7c 24 64 33
	01 00 00	 cmp	 DWORD PTR tv64[rsp], 307 ; 00000133H
  00083	0f 84 5c 03 00
	00		 je	 $LN11@WindowProc
  00089	e9 89 03 00 00	 jmp	 $LN2@WindowProc
$LN4@WindowProc:

; 22   :     {
; 23   :         case WM_CREATE:
; 24   :         app =((App *)((LPCREATESTRUCT)lParam)->lpCreateParams);

  0008e	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  00096	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00099	48 89 05 00 00
	00 00		 mov	 QWORD PTR ?app@?1??WindowProc@@9@9, rax

; 25   :         app->edit =CreateWindowExA(0, WC_EDITA, "Type something here ..", WS_VISIBLE|WS_CHILD|ES_AUTOHSCROLL, 0, 0, 0, 0, hWnd, NULL, GetModuleHandleA(NULL), NULL);

  000a0	33 c9		 xor	 ecx, ecx
  000a2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  000a8	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  000b1	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000b6	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  000bf	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR hWnd$[rsp]
  000c7	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  000cc	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  000d4	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  000dc	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  000e4	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  000ec	41 b9 80 00 00
	50		 mov	 r9d, 1342177408		; 50000080H
  000f2	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG39171
  000f9	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39172
  00100	33 c9		 xor	 ecx, ecx
  00102	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  00108	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?app@?1??WindowProc@@9@9
  0010f	48 89 81 80 00
	00 00		 mov	 QWORD PTR [rcx+128], rax

; 26   :         app->button =CreateWindowExA(0, WC_BUTTONA, "Submit", WS_VISIBLE|WS_CHILD|BS_PUSHBUTTON, 0, 0, 0, 0, hWnd, NULL, GetModuleHandleA(NULL), NULL);

  00116	33 c9		 xor	 ecx, ecx
  00118	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetModuleHandleA
  0011e	48 c7 44 24 58
	00 00 00 00	 mov	 QWORD PTR [rsp+88], 0
  00127	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  0012c	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  00135	48 8b 84 24 10
	02 00 00	 mov	 rax, QWORD PTR hWnd$[rsp]
  0013d	48 89 44 24 40	 mov	 QWORD PTR [rsp+64], rax
  00142	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0014a	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00152	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  0015a	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR [rsp+32], 0
  00162	41 b9 00 00 00
	50		 mov	 r9d, 1342177280		; 50000000H
  00168	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG39173
  0016f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39174
  00176	33 c9		 xor	 ecx, ecx
  00178	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  0017e	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?app@?1??WindowProc@@9@9
  00185	48 89 81 88 00
	00 00		 mov	 QWORD PTR [rcx+136], rax

; 27   :         SendMessageA(app->edit, EM_LIMITTEXT, 256, 0);

  0018c	45 33 c9	 xor	 r9d, r9d
  0018f	41 b8 00 01 00
	00		 mov	 r8d, 256		; 00000100H
  00195	ba c5 00 00 00	 mov	 edx, 197		; 000000c5H
  0019a	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  001a1	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  001a8	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SendMessageA

; 28   :         InitDraw(&app->draw, hWnd, 1, 1);

  001ae	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  001b5	48 83 c0 08	 add	 rax, 8
  001b9	41 b9 01 00 00
	00		 mov	 r9d, 1
  001bf	41 b8 01 00 00
	00		 mov	 r8d, 1
  001c5	48 8b 94 24 10
	02 00 00	 mov	 rdx, QWORD PTR hWnd$[rsp]
  001cd	48 8b c8	 mov	 rcx, rax
  001d0	e8 00 00 00 00	 call	 InitDraw

; 29   :         return 0;

  001d5	33 c0		 xor	 eax, eax
  001d7	e9 60 02 00 00	 jmp	 $LN1@WindowProc
$LN5@WindowProc:

; 30   :         
; 31   :         case WM_COMMAND:
; 32   :         if ((HWND)lParam ==app->button)

  001dc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  001e3	48 8b 80 88 00
	00 00		 mov	 rax, QWORD PTR [rax+136]
  001ea	48 39 84 24 28
	02 00 00	 cmp	 QWORD PTR lParam$[rsp], rax
  001f2	0f 85 4d 01 00
	00		 jne	 $LN6@WindowProc

; 33   :         {
; 34   :             static char buf[257];
; 35   :             int c =GetWindowTextA(app->edit, buf, 257);

  001f8	41 b8 01 01 00
	00		 mov	 r8d, 257		; 00000101H
  001fe	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?3??WindowProc@@9@9
  00205	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  0020c	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  00213	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetWindowTextA
  00219	89 44 24 60	 mov	 DWORD PTR c$1[rsp], eax

; 36   :             if (c >0)

  0021d	83 7c 24 60 00	 cmp	 DWORD PTR c$1[rsp], 0
  00222	0f 8e 1d 01 00
	00		 jle	 $LN7@WindowProc

; 37   :             {
; 38   :                 InputTerminal(&app->term, buf, c);

  00228	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  0022f	48 83 c0 20	 add	 rax, 32			; 00000020H
  00233	44 8b 44 24 60	 mov	 r8d, DWORD PTR c$1[rsp]
  00238	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?3??WindowProc@@9@9
  0023f	48 8b c8	 mov	 rcx, rax
  00242	e8 00 00 00 00	 call	 InputTerminal

; 39   :                 int success =-1;

  00247	c7 44 24 68 ff
	ff ff ff	 mov	 DWORD PTR success$2[rsp], -1

; 40   :                 Type t =InterpStatement(app->lang, buf, c, &success);

  0024f	48 8d 44 24 68	 lea	 rax, QWORD PTR success$2[rsp]
  00254	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  00259	44 8b 4c 24 60	 mov	 r9d, DWORD PTR c$1[rsp]
  0025e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:?buf@?3??WindowProc@@9@9
  00265	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  0026c	48 8b 50 68	 mov	 rdx, QWORD PTR [rax+104]
  00270	48 8d 4c 24 78	 lea	 rcx, QWORD PTR $T4[rsp]
  00275	e8 00 00 00 00	 call	 InterpStatement
  0027a	48 8d 8c 24 50
	01 00 00	 lea	 rcx, QWORD PTR t$6[rsp]
  00282	48 8b f9	 mov	 rdi, rcx
  00285	48 8b f0	 mov	 rsi, rax
  00288	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0028d	f3 a4		 rep movsb

; 41   :                 if (success!=-1)

  0028f	83 7c 24 68 ff	 cmp	 DWORD PTR success$2[rsp], -1
  00294	74 17		 je	 SHORT $LN8@WindowProc

; 42   :                 {
; 43   :                     PrintError(&app->term, success);

  00296	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  0029d	48 83 c0 20	 add	 rax, 32			; 00000020H
  002a1	8b 54 24 68	 mov	 edx, DWORD PTR success$2[rsp]
  002a5	48 8b c8	 mov	 rcx, rax
  002a8	e8 00 00 00 00	 call	 PrintError
$LN8@WindowProc:

; 44   :                 }
; 45   :                 c =TypeToString(buf, 257, &t);

  002ad	4c 8d 84 24 50
	01 00 00	 lea	 r8, QWORD PTR t$6[rsp]
  002b5	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  002ba	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?buf@?3??WindowProc@@9@9
  002c1	e8 00 00 00 00	 call	 TypeToString
  002c6	89 44 24 60	 mov	 DWORD PTR c$1[rsp], eax

; 46   :                 buf[c++] ='\n';

  002ca	48 63 44 24 60	 movsxd	 rax, DWORD PTR c$1[rsp]
  002cf	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?buf@?3??WindowProc@@9@9
  002d6	c6 04 01 0a	 mov	 BYTE PTR [rcx+rax], 10
  002da	8b 44 24 60	 mov	 eax, DWORD PTR c$1[rsp]
  002de	ff c0		 inc	 eax
  002e0	89 44 24 60	 mov	 DWORD PTR c$1[rsp], eax

; 47   :                 buf[c] ='\0';

  002e4	48 63 44 24 60	 movsxd	 rax, DWORD PTR c$1[rsp]
  002e9	48 89 44 24 70	 mov	 QWORD PTR $T3[rsp], rax
  002ee	48 81 7c 24 70
	01 01 00 00	 cmp	 QWORD PTR $T3[rsp], 257	; 00000101H
  002f7	73 02		 jae	 SHORT $LN14@WindowProc
  002f9	eb 05		 jmp	 SHORT $LN15@WindowProc
$LN14@WindowProc:
  002fb	e8 00 00 00 00	 call	 __report_rangecheckfailure
$LN15@WindowProc:
  00300	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:?buf@?3??WindowProc@@9@9
  00307	48 8b 4c 24 70	 mov	 rcx, QWORD PTR $T3[rsp]
  0030c	c6 04 08 00	 mov	 BYTE PTR [rax+rcx], 0

; 48   :                 InputTermBuffer(&app->term, buf, c);

  00310	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  00317	48 83 c0 20	 add	 rax, 32			; 00000020H
  0031b	44 8b 44 24 60	 mov	 r8d, DWORD PTR c$1[rsp]
  00320	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?buf@?3??WindowProc@@9@9
  00327	48 8b c8	 mov	 rcx, rax
  0032a	e8 00 00 00 00	 call	 InputTermBuffer

; 49   :                 InvalidateRect(hWnd, NULL, TRUE);

  0032f	41 b8 01 00 00
	00		 mov	 r8d, 1
  00335	33 d2		 xor	 edx, edx
  00337	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  0033f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_InvalidateRect
$LN7@WindowProc:
$LN6@WindowProc:

; 50   :             }
; 51   :         }
; 52   :         return 0;

  00345	33 c0		 xor	 eax, eax
  00347	e9 f0 00 00 00	 jmp	 $LN1@WindowProc
$LN9@WindowProc:

; 53   :         
; 54   :         case WM_SIZE:
; 55   :         app->w =LOWORD(lParam);

  0034c	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  00354	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  0035a	0f b7 c0	 movzx	 eax, ax
  0035d	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?app@?1??WindowProc@@9@9
  00364	89 41 78	 mov	 DWORD PTR [rcx+120], eax

; 56   :         app->h =HIWORD(lParam);

  00367	48 8b 84 24 28
	02 00 00	 mov	 rax, QWORD PTR lParam$[rsp]
  0036f	48 c1 e8 10	 shr	 rax, 16
  00373	48 25 ff ff 00
	00		 and	 rax, 65535		; 0000ffffH
  00379	0f b7 c0	 movzx	 eax, ax
  0037c	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?app@?1??WindowProc@@9@9
  00383	89 41 7c	 mov	 DWORD PTR [rcx+124], eax

; 57   :         ResizeWindows(app);

  00386	48 8b 0d 00 00
	00 00		 mov	 rcx, QWORD PTR ?app@?1??WindowProc@@9@9
  0038d	e8 00 00 00 00	 call	 ResizeWindows

; 58   :         return 0;

  00392	33 c0		 xor	 eax, eax
  00394	e9 a3 00 00 00	 jmp	 $LN1@WindowProc
$LN10@WindowProc:

; 59   :         
; 60   :         case WM_PAINT:
; 61   :         {
; 62   :             PAINTSTRUCT ps;
; 63   :             BeginPaint(hWnd, &ps);

  00399	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR ps$5[rsp]
  003a1	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  003a9	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BeginPaint

; 64   :             PaintWindow(hWnd, app, ps.hdc);

  003af	4c 8b 84 24 00
	01 00 00	 mov	 r8, QWORD PTR ps$5[rsp]
  003b7	48 8b 15 00 00
	00 00		 mov	 rdx, QWORD PTR ?app@?1??WindowProc@@9@9
  003be	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  003c6	e8 00 00 00 00	 call	 PaintWindow

; 65   :             EndPaint(hWnd, &ps);

  003cb	48 8d 94 24 00
	01 00 00	 lea	 rdx, QWORD PTR ps$5[rsp]
  003d3	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  003db	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_EndPaint

; 66   :         }
; 67   :         return 0;

  003e1	33 c0		 xor	 eax, eax
  003e3	eb 57		 jmp	 SHORT $LN1@WindowProc
$LN11@WindowProc:

; 68   :         
; 69   :         case WM_CTLCOLOREDIT:
; 70   :         SetBkColor((HDC)wParam, RGB(200, 200, 200));

  003e5	ba c8 c8 c8 00	 mov	 edx, 13158600		; 00c8c8c8H
  003ea	48 8b 8c 24 20
	02 00 00	 mov	 rcx, QWORD PTR wParam$[rsp]
  003f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetBkColor

; 71   :         return 0;

  003f8	33 c0		 xor	 eax, eax
  003fa	eb 40		 jmp	 SHORT $LN1@WindowProc
$LN12@WindowProc:

; 72   :         
; 73   :         case WM_DESTROY:
; 74   :         UnInitDraw(&app->draw);

  003fc	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR ?app@?1??WindowProc@@9@9
  00403	48 83 c0 08	 add	 rax, 8
  00407	48 8b c8	 mov	 rcx, rax
  0040a	e8 00 00 00 00	 call	 UnInitDraw

; 75   :         PostQuitMessage(0);

  0040f	33 c9		 xor	 ecx, ecx
  00411	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PostQuitMessage
$LN2@WindowProc:

; 76   :     }
; 77   :     return DefWindowProcA(hWnd, uMsg, wParam, lParam);

  00417	4c 8b 8c 24 28
	02 00 00	 mov	 r9, QWORD PTR lParam$[rsp]
  0041f	4c 8b 84 24 20
	02 00 00	 mov	 r8, QWORD PTR wParam$[rsp]
  00427	8b 94 24 18 02
	00 00		 mov	 edx, DWORD PTR uMsg$[rsp]
  0042e	48 8b 8c 24 10
	02 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00436	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DefWindowProcA
$LN1@WindowProc:
$LN13@WindowProc:

; 78   : }

  0043c	48 8b 8c 24 e0
	01 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00444	48 33 cc	 xor	 rcx, rsp
  00447	e8 00 00 00 00	 call	 __security_check_cookie
  0044c	48 81 c4 f8 01
	00 00		 add	 rsp, 504		; 000001f8H
  00453	5f		 pop	 rdi
  00454	5e		 pop	 rsi
  00455	c3		 ret	 0
WindowProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\graph.c
_TEXT	SEGMENT
app$ = 48
UnInitApp PROC

; 90   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 91   :     UnInitTerminal(&app->term);

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR app$[rsp]
  0000e	48 83 c0 20	 add	 rax, 32			; 00000020H
  00012	48 8b c8	 mov	 rcx, rax
  00015	e8 00 00 00 00	 call	 UnInitTerminal

; 92   :     UnInitLang(app->lang);

  0001a	48 8b 44 24 30	 mov	 rax, QWORD PTR app$[rsp]
  0001f	48 8b 48 68	 mov	 rcx, QWORD PTR [rax+104]
  00023	e8 00 00 00 00	 call	 UnInitLang

; 93   :     VirtualFree(app, 0, MEM_FREE);

  00028	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  0002e	33 d2		 xor	 edx, edx
  00030	48 8b 4c 24 30	 mov	 rcx, QWORD PTR app$[rsp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree

; 94   : }

  0003b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0003f	c3		 ret	 0
UnInitApp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\graph.c
_TEXT	SEGMENT
app$ = 32
InitApp	PROC

; 79   : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 80   :     App *app =VirtualAlloc(NULL, sizeof(App), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);

  00004	41 b9 04 00 00
	00		 mov	 r9d, 4
  0000a	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  00010	ba 90 00 00 00	 mov	 edx, 144		; 00000090H
  00015	33 c9		 xor	 ecx, ecx
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  0001d	48 89 44 24 20	 mov	 QWORD PTR app$[rsp], rax

; 81   :     app->center.x =0;

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR app$[rsp]
  00027	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 82   :     app->center.y =0;

  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR app$[rsp]
  00032	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [rax+4], 0

; 83   :     app->lang =InitLang();

  00039	e8 00 00 00 00	 call	 InitLang
  0003e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR app$[rsp]
  00043	48 89 41 68	 mov	 QWORD PTR [rcx+104], rax

; 84   :     app->synTree =NULL;

  00047	48 8b 44 24 20	 mov	 rax, QWORD PTR app$[rsp]
  0004c	48 c7 40 70 00
	00 00 00	 mov	 QWORD PTR [rax+112], 0

; 85   :     return app;

  00054	48 8b 44 24 20	 mov	 rax, QWORD PTR app$[rsp]

; 86   : }

  00059	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0005d	c3		 ret	 0
InitApp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\graph.c
_TEXT	SEGMENT
hWnd$ = 96
app$ = 104
hdc$ = 112
PaintWindow PROC

; 70   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 71   :     PatBlt(app->draw.hdc, 0, 0, app->w, app->h, WHITENESS);

  00013	c7 44 24 28 62
	00 ff 00	 mov	 DWORD PTR [rsp+40], 16711778 ; 00ff0062H
  0001b	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  00020	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  00023	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00027	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  0002c	44 8b 48 78	 mov	 r9d, DWORD PTR [rax+120]
  00030	45 33 c0	 xor	 r8d, r8d
  00033	33 d2		 xor	 edx, edx
  00035	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  0003a	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  0003e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_PatBlt

; 72   :     PaintTerminal(app->draw.hdc, &app->term);

  00044	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  00049	48 83 c0 20	 add	 rax, 32			; 00000020H
  0004d	48 8b d0	 mov	 rdx, rax
  00050	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  00055	48 8b 48 08	 mov	 rcx, QWORD PTR [rax+8]
  00059	e8 00 00 00 00	 call	 PaintTerminal

; 73   :     //PaintSynTree(app->draw.hdc, app->synTree, 0, app->term.y+app->term.h, app->w, app->h);
; 74   :     BitBlt(hdc, 0, 0, app->w, app->h, app->draw.hdc, 0, 0, SRCCOPY);

  0005e	c7 44 24 40 20
	00 cc 00	 mov	 DWORD PTR [rsp+64], 13369376 ; 00cc0020H
  00066	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  0006e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  00076	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  0007b	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0007f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  00084	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  00089	8b 40 7c	 mov	 eax, DWORD PTR [rax+124]
  0008c	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00090	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  00095	44 8b 48 78	 mov	 r9d, DWORD PTR [rax+120]
  00099	45 33 c0	 xor	 r8d, r8d
  0009c	33 d2		 xor	 edx, edx
  0009e	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  000a3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_BitBlt

; 75   : }

  000a9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000ad	c3		 ret	 0
PaintWindow ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\graph.c
_TEXT	SEGMENT
app$ = 64
ResizeWindows PROC

; 61   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 62   :     UpdateDraw(&app->draw, app->w, app->h);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR app$[rsp]
  0000e	48 83 c0 08	 add	 rax, 8
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR app$[rsp]
  00017	44 8b 41 7c	 mov	 r8d, DWORD PTR [rcx+124]
  0001b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR app$[rsp]
  00020	8b 51 78	 mov	 edx, DWORD PTR [rcx+120]
  00023	48 8b c8	 mov	 rcx, rax
  00026	e8 00 00 00 00	 call	 UpdateDraw

; 63   :     UpdateTerminal(&app->term, app->w, app->h);

  0002b	48 8b 44 24 40	 mov	 rax, QWORD PTR app$[rsp]
  00030	48 83 c0 20	 add	 rax, 32			; 00000020H
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR app$[rsp]
  00039	44 8b 41 7c	 mov	 r8d, DWORD PTR [rcx+124]
  0003d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR app$[rsp]
  00042	8b 51 78	 mov	 edx, DWORD PTR [rcx+120]
  00045	48 8b c8	 mov	 rcx, rax
  00048	e8 00 00 00 00	 call	 UpdateTerminal

; 64   :     MoveWindow(app->edit, 0, 0, app->w - 100, 25, TRUE);

  0004d	48 8b 44 24 40	 mov	 rax, QWORD PTR app$[rsp]
  00052	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  00055	83 e8 64	 sub	 eax, 100		; 00000064H
  00058	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  00060	c7 44 24 20 19
	00 00 00	 mov	 DWORD PTR [rsp+32], 25
  00068	44 8b c8	 mov	 r9d, eax
  0006b	45 33 c0	 xor	 r8d, r8d
  0006e	33 d2		 xor	 edx, edx
  00070	48 8b 44 24 40	 mov	 rax, QWORD PTR app$[rsp]
  00075	48 8b 88 80 00
	00 00		 mov	 rcx, QWORD PTR [rax+128]
  0007c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MoveWindow

; 65   :     MoveWindow(app->button, app->w-100, 0, 100, 25, TRUE);

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR app$[rsp]
  00087	8b 40 78	 mov	 eax, DWORD PTR [rax+120]
  0008a	83 e8 64	 sub	 eax, 100		; 00000064H
  0008d	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR [rsp+40], 1
  00095	c7 44 24 20 19
	00 00 00	 mov	 DWORD PTR [rsp+32], 25
  0009d	41 b9 64 00 00
	00		 mov	 r9d, 100		; 00000064H
  000a3	45 33 c0	 xor	 r8d, r8d
  000a6	8b d0		 mov	 edx, eax
  000a8	48 8b 44 24 40	 mov	 rax, QWORD PTR app$[rsp]
  000ad	48 8b 88 88 00
	00 00		 mov	 rcx, QWORD PTR [rax+136]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MoveWindow

; 66   : }

  000ba	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000be	c3		 ret	 0
ResizeWindows ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\graph.c
_TEXT	SEGMENT
draw$ = 48
w$ = 56
h$ = 64
UpdateDraw PROC

; 55   : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 56   :     DeleteObject(SelectObject(draw->hdc, CreateCompatibleBitmap(draw->hdc, w, h)));

  00012	44 8b 44 24 40	 mov	 r8d, DWORD PTR h$[rsp]
  00017	8b 54 24 38	 mov	 edx, DWORD PTR w$[rsp]
  0001b	48 8b 44 24 30	 mov	 rax, QWORD PTR draw$[rsp]
  00020	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateCompatibleBitmap
  00029	48 8b d0	 mov	 rdx, rax
  0002c	48 8b 44 24 30	 mov	 rax, QWORD PTR draw$[rsp]
  00031	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00034	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SelectObject
  0003a	48 8b c8	 mov	 rcx, rax
  0003d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteObject

; 57   : }

  00043	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00047	c3		 ret	 0
UpdateDraw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\graph.c
_TEXT	SEGMENT
draw$ = 48
UnInitDraw PROC

; 47   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 48   :     DeleteObject(SelectObject(draw->hdc, draw->hbitmap));

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR draw$[rsp]
  0000e	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00012	48 8b 44 24 30	 mov	 rax, QWORD PTR draw$[rsp]
  00017	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SelectObject
  00020	48 8b c8	 mov	 rcx, rax
  00023	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteObject

; 49   :     DeleteObject(SelectObject(draw->hdc, draw->hfont));

  00029	48 8b 44 24 30	 mov	 rax, QWORD PTR draw$[rsp]
  0002e	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  00032	48 8b 44 24 30	 mov	 rax, QWORD PTR draw$[rsp]
  00037	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0003a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SelectObject
  00040	48 8b c8	 mov	 rcx, rax
  00043	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteObject

; 50   :     DeleteDC(draw->hdc);

  00049	48 8b 44 24 30	 mov	 rax, QWORD PTR draw$[rsp]
  0004e	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00051	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DeleteDC

; 51   : }

  00057	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005b	c3		 ret	 0
UnInitDraw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\graph.c
_TEXT	SEGMENT
hdc$ = 112
rc$ = 120
__$ArrayPad$ = 136
draw$ = 160
hWnd$ = 168
w$ = 176
h$ = 184
InitDraw PROC

; 33   : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H
  0001b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00022	48 33 c4	 xor	 rax, rsp
  00025	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 34   :     RECT rc;
; 35   :     HDC hdc =GetDC(hWnd);

  0002d	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  00035	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  0003b	48 89 44 24 70	 mov	 QWORD PTR hdc$[rsp], rax

; 36   :     GetClientRect(hWnd, &rc);

  00040	48 8d 54 24 78	 lea	 rdx, QWORD PTR rc$[rsp]
  00045	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  0004d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetClientRect

; 37   :     
; 38   :     assert(hdc);

  00053	48 83 7c 24 70
	00		 cmp	 QWORD PTR hdc$[rsp], 0
  00059	75 1b		 jne	 SHORT $LN3@InitDraw
  0005b	41 b8 26 00 00
	00		 mov	 r8d, 38			; 00000026H
  00061	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39101
  00068	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG39102
  0006f	e8 00 00 00 00	 call	 _wassert
  00074	33 c0		 xor	 eax, eax
$LN3@InitDraw:

; 39   :     draw->hdc =CreateCompatibleDC(hdc);

  00076	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  0007b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateCompatibleDC
  00081	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR draw$[rsp]
  00089	48 89 01	 mov	 QWORD PTR [rcx], rax

; 40   :     draw->hbitmap =(HBITMAP)SelectObject(draw->hdc, CreateCompatibleBitmap(hdc, rc.right, rc.bottom));

  0008c	44 8b 84 24 84
	00 00 00	 mov	 r8d, DWORD PTR rc$[rsp+12]
  00094	8b 94 24 80 00
	00 00		 mov	 edx, DWORD PTR rc$[rsp+8]
  0009b	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  000a0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateCompatibleBitmap
  000a6	48 8b d0	 mov	 rdx, rax
  000a9	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR draw$[rsp]
  000b1	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000b4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SelectObject
  000ba	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR draw$[rsp]
  000c2	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 41   :     draw->hfont =(HFONT)SelectObject(draw->hdc, CreateFontA(-MulDiv(11, GetDeviceCaps(hdc, LOGPIXELSY), 72), 0 , 0, 0, FW_REGULAR, 0, 0, 0, ANSI_CHARSET, OUT_DEFAULT_PRECIS, CLIP_DEFAULT_PRECIS, CLEARTYPE_QUALITY, FF_MODERN, "Courier New"));

  000c6	ba 5a 00 00 00	 mov	 edx, 90			; 0000005aH
  000cb	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  000d0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDeviceCaps
  000d6	41 b8 48 00 00
	00		 mov	 r8d, 72			; 00000048H
  000dc	8b d0		 mov	 edx, eax
  000de	b9 0b 00 00 00	 mov	 ecx, 11
  000e3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MulDiv
  000e9	f7 d8		 neg	 eax
  000eb	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG39103
  000f2	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  000f7	c7 44 24 60 30
	00 00 00	 mov	 DWORD PTR [rsp+96], 48	; 00000030H
  000ff	c7 44 24 58 05
	00 00 00	 mov	 DWORD PTR [rsp+88], 5
  00107	c7 44 24 50 00
	00 00 00	 mov	 DWORD PTR [rsp+80], 0
  0010f	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR [rsp+72], 0
  00117	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR [rsp+64], 0
  0011f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR [rsp+56], 0
  00127	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR [rsp+48], 0
  0012f	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR [rsp+40], 0
  00137	c7 44 24 20 90
	01 00 00	 mov	 DWORD PTR [rsp+32], 400	; 00000190H
  0013f	45 33 c9	 xor	 r9d, r9d
  00142	45 33 c0	 xor	 r8d, r8d
  00145	33 d2		 xor	 edx, edx
  00147	8b c8		 mov	 ecx, eax
  00149	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateFontA
  0014f	48 8b d0	 mov	 rdx, rax
  00152	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR draw$[rsp]
  0015a	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0015d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SelectObject
  00163	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR draw$[rsp]
  0016b	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 42   :     ReleaseDC(hWnd, hdc);

  0016f	48 8b 54 24 70	 mov	 rdx, QWORD PTR hdc$[rsp]
  00174	48 8b 8c 24 a8
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  0017c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 43   : }

  00182	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  0018a	48 33 cc	 xor	 rcx, rsp
  0018d	e8 00 00 00 00	 call	 __security_check_cookie
  00192	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00199	c3		 ret	 0
InitDraw ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
synResult$ = 32
$T1 = 56
logicResult$2 = 80
$T3 = 224
result$ = 368
__$ArrayPad$ = 512
__$ReturnAddress$ = 560
lang$ = 568
statement$ = 576
c$ = 584
success$ = 592
InterpStatement PROC

; 939  : {

$LN5:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 18 02
	00 00		 sub	 rsp, 536		; 00000218H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 00
	02 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 940  :     Type result ={.type=TNONE};

  0002f	c7 84 24 70 01
	00 00 00 00 00
	00		 mov	 DWORD PTR result$[rsp], 0
  0003a	c6 84 24 78 01
	00 00 00	 mov	 BYTE PTR result$[rsp+8], 0
  00042	48 8d 84 24 79
	01 00 00	 lea	 rax, QWORD PTR result$[rsp+9]
  0004a	48 8b f8	 mov	 rdi, rax
  0004d	33 c0		 xor	 eax, eax
  0004f	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00054	f3 aa		 rep stosb

; 941  :     SyntaxResult synResult =BuildSyntaxTree(lang, statement, c);

  00056	44 8b 8c 24 48
	02 00 00	 mov	 r9d, DWORD PTR c$[rsp]
  0005e	4c 8b 84 24 40
	02 00 00	 mov	 r8, QWORD PTR statement$[rsp]
  00066	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR lang$[rsp]
  0006e	48 8d 4c 24 38	 lea	 rcx, QWORD PTR $T1[rsp]
  00073	e8 00 00 00 00	 call	 BuildSyntaxTree
  00078	48 8d 4c 24 20	 lea	 rcx, QWORD PTR synResult$[rsp]
  0007d	48 8b f9	 mov	 rdi, rcx
  00080	48 8b f0	 mov	 rsi, rax
  00083	b9 18 00 00 00	 mov	 ecx, 24
  00088	f3 a4		 rep movsb

; 942  :     
; 943  :     if (synResult.success)

  0008a	83 7c 24 20 00	 cmp	 DWORD PTR synResult$[rsp], 0
  0008f	74 6a		 je	 SHORT $LN2@InterpStat

; 944  :     {
; 945  :         LogicResult logicResult={.success=1};

  00091	c7 44 24 50 01
	00 00 00	 mov	 DWORD PTR logicResult$2[rsp], 1
  00099	c7 44 24 58 00
	00 00 00	 mov	 DWORD PTR logicResult$2[rsp+8], 0
  000a1	48 8d 44 24 5c	 lea	 rax, QWORD PTR logicResult$2[rsp+12]
  000a6	48 8b f8	 mov	 rdi, rax
  000a9	33 c0		 xor	 eax, eax
  000ab	b9 84 00 00 00	 mov	 ecx, 132		; 00000084H
  000b0	f3 aa		 rep stosb

; 946  :         result =EvalSyntaxTree(lang, synResult.tree, &logicResult);

  000b2	4c 8d 4c 24 50	 lea	 r9, QWORD PTR logicResult$2[rsp]
  000b7	4c 8b 44 24 28	 mov	 r8, QWORD PTR synResult$[rsp+8]
  000bc	48 8b 94 24 38
	02 00 00	 mov	 rdx, QWORD PTR lang$[rsp]
  000c4	48 8d 8c 24 e0
	00 00 00	 lea	 rcx, QWORD PTR $T3[rsp]
  000cc	e8 00 00 00 00	 call	 EvalSyntaxTree
  000d1	48 8d 8c 24 70
	01 00 00	 lea	 rcx, QWORD PTR result$[rsp]
  000d9	48 8b f9	 mov	 rdi, rcx
  000dc	48 8b f0	 mov	 rsi, rax
  000df	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  000e4	f3 a4		 rep movsb

; 947  :         
; 948  :         if (!logicResult.success)

  000e6	83 7c 24 50 00	 cmp	 DWORD PTR logicResult$2[rsp], 0
  000eb	75 0e		 jne	 SHORT $LN3@InterpStat

; 949  :         {
; 950  :             *success =logicResult.err;

  000ed	48 8b 84 24 50
	02 00 00	 mov	 rax, QWORD PTR success$[rsp]
  000f5	8b 4c 24 58	 mov	 ecx, DWORD PTR logicResult$2[rsp+8]
  000f9	89 08		 mov	 DWORD PTR [rax], ecx
$LN3@InterpStat:
$LN2@InterpStat:

; 951  : #if defined (DO_TC)
; 952  :             printf(_err_strings[logicResult.err]);
; 953  : #endif
; 954  :         }
; 955  :     }
; 956  : #if defined (DO_TC)
; 957  :     else
; 958  :     {
; 959  :         printf("Syntax Error: unexpected or expected \'%c\' found.\r\n", *synResult.err.loc);
; 960  :     }
; 961  : #endif
; 962  :     return result;

  000fb	48 8d 84 24 70
	01 00 00	 lea	 rax, QWORD PTR result$[rsp]
  00103	48 8b bc 24 30
	02 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0010b	48 8b f0	 mov	 rsi, rax
  0010e	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00113	f3 a4		 rep movsb
  00115	48 8b 84 24 30
	02 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 963  : }

  0011d	48 8b 8c 24 00
	02 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00125	48 33 cc	 xor	 rcx, rsp
  00128	e8 00 00 00 00	 call	 __security_check_cookie
  0012d	48 81 c4 18 02
	00 00		 add	 rsp, 536		; 00000218H
  00134	5f		 pop	 rdi
  00135	5e		 pop	 rsi
  00136	c3		 ret	 0
InterpStatement ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
term$ = 48
lr$ = 56
PrintError PROC

; 933  : {

$LN3:
  00000	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 934  :     InputTermBuffer(term, _err_strings[lr], -1);

  0000d	48 63 44 24 38	 movsxd	 rax, DWORD PTR lr$[rsp]
  00012	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_err_strings
  00019	41 b8 ff ff ff
	ff		 mov	 r8d, -1
  0001f	48 8b 14 c1	 mov	 rdx, QWORD PTR [rcx+rax*8]
  00023	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  00028	e8 00 00 00 00	 call	 InputTermBuffer

; 935  : }

  0002d	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00031	c3		 ret	 0
PrintError ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
iter$ = 144
tCount$ = 152
reqsLValue$ = 156
func$1 = 160
calcFunc$2 = 168
variable$3 = 176
tv194 = 184
calcResult$4 = 192
$T5 = 336
$T6 = 480
$T7 = 624
$T8 = 760
$T9 = 912
result$ = 1312
variable$10 = 1456
ts$ = 1856
__$ArrayPad$ = 4176
__$ReturnAddress$ = 4256
lang$ = 4264
synTree$ = 4272
lr$ = 4280
EvalSyntaxTree PROC

; 788  : {

$LN37:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	53		 push	 rbx
  00015	55		 push	 rbp
  00016	56		 push	 rsi
  00017	57		 push	 rdi
  00018	41 54		 push	 r12
  0001a	41 56		 push	 r14
  0001c	41 57		 push	 r15
  0001e	b8 60 10 00 00	 mov	 eax, 4192		; 00001060H
  00023	e8 00 00 00 00	 call	 __chkstk
  00028	48 2b e0	 sub	 rsp, rax
  0002b	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00032	48 33 c4	 xor	 rax, rsp
  00035	48 89 84 24 50
	10 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 789  :     Type ts[17];
; 790  :     int tCount=-1;

  0003d	c7 84 24 98 00
	00 00 ff ff ff
	ff		 mov	 DWORD PTR tCount$[rsp], -1

; 791  :     Type result={.type=TNONE};

  00048	c7 84 24 20 05
	00 00 00 00 00
	00		 mov	 DWORD PTR result$[rsp], 0
  00053	c6 84 24 28 05
	00 00 00	 mov	 BYTE PTR result$[rsp+8], 0
  0005b	48 8d 84 24 29
	05 00 00	 lea	 rax, QWORD PTR result$[rsp+9]
  00063	48 8b f8	 mov	 rdi, rax
  00066	33 c0		 xor	 eax, eax
  00068	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0006d	f3 aa		 rep stosb

; 792  :     _bool reqsLValue =0;

  0006f	c7 84 24 9c 00
	00 00 00 00 00
	00		 mov	 DWORD PTR reqsLValue$[rsp], 0

; 793  :     SynTree *iter;
; 794  :     
; 795  :     if (lr->success
; 796  :         && synTree!=NULL)

  0007a	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  00082	83 38 00	 cmp	 DWORD PTR [rax], 0
  00085	0f 84 9e 06 00
	00		 je	 $LN4@EvalSyntax
  0008b	48 83 bc 24 b0
	10 00 00 00	 cmp	 QWORD PTR synTree$[rsp], 0
  00094	0f 84 8f 06 00
	00		 je	 $LN4@EvalSyntax

; 797  :     {
; 798  :         if (synTree->stype ==ST_OP)

  0009a	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  000a2	83 38 00	 cmp	 DWORD PTR [rax], 0
  000a5	0f 85 97 05 00
	00		 jne	 $LN5@EvalSyntax

; 799  :         {
; 800  :             if (synTree->op ==OP_NONE)

  000ab	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  000b3	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  000b7	75 1f		 jne	 SHORT $LN7@EvalSyntax

; 801  :             {
; 802  :                 lr->success=0;

  000b9	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  000c1	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 803  :                 lr->err =LR_OP;

  000c7	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  000cf	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0

; 804  :             }

  000d6	eb 19		 jmp	 SHORT $LN8@EvalSyntax
$LN7@EvalSyntax:

; 805  :             else if (synTree->op ==OP_ASG)

  000d8	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  000e0	83 78 18 13	 cmp	 DWORD PTR [rax+24], 19
  000e4	75 0b		 jne	 SHORT $LN9@EvalSyntax

; 806  :             {
; 807  :                 reqsLValue =1;

  000e6	c7 84 24 9c 00
	00 00 01 00 00
	00		 mov	 DWORD PTR reqsLValue$[rsp], 1
$LN9@EvalSyntax:
$LN8@EvalSyntax:

; 808  :             }
; 809  :             iter =synTree->children;

  000f1	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  000f9	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  000fd	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR iter$[rsp], rax

; 810  :             if ((iter->stype ==ST_OP
; 811  :                  && reqsLValue)
; 812  :                 &&

  00105	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR iter$[rsp]
  0010d	83 38 00	 cmp	 DWORD PTR [rax], 0
  00110	75 47		 jne	 SHORT $LN10@EvalSyntax
  00112	83 bc 24 9c 00
	00 00 00	 cmp	 DWORD PTR reqsLValue$[rsp], 0
  0011a	74 3d		 je	 SHORT $LN10@EvalSyntax
  0011c	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR iter$[rsp]
  00124	83 38 01	 cmp	 DWORD PTR [rax], 1
  00127	75 30		 jne	 SHORT $LN10@EvalSyntax
  00129	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR iter$[rsp]
  00131	83 78 18 01	 cmp	 DWORD PTR [rax+24], 1
  00135	75 22		 jne	 SHORT $LN10@EvalSyntax

; 813  :                 (iter->stype ==ST_VAR
; 814  :                  && iter->var.vtype ==VT_CONST))
; 815  :             {
; 816  :                 lr->success=0;

  00137	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  0013f	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 817  :                 lr->err=LR_VAR;

  00145	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  0014d	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [rax+8], 2

; 818  :             }

  00154	e9 e4 04 00 00	 jmp	 $LN11@EvalSyntax
$LN10@EvalSyntax:

; 819  :             else
; 820  :             {
; 821  :                 Function *func;
; 822  :                 CalcFunction calcFunc =NULL;

  00159	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR calcFunc$2[rsp], 0

; 823  :                 if (synTree->op ==OP_FUNC)

  00165	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  0016d	83 78 18 14	 cmp	 DWORD PTR [rax+24], 20
  00171	75 5a		 jne	 SHORT $LN12@EvalSyntax

; 824  :                 {
; 825  :                     func =LookupFunction(iter->var.varName);

  00173	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR iter$[rsp]
  0017b	48 83 c0 20	 add	 rax, 32			; 00000020H
  0017f	48 8b c8	 mov	 rcx, rax
  00182	e8 00 00 00 00	 call	 LookupFunction
  00187	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR func$1[rsp], rax

; 826  :                     if (!func)

  0018f	48 83 bc 24 a0
	00 00 00 00	 cmp	 QWORD PTR func$1[rsp], 0
  00198	75 1d		 jne	 SHORT $LN14@EvalSyntax

; 827  :                     {
; 828  :                         lr->success=0;

  0019a	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  001a2	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 829  :                         lr->err=LR_FUNC;

  001a8	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  001b0	c7 40 08 03 00
	00 00		 mov	 DWORD PTR [rax+8], 3
$LN14@EvalSyntax:

; 830  :                     }
; 831  :                     iter =iter->next;

  001b7	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR iter$[rsp]
  001bf	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001c3	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR iter$[rsp], rax

; 832  :                 }

  001cb	eb 22		 jmp	 SHORT $LN13@EvalSyntax
$LN12@EvalSyntax:

; 833  :                 else if (synTree->op ==OP_ASG)

  001cd	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  001d5	83 78 18 13	 cmp	 DWORD PTR [rax+24], 19
  001d9	75 14		 jne	 SHORT $LN15@EvalSyntax

; 834  :                 {
; 835  :                     iter =iter->next;

  001db	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR iter$[rsp]
  001e3	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  001e7	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR iter$[rsp], rax
$LN15@EvalSyntax:
$LN13@EvalSyntax:
$LN2@EvalSyntax:

; 836  :                 }
; 837  :                 while (iter)

  001ef	48 83 bc 24 90
	00 00 00 00	 cmp	 QWORD PTR iter$[rsp], 0
  001f8	74 7e		 je	 SHORT $LN3@EvalSyntax

; 838  :                 {
; 839  :                     ts[++tCount] =EvalSyntaxTree(lang, iter, lr);

  001fa	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tCount$[rsp]
  00201	ff c0		 inc	 eax
  00203	89 84 24 98 00
	00 00		 mov	 DWORD PTR tCount$[rsp], eax
  0020a	4c 8b 8c 24 b8
	10 00 00	 mov	 r9, QWORD PTR lr$[rsp]
  00212	4c 8b 84 24 90
	00 00 00	 mov	 r8, QWORD PTR iter$[rsp]
  0021a	48 8b 94 24 a8
	10 00 00	 mov	 rdx, QWORD PTR lang$[rsp]
  00222	48 8d 8c 24 70
	02 00 00	 lea	 rcx, QWORD PTR $T7[rsp]
  0022a	e8 00 00 00 00	 call	 EvalSyntaxTree
  0022f	48 63 8c 24 98
	00 00 00	 movsxd	 rcx, DWORD PTR tCount$[rsp]
  00237	48 69 c9 88 00
	00 00		 imul	 rcx, rcx, 136		; 00000088H
  0023e	48 8d bc 0c 40
	07 00 00	 lea	 rdi, QWORD PTR ts$[rsp+rcx]
  00246	48 8b f0	 mov	 rsi, rax
  00249	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0024e	f3 a4		 rep movsb

; 840  :                     if (!lr->success)

  00250	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  00258	83 38 00	 cmp	 DWORD PTR [rax], 0
  0025b	75 02		 jne	 SHORT $LN16@EvalSyntax

; 841  :                     {
; 842  :                         break;

  0025d	eb 19		 jmp	 SHORT $LN3@EvalSyntax
$LN16@EvalSyntax:

; 843  :                     }
; 844  :                     iter =iter->next;

  0025f	48 8b 84 24 90
	00 00 00	 mov	 rax, QWORD PTR iter$[rsp]
  00267	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0026b	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR iter$[rsp], rax

; 845  :                 }

  00273	e9 77 ff ff ff	 jmp	 $LN2@EvalSyntax
$LN3@EvalSyntax:

; 846  :                 if (lr->success)

  00278	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  00280	83 38 00	 cmp	 DWORD PTR [rax], 0
  00283	0f 84 b4 03 00
	00		 je	 $LN17@EvalSyntax

; 847  :                 {
; 848  :                     if (synTree->op ==OP_FUNC)

  00289	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  00291	83 78 18 14	 cmp	 DWORD PTR [rax+24], 20
  00295	75 4e		 jne	 SHORT $LN18@EvalSyntax

; 849  :                     {
; 850  :                         if (func->numArgs !=(tCount+1))

  00297	8b 84 24 98 00
	00 00		 mov	 eax, DWORD PTR tCount$[rsp]
  0029e	ff c0		 inc	 eax
  002a0	48 8b 8c 24 a0
	00 00 00	 mov	 rcx, QWORD PTR func$1[rsp]
  002a8	39 41 10	 cmp	 DWORD PTR [rcx+16], eax
  002ab	74 1f		 je	 SHORT $LN20@EvalSyntax

; 851  :                         {
; 852  :                             lr->success=0;

  002ad	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  002b5	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 853  :                             lr->err =LR_VAR;

  002bb	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  002c3	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [rax+8], 2

; 854  :                         }

  002ca	eb 14		 jmp	 SHORT $LN21@EvalSyntax
$LN20@EvalSyntax:

; 855  :                         else
; 856  :                         {
; 857  :                             calcFunc =func->function;

  002cc	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR func$1[rsp]
  002d4	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  002d8	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR calcFunc$2[rsp], rax
$LN21@EvalSyntax:

; 858  :                         }
; 859  :                     }

  002e0	e9 0d 01 00 00	 jmp	 $LN19@EvalSyntax
$LN18@EvalSyntax:

; 860  :                     else if (synTree->op !=OP_ASG)

  002e5	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  002ed	83 78 18 13	 cmp	 DWORD PTR [rax+24], 19
  002f1	74 67		 je	 SHORT $LN22@EvalSyntax

; 861  :                     {
; 862  :                         if (tCount ==1)

  002f3	83 bc 24 98 00
	00 00 01	 cmp	 DWORD PTR tCount$[rsp], 1
  002fb	75 3b		 jne	 SHORT $LN24@EvalSyntax

; 863  :                         {
; 864  :                             calcFunc =LookupOp(synTree->op, ts[0].type, ts[1].type);

  002fd	b8 88 00 00 00	 mov	 eax, 136		; 00000088H
  00302	48 6b c0 01	 imul	 rax, rax, 1
  00306	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0030b	48 6b c9 00	 imul	 rcx, rcx, 0
  0030f	44 8b 84 04 40
	07 00 00	 mov	 r8d, DWORD PTR ts$[rsp+rax]
  00317	8b 94 0c 40 07
	00 00		 mov	 edx, DWORD PTR ts$[rsp+rcx]
  0031e	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  00326	8b 48 18	 mov	 ecx, DWORD PTR [rax+24]
  00329	e8 00 00 00 00	 call	 LookupOp
  0032e	48 89 84 24 a8
	00 00 00	 mov	 QWORD PTR calcFunc$2[rsp], rax

; 865  :                         }

  00336	eb 1d		 jmp	 SHORT $LN25@EvalSyntax
$LN24@EvalSyntax:

; 866  :                         
; 867  :                         else
; 868  :                         {
; 869  :                             lr->success=0;

  00338	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  00340	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 870  :                             lr->err= LR_OP;

  00346	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  0034e	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [rax+8], 0
$LN25@EvalSyntax:

; 871  :                         }
; 872  :                     }

  00355	e9 98 00 00 00	 jmp	 $LN23@EvalSyntax
$LN22@EvalSyntax:

; 873  :                     else
; 874  :                     {
; 875  :                         _Variable variable;
; 876  :                         CopyVString(variable.name, synTree->children->var.varName);

  0035a	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  00362	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00366	48 83 c0 20	 add	 rax, 32			; 00000020H
  0036a	48 8b d0	 mov	 rdx, rax
  0036d	48 8d 8c 24 b0
	05 00 00	 lea	 rcx, QWORD PTR variable$10[rsp]
  00375	e8 00 00 00 00	 call	 CopyVString

; 877  :                         variable.data =ts[0];

  0037a	b8 88 00 00 00	 mov	 eax, 136		; 00000088H
  0037f	48 6b c0 00	 imul	 rax, rax, 0
  00383	48 8d 8c 24 b8
	06 00 00	 lea	 rcx, QWORD PTR variable$10[rsp+264]
  0038b	48 8b f9	 mov	 rdi, rcx
  0038e	48 8d b4 04 40
	07 00 00	 lea	 rsi, QWORD PTR ts$[rsp+rax]
  00396	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0039b	f3 a4		 rep movsb

; 878  :                         StoreVariable(lang, variable);

  0039d	48 8d 84 24 90
	03 00 00	 lea	 rax, QWORD PTR $T9[rsp]
  003a5	48 8d 8c 24 b0
	05 00 00	 lea	 rcx, QWORD PTR variable$10[rsp]
  003ad	48 8b f8	 mov	 rdi, rax
  003b0	48 8b f1	 mov	 rsi, rcx
  003b3	b9 90 01 00 00	 mov	 ecx, 400		; 00000190H
  003b8	f3 a4		 rep movsb
  003ba	48 8d 94 24 90
	03 00 00	 lea	 rdx, QWORD PTR $T9[rsp]
  003c2	48 8b 8c 24 a8
	10 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  003ca	e8 00 00 00 00	 call	 StoreVariable

; 879  :                         
; 880  :                         result =ts[0];

  003cf	b8 88 00 00 00	 mov	 eax, 136		; 00000088H
  003d4	48 6b c0 00	 imul	 rax, rax, 0
  003d8	48 8d 8c 24 20
	05 00 00	 lea	 rcx, QWORD PTR result$[rsp]
  003e0	48 8b f9	 mov	 rdi, rcx
  003e3	48 8d b4 04 40
	07 00 00	 lea	 rsi, QWORD PTR ts$[rsp+rax]
  003eb	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  003f0	f3 a4		 rep movsb
$LN23@EvalSyntax:
$LN19@EvalSyntax:

; 881  :                     }
; 882  :                     if (lr->success
; 883  :                         && synTree->op !=OP_ASG)

  003f2	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  003fa	83 38 00	 cmp	 DWORD PTR [rax], 0
  003fd	0f 84 3a 02 00
	00		 je	 $LN26@EvalSyntax
  00403	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  0040b	83 78 18 13	 cmp	 DWORD PTR [rax+24], 19
  0040f	0f 84 28 02 00
	00		 je	 $LN26@EvalSyntax

; 884  :                     {
; 885  :                         CalcResult calcResult=calcFunc(&ts[0],&ts[1],&ts[2],&ts[3],&ts[4],&ts[5],&ts[6],&ts[7],&ts[8]

  00415	b8 88 00 00 00	 mov	 eax, 136		; 00000088H
  0041a	48 6b c0 10	 imul	 rax, rax, 16
  0041e	48 8d 84 04 40
	07 00 00	 lea	 rax, QWORD PTR ts$[rsp+rax]
  00426	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0042b	48 6b c9 0f	 imul	 rcx, rcx, 15
  0042f	48 8d 8c 0c 40
	07 00 00	 lea	 rcx, QWORD PTR ts$[rsp+rcx]
  00437	48 89 8c 24 b8
	00 00 00	 mov	 QWORD PTR tv194[rsp], rcx
  0043f	ba 88 00 00 00	 mov	 edx, 136		; 00000088H
  00444	48 6b d2 0e	 imul	 rdx, rdx, 14
  00448	48 8d bc 24 50
	01 00 00	 lea	 rdi, QWORD PTR $T5[rsp]
  00450	48 8d b4 14 40
	07 00 00	 lea	 rsi, QWORD PTR ts$[rsp+rdx]
  00458	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0045d	f3 a4		 rep movsb
  0045f	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00464	48 6b c9 0d	 imul	 rcx, rcx, 13
  00468	48 8d 94 24 e0
	01 00 00	 lea	 rdx, QWORD PTR $T6[rsp]
  00470	48 8b fa	 mov	 rdi, rdx
  00473	48 8d b4 0c 40
	07 00 00	 lea	 rsi, QWORD PTR ts$[rsp+rcx]
  0047b	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00480	f3 a4		 rep movsb
  00482	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00487	48 6b c9 0c	 imul	 rcx, rcx, 12
  0048b	48 8d 8c 0c 40
	07 00 00	 lea	 rcx, QWORD PTR ts$[rsp+rcx]
  00493	ba 88 00 00 00	 mov	 edx, 136		; 00000088H
  00498	48 6b d2 0b	 imul	 rdx, rdx, 11
  0049c	48 8d 94 14 40
	07 00 00	 lea	 rdx, QWORD PTR ts$[rsp+rdx]
  004a4	bf 88 00 00 00	 mov	 edi, 136		; 00000088H
  004a9	48 6b ff 0a	 imul	 rdi, rdi, 10
  004ad	48 8d bc 3c 40
	07 00 00	 lea	 rdi, QWORD PTR ts$[rsp+rdi]
  004b5	be 88 00 00 00	 mov	 esi, 136		; 00000088H
  004ba	48 6b f6 09	 imul	 rsi, rsi, 9
  004be	48 8d b4 34 40
	07 00 00	 lea	 rsi, QWORD PTR ts$[rsp+rsi]
  004c6	41 b8 88 00 00
	00		 mov	 r8d, 136		; 00000088H
  004cc	4d 6b c0 08	 imul	 r8, r8, 8
  004d0	4e 8d 84 04 40
	07 00 00	 lea	 r8, QWORD PTR ts$[rsp+r8]
  004d8	41 b9 88 00 00
	00		 mov	 r9d, 136		; 00000088H
  004de	4d 6b c9 07	 imul	 r9, r9, 7
  004e2	4e 8d 8c 0c 40
	07 00 00	 lea	 r9, QWORD PTR ts$[rsp+r9]
  004ea	41 ba 88 00 00
	00		 mov	 r10d, 136		; 00000088H
  004f0	4d 6b d2 06	 imul	 r10, r10, 6
  004f4	4e 8d 94 14 40
	07 00 00	 lea	 r10, QWORD PTR ts$[rsp+r10]
  004fc	41 bb 88 00 00
	00		 mov	 r11d, 136		; 00000088H
  00502	4d 6b db 05	 imul	 r11, r11, 5
  00506	4e 8d 9c 1c 40
	07 00 00	 lea	 r11, QWORD PTR ts$[rsp+r11]
  0050e	bb 88 00 00 00	 mov	 ebx, 136		; 00000088H
  00513	48 6b db 04	 imul	 rbx, rbx, 4
  00517	48 8d 9c 1c 40
	07 00 00	 lea	 rbx, QWORD PTR ts$[rsp+rbx]
  0051f	bd 88 00 00 00	 mov	 ebp, 136		; 00000088H
  00524	48 6b ed 03	 imul	 rbp, rbp, 3
  00528	48 8d ac 2c 40
	07 00 00	 lea	 rbp, QWORD PTR ts$[rsp+rbp]
  00530	41 be 88 00 00
	00		 mov	 r14d, 136		; 00000088H
  00536	4d 6b f6 02	 imul	 r14, r14, 2
  0053a	4e 8d b4 34 40
	07 00 00	 lea	 r14, QWORD PTR ts$[rsp+r14]
  00542	41 bf 88 00 00
	00		 mov	 r15d, 136		; 00000088H
  00548	4d 6b ff 01	 imul	 r15, r15, 1
  0054c	4e 8d bc 3c 40
	07 00 00	 lea	 r15, QWORD PTR ts$[rsp+r15]
  00554	41 bc 88 00 00
	00		 mov	 r12d, 136		; 00000088H
  0055a	4d 6b e4 00	 imul	 r12, r12, 0
  0055e	4e 8d a4 24 40
	07 00 00	 lea	 r12, QWORD PTR ts$[rsp+r12]
  00566	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR [rsp+136], rax
  0056e	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR tv194[rsp]
  00576	48 89 84 24 80
	00 00 00	 mov	 QWORD PTR [rsp+128], rax
  0057e	48 8d 84 24 50
	01 00 00	 lea	 rax, QWORD PTR $T5[rsp]
  00586	48 89 44 24 78	 mov	 QWORD PTR [rsp+120], rax
  0058b	48 8d 84 24 e0
	01 00 00	 lea	 rax, QWORD PTR $T6[rsp]
  00593	48 89 44 24 70	 mov	 QWORD PTR [rsp+112], rax
  00598	48 89 4c 24 68	 mov	 QWORD PTR [rsp+104], rcx
  0059d	48 89 54 24 60	 mov	 QWORD PTR [rsp+96], rdx
  005a2	48 89 7c 24 58	 mov	 QWORD PTR [rsp+88], rdi
  005a7	48 89 74 24 50	 mov	 QWORD PTR [rsp+80], rsi
  005ac	4c 89 44 24 48	 mov	 QWORD PTR [rsp+72], r8
  005b1	4c 89 4c 24 40	 mov	 QWORD PTR [rsp+64], r9
  005b6	4c 89 54 24 38	 mov	 QWORD PTR [rsp+56], r10
  005bb	4c 89 5c 24 30	 mov	 QWORD PTR [rsp+48], r11
  005c0	48 89 5c 24 28	 mov	 QWORD PTR [rsp+40], rbx
  005c5	48 89 6c 24 20	 mov	 QWORD PTR [rsp+32], rbp
  005ca	4d 8b ce	 mov	 r9, r14
  005cd	4d 8b c7	 mov	 r8, r15
  005d0	49 8b d4	 mov	 rdx, r12
  005d3	48 8d 8c 24 f8
	02 00 00	 lea	 rcx, QWORD PTR $T8[rsp]
  005db	ff 94 24 a8 00
	00 00		 call	 QWORD PTR calcFunc$2[rsp]
  005e2	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR calcResult$4[rsp]
  005ea	48 8b f9	 mov	 rdi, rcx
  005ed	48 8b f0	 mov	 rsi, rax
  005f0	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  005f5	f3 a4		 rep movsb

; 886  :                                                        ,&ts[9],&ts[10],&ts[11],&ts[12],ts[13],ts[14],&ts[15], &ts[16]);
; 887  :                         if (calcResult.success)

  005f7	83 bc 24 c0 00
	00 00 00	 cmp	 DWORD PTR calcResult$4[rsp], 0
  005ff	74 1f		 je	 SHORT $LN27@EvalSyntax

; 888  :                         {
; 889  :                             result =calcResult._const;

  00601	48 8d 84 24 20
	05 00 00	 lea	 rax, QWORD PTR result$[rsp]
  00609	48 8d 8c 24 c8
	00 00 00	 lea	 rcx, QWORD PTR calcResult$4[rsp+8]
  00611	48 8b f8	 mov	 rdi, rax
  00614	48 8b f1	 mov	 rsi, rcx
  00617	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0061c	f3 a4		 rep movsb

; 890  :                         }

  0061e	eb 1d		 jmp	 SHORT $LN28@EvalSyntax
$LN27@EvalSyntax:

; 891  :                         else
; 892  :                         {
; 893  :                             lr->success =0;

  00620	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  00628	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 894  :                             lr->err =LR_CALC;

  0062e	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  00636	c7 40 08 04 00
	00 00		 mov	 DWORD PTR [rax+8], 4
$LN28@EvalSyntax:
$LN26@EvalSyntax:
$LN17@EvalSyntax:
$LN11@EvalSyntax:

; 895  :                         }
; 896  :                     }
; 897  :                 }
; 898  :             }
; 899  :         }

  0063d	e9 e7 00 00 00	 jmp	 $LN6@EvalSyntax
$LN5@EvalSyntax:

; 900  :         else if (synTree->stype ==ST_VAR)

  00642	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  0064a	83 38 01	 cmp	 DWORD PTR [rax], 1
  0064d	0f 85 d6 00 00
	00		 jne	 $LN29@EvalSyntax

; 901  :         {
; 902  :             if (synTree->var.vtype ==VT_VAR)

  00653	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  0065b	83 78 18 00	 cmp	 DWORD PTR [rax+24], 0
  0065f	0f 85 98 00 00
	00		 jne	 $LN30@EvalSyntax

; 903  :             {
; 904  :                 _Variable *variable =GetVariable(lang, synTree->var.varName);

  00665	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  0066d	48 83 c0 20	 add	 rax, 32			; 00000020H
  00671	48 8b d0	 mov	 rdx, rax
  00674	48 8b 8c 24 a8
	10 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  0067c	e8 00 00 00 00	 call	 GetVariable
  00681	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR variable$3[rsp], rax

; 905  :                 if (variable)

  00689	48 83 bc 24 b0
	00 00 00 00	 cmp	 QWORD PTR variable$3[rsp], 0
  00692	74 4a		 je	 SHORT $LN32@EvalSyntax

; 906  :                 {
; 907  :                     result =variable->data;

  00694	48 8d 84 24 20
	05 00 00	 lea	 rax, QWORD PTR result$[rsp]
  0069c	48 8b 8c 24 b0
	00 00 00	 mov	 rcx, QWORD PTR variable$3[rsp]
  006a4	48 8b f8	 mov	 rdi, rax
  006a7	48 8d b1 08 01
	00 00		 lea	 rsi, QWORD PTR [rcx+264]
  006ae	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  006b3	f3 a4		 rep movsb

; 908  :                     if (result.type ==TNONE)

  006b5	83 bc 24 20 05
	00 00 00	 cmp	 DWORD PTR result$[rsp], 0
  006bd	75 1d		 jne	 SHORT $LN34@EvalSyntax

; 909  :                     {
; 910  :                         lr->success =0;

  006bf	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  006c7	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 911  :                         lr->err =LR_VAR;

  006cd	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  006d5	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [rax+8], 2
$LN34@EvalSyntax:

; 912  :                     }
; 913  :                 }

  006dc	eb 1d		 jmp	 SHORT $LN33@EvalSyntax
$LN32@EvalSyntax:

; 914  :                 else
; 915  :                 {
; 916  :                     lr->success =0;

  006de	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  006e6	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 917  :                     lr->err =LR_VAR;

  006ec	48 8b 84 24 b8
	10 00 00	 mov	 rax, QWORD PTR lr$[rsp]
  006f4	c7 40 08 02 00
	00 00		 mov	 DWORD PTR [rax+8], 2
$LN33@EvalSyntax:

; 918  :                 }
; 919  :             }

  006fb	eb 2c		 jmp	 SHORT $LN31@EvalSyntax
$LN30@EvalSyntax:

; 920  :             else if (synTree->var.vtype ==VT_CONST)

  006fd	48 8b 84 24 b0
	10 00 00	 mov	 rax, QWORD PTR synTree$[rsp]
  00705	83 78 18 01	 cmp	 DWORD PTR [rax+24], 1
  00709	75 1e		 jne	 SHORT $LN35@EvalSyntax

; 921  :             {
; 922  :                 result =synTree->var._const;

  0070b	48 8d 84 24 20
	05 00 00	 lea	 rax, QWORD PTR result$[rsp]
  00713	48 8b 8c 24 b0
	10 00 00	 mov	 rcx, QWORD PTR synTree$[rsp]
  0071b	48 8b f8	 mov	 rdi, rax
  0071e	48 8d 71 20	 lea	 rsi, QWORD PTR [rcx+32]
  00722	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00727	f3 a4		 rep movsb
$LN35@EvalSyntax:
$LN31@EvalSyntax:
$LN29@EvalSyntax:
$LN6@EvalSyntax:
$LN4@EvalSyntax:

; 923  :             }
; 924  :         }
; 925  :     }
; 926  :     return result;

  00729	48 8d 84 24 20
	05 00 00	 lea	 rax, QWORD PTR result$[rsp]
  00731	48 8b bc 24 a0
	10 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00739	48 8b f0	 mov	 rsi, rax
  0073c	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00741	f3 a4		 rep movsb
  00743	48 8b 84 24 a0
	10 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 927  : }

  0074b	48 8b 8c 24 50
	10 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00753	48 33 cc	 xor	 rcx, rsp
  00756	e8 00 00 00 00	 call	 __security_check_cookie
  0075b	48 81 c4 60 10
	00 00		 add	 rsp, 4192		; 00001060H
  00762	41 5f		 pop	 r15
  00764	41 5e		 pop	 r14
  00766	41 5c		 pop	 r12
  00768	5f		 pop	 rdi
  00769	5e		 pop	 rsi
  0076a	5d		 pop	 rbp
  0076b	5b		 pop	 rbx
  0076c	c3		 ret	 0
EvalSyntaxTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
pCount$ = 48
stringSize$ = 56
tv131 = 64
tv181 = 68
c$ = 72
prevMode$1 = 76
opString$ = 80
slen$ = 88
xOffset$ = 96
yCenter$ = 1120
xCenter$ = 2144
ptrStack$ = 3168
buf$ = 5216
__$ArrayPad$ = 5488
hdc$ = 5520
tree$ = 5528
x$ = 5536
y$ = 5544
cx$ = 5552
cy$ = 5560
PaintSynTree PROC

; 702  : {

$LN17:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	b8 88 15 00 00	 mov	 eax, 5512		; 00001588H
  00019	e8 00 00 00 00	 call	 __chkstk
  0001e	48 2b e0	 sub	 rsp, rax
  00021	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00028	48 33 c4	 xor	 rax, rsp
  0002b	48 89 84 24 70
	15 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 703  :     x+=10;

  00033	8b 84 24 a0 15
	00 00		 mov	 eax, DWORD PTR x$[rsp]
  0003a	83 c0 0a	 add	 eax, 10
  0003d	89 84 24 a0 15
	00 00		 mov	 DWORD PTR x$[rsp], eax

; 704  :     y+=10;

  00044	8b 84 24 a8 15
	00 00		 mov	 eax, DWORD PTR y$[rsp]
  0004b	83 c0 0a	 add	 eax, 10
  0004e	89 84 24 a8 15
	00 00		 mov	 DWORD PTR y$[rsp], eax

; 705  :     char *opString=NULL;

  00055	48 c7 44 24 50
	00 00 00 00	 mov	 QWORD PTR opString$[rsp], 0

; 706  :     size_t slen;
; 707  :     
; 708  :     SIZE stringSize;
; 709  :     SynTree *ptrStack[256];
; 710  :     int pCount=-1;

  0005e	c7 44 24 30 ff
	ff ff ff	 mov	 DWORD PTR pCount$[rsp], -1

; 711  :     
; 712  :     int xCenter[256];
; 713  :     int yCenter[256];
; 714  :     int xOffset[256];
; 715  :     char buf[257];
; 716  :     
; 717  :     int c;
; 718  :     
; 719  :     if (tree)

  00066	48 83 bc 24 98
	15 00 00 00	 cmp	 QWORD PTR tree$[rsp], 0
  0006f	0f 84 cc 03 00
	00		 je	 $LN8@PaintSynTr

; 720  :     {
; 721  :         int prevMode =SetBkMode(hdc, TRANSPARENT);

  00075	ba 01 00 00 00	 mov	 edx, 1
  0007a	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  00082	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetBkMode
  00088	89 44 24 4c	 mov	 DWORD PTR prevMode$1[rsp], eax

; 722  :         ptrStack[++pCount] =tree;

  0008c	8b 44 24 30	 mov	 eax, DWORD PTR pCount$[rsp]
  00090	ff c0		 inc	 eax
  00092	89 44 24 30	 mov	 DWORD PTR pCount$[rsp], eax
  00096	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  0009b	48 8b 8c 24 98
	15 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  000a3	48 89 8c c4 60
	0c 00 00	 mov	 QWORD PTR ptrStack$[rsp+rax*8], rcx

; 723  :         xCenter[pCount] =x;

  000ab	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  000b0	8b 8c 24 a0 15
	00 00		 mov	 ecx, DWORD PTR x$[rsp]
  000b7	89 8c 84 60 08
	00 00		 mov	 DWORD PTR xCenter$[rsp+rax*4], ecx

; 724  :         yCenter[pCount] =y;

  000be	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  000c3	8b 8c 24 a8 15
	00 00		 mov	 ecx, DWORD PTR y$[rsp]
  000ca	89 8c 84 60 04
	00 00		 mov	 DWORD PTR yCenter$[rsp+rax*4], ecx

; 725  :         xOffset[pCount] =0;

  000d1	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  000d6	c7 44 84 60 00
	00 00 00	 mov	 DWORD PTR xOffset$[rsp+rax*4], 0
$LN16@PaintSynTr:
$LN2@PaintSynTr:

; 726  :         
; 727  :         
; 728  :         while (pCount!=-1)

  000de	83 7c 24 30 ff	 cmp	 DWORD PTR pCount$[rsp], -1
  000e3	0f 84 46 03 00
	00		 je	 $LN3@PaintSynTr

; 729  :         {
; 730  :             if (!tree)

  000e9	48 83 bc 24 98
	15 00 00 00	 cmp	 QWORD PTR tree$[rsp], 0
  000f2	75 5c		 jne	 SHORT $LN9@PaintSynTr

; 731  :             {
; 732  :                 tree =ptrStack[pCount--];

  000f4	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  000f9	48 8b 84 c4 60
	0c 00 00	 mov	 rax, QWORD PTR ptrStack$[rsp+rax*8]
  00101	48 89 84 24 98
	15 00 00	 mov	 QWORD PTR tree$[rsp], rax
  00109	8b 44 24 30	 mov	 eax, DWORD PTR pCount$[rsp]
  0010d	ff c8		 dec	 eax
  0010f	89 44 24 30	 mov	 DWORD PTR pCount$[rsp], eax

; 733  :                 if (x < xOffset[pCount])

  00113	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  00118	8b 44 84 60	 mov	 eax, DWORD PTR xOffset$[rsp+rax*4]
  0011c	39 84 24 a0 15
	00 00		 cmp	 DWORD PTR x$[rsp], eax
  00123	7d 10		 jge	 SHORT $LN10@PaintSynTr

; 734  :                 {
; 735  :                     x= xOffset[pCount];

  00125	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  0012a	8b 44 84 60	 mov	 eax, DWORD PTR xOffset$[rsp+rax*4]
  0012e	89 84 24 a0 15
	00 00		 mov	 DWORD PTR x$[rsp], eax
$LN10@PaintSynTr:

; 736  :                 }
; 737  :                 y -=stringSize.cy +10;

  00135	8b 44 24 3c	 mov	 eax, DWORD PTR stringSize$[rsp+4]
  00139	83 c0 0a	 add	 eax, 10
  0013c	8b 8c 24 a8 15
	00 00		 mov	 ecx, DWORD PTR y$[rsp]
  00143	2b c8		 sub	 ecx, eax
  00145	8b c1		 mov	 eax, ecx
  00147	89 84 24 a8 15
	00 00		 mov	 DWORD PTR y$[rsp], eax

; 738  :                 continue;

  0014e	eb 8e		 jmp	 SHORT $LN2@PaintSynTr
$LN9@PaintSynTr:

; 739  :             }
; 740  :             switch (tree->stype)

  00150	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  00158	8b 00		 mov	 eax, DWORD PTR [rax]
  0015a	89 44 24 40	 mov	 DWORD PTR tv131[rsp], eax
  0015e	83 7c 24 40 00	 cmp	 DWORD PTR tv131[rsp], 0
  00163	74 10		 je	 SHORT $LN11@PaintSynTr
  00165	83 7c 24 40 01	 cmp	 DWORD PTR tv131[rsp], 1
  0016a	0f 84 59 01 00
	00		 je	 $LN12@PaintSynTr
  00170	e9 b5 02 00 00	 jmp	 $LN4@PaintSynTr
$LN11@PaintSynTr:

; 741  :             {
; 742  :                 case ST_OP:
; 743  :                 opString =OpToString(tree->op);

  00175	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  0017d	0f b6 48 18	 movzx	 ecx, BYTE PTR [rax+24]
  00181	e8 00 00 00 00	 call	 OpToString
  00186	48 89 44 24 50	 mov	 QWORD PTR opString$[rsp], rax

; 744  :                 slen =strlen(opString);

  0018b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR opString$[rsp]
  00190	e8 00 00 00 00	 call	 strlen
  00195	48 89 44 24 58	 mov	 QWORD PTR slen$[rsp], rax

; 745  :                 
; 746  :                 DrawRectangledText(hdc, opString, slen, x, y, &stringSize);

  0019a	48 8d 44 24 38	 lea	 rax, QWORD PTR stringSize$[rsp]
  0019f	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  001a4	8b 84 24 a8 15
	00 00		 mov	 eax, DWORD PTR y$[rsp]
  001ab	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  001af	44 8b 8c 24 a0
	15 00 00	 mov	 r9d, DWORD PTR x$[rsp]
  001b7	44 8b 44 24 58	 mov	 r8d, DWORD PTR slen$[rsp]
  001bc	48 8b 54 24 50	 mov	 rdx, QWORD PTR opString$[rsp]
  001c1	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  001c9	e8 00 00 00 00	 call	 DrawRectangledText

; 747  :                 
; 748  :                 MoveToEx(hdc, xCenter[pCount], yCenter[pCount], NULL);

  001ce	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  001d3	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR pCount$[rsp]
  001d8	45 33 c9	 xor	 r9d, r9d
  001db	44 8b 84 84 60
	04 00 00	 mov	 r8d, DWORD PTR yCenter$[rsp+rax*4]
  001e3	8b 94 8c 60 08
	00 00		 mov	 edx, DWORD PTR xCenter$[rsp+rcx*4]
  001ea	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MoveToEx

; 749  :                 LineTo(hdc, x+stringSize.cx/2, y);

  001f8	8b 44 24 38	 mov	 eax, DWORD PTR stringSize$[rsp]
  001fc	99		 cdq
  001fd	2b c2		 sub	 eax, edx
  001ff	d1 f8		 sar	 eax, 1
  00201	8b 8c 24 a0 15
	00 00		 mov	 ecx, DWORD PTR x$[rsp]
  00208	03 c8		 add	 ecx, eax
  0020a	8b c1		 mov	 eax, ecx
  0020c	44 8b 84 24 a8
	15 00 00	 mov	 r8d, DWORD PTR y$[rsp]
  00214	8b d0		 mov	 edx, eax
  00216	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  0021e	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LineTo

; 750  :                 
; 751  :                 ptrStack[++pCount] =tree->next;

  00224	8b 44 24 30	 mov	 eax, DWORD PTR pCount$[rsp]
  00228	ff c0		 inc	 eax
  0022a	89 44 24 30	 mov	 DWORD PTR pCount$[rsp], eax
  0022e	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  00233	48 8b 8c 24 98
	15 00 00	 mov	 rcx, QWORD PTR tree$[rsp]
  0023b	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0023f	48 89 8c c4 60
	0c 00 00	 mov	 QWORD PTR ptrStack$[rsp+rax*8], rcx

; 752  :                 xCenter[pCount] =x+stringSize.cx/2;

  00247	8b 44 24 38	 mov	 eax, DWORD PTR stringSize$[rsp]
  0024b	99		 cdq
  0024c	2b c2		 sub	 eax, edx
  0024e	d1 f8		 sar	 eax, 1
  00250	8b 8c 24 a0 15
	00 00		 mov	 ecx, DWORD PTR x$[rsp]
  00257	03 c8		 add	 ecx, eax
  00259	8b c1		 mov	 eax, ecx
  0025b	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR pCount$[rsp]
  00260	89 84 8c 60 08
	00 00		 mov	 DWORD PTR xCenter$[rsp+rcx*4], eax

; 753  :                 yCenter[pCount] =y+stringSize.cy;

  00267	8b 44 24 3c	 mov	 eax, DWORD PTR stringSize$[rsp+4]
  0026b	8b 8c 24 a8 15
	00 00		 mov	 ecx, DWORD PTR y$[rsp]
  00272	03 c8		 add	 ecx, eax
  00274	8b c1		 mov	 eax, ecx
  00276	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR pCount$[rsp]
  0027b	89 84 8c 60 04
	00 00		 mov	 DWORD PTR yCenter$[rsp+rcx*4], eax

; 754  :                 xOffset[pCount] =x+stringSize.cx+10;

  00282	8b 84 24 a0 15
	00 00		 mov	 eax, DWORD PTR x$[rsp]
  00289	8b 4c 24 38	 mov	 ecx, DWORD PTR stringSize$[rsp]
  0028d	8d 44 08 0a	 lea	 eax, DWORD PTR [rax+rcx+10]
  00291	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR pCount$[rsp]
  00296	89 44 8c 60	 mov	 DWORD PTR xOffset$[rsp+rcx*4], eax

; 755  :                 
; 756  :                 y +=stringSize.cy +10;

  0029a	8b 84 24 a8 15
	00 00		 mov	 eax, DWORD PTR y$[rsp]
  002a1	8b 4c 24 3c	 mov	 ecx, DWORD PTR stringSize$[rsp+4]
  002a5	8d 44 08 0a	 lea	 eax, DWORD PTR [rax+rcx+10]
  002a9	89 84 24 a8 15
	00 00		 mov	 DWORD PTR y$[rsp], eax

; 757  :                 
; 758  :                 tree =tree->children;

  002b0	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  002b8	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  002bc	48 89 84 24 98
	15 00 00	 mov	 QWORD PTR tree$[rsp], rax

; 759  :                 break;

  002c4	e9 61 01 00 00	 jmp	 $LN4@PaintSynTr
$LN12@PaintSynTr:

; 760  :                 
; 761  :                 case ST_VAR:
; 762  :                 switch (tree->var.vtype)

  002c9	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  002d1	8b 40 18	 mov	 eax, DWORD PTR [rax+24]
  002d4	89 44 24 44	 mov	 DWORD PTR tv181[rsp], eax
  002d8	83 7c 24 44 00	 cmp	 DWORD PTR tv181[rsp], 0
  002dd	74 0c		 je	 SHORT $LN13@PaintSynTr
  002df	83 7c 24 44 01	 cmp	 DWORD PTR tv181[rsp], 1
  002e4	74 5e		 je	 SHORT $LN14@PaintSynTr
  002e6	e9 bf 00 00 00	 jmp	 $LN6@PaintSynTr
$LN13@PaintSynTr:

; 763  :                 {
; 764  :                     case VT_VAR:
; 765  :                     slen =strlen(tree->var.varName);

  002eb	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  002f3	48 83 c0 20	 add	 rax, 32			; 00000020H
  002f7	48 8b c8	 mov	 rcx, rax
  002fa	e8 00 00 00 00	 call	 strlen
  002ff	48 89 44 24 58	 mov	 QWORD PTR slen$[rsp], rax

; 766  :                     DrawRectangledText(hdc, tree->var.varName, slen, x, y, &stringSize);

  00304	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  0030c	48 83 c0 20	 add	 rax, 32			; 00000020H
  00310	48 8d 4c 24 38	 lea	 rcx, QWORD PTR stringSize$[rsp]
  00315	48 89 4c 24 28	 mov	 QWORD PTR [rsp+40], rcx
  0031a	8b 8c 24 a8 15
	00 00		 mov	 ecx, DWORD PTR y$[rsp]
  00321	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00325	44 8b 8c 24 a0
	15 00 00	 mov	 r9d, DWORD PTR x$[rsp]
  0032d	44 8b 44 24 58	 mov	 r8d, DWORD PTR slen$[rsp]
  00332	48 8b d0	 mov	 rdx, rax
  00335	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  0033d	e8 00 00 00 00	 call	 DrawRectangledText

; 767  :                     break;

  00342	eb 66		 jmp	 SHORT $LN6@PaintSynTr
$LN14@PaintSynTr:

; 768  :                     
; 769  :                     case VT_CONST:
; 770  :                     c = snprintf(buf, 257, "%f", tree->var._const.real);

  00344	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  0034c	f2 0f 10 58 28	 movsd	 xmm3, QWORD PTR [rax+40]
  00351	66 49 0f 7e d9	 movq	 r9, xmm3
  00356	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG38996
  0035d	ba 01 01 00 00	 mov	 edx, 257		; 00000101H
  00362	48 8d 8c 24 60
	14 00 00	 lea	 rcx, QWORD PTR buf$[rsp]
  0036a	e8 00 00 00 00	 call	 snprintf
  0036f	89 44 24 48	 mov	 DWORD PTR c$[rsp], eax

; 771  :                     DrawRectangledText(hdc, buf, c, x, y, &stringSize);

  00373	48 8d 44 24 38	 lea	 rax, QWORD PTR stringSize$[rsp]
  00378	48 89 44 24 28	 mov	 QWORD PTR [rsp+40], rax
  0037d	8b 84 24 a8 15
	00 00		 mov	 eax, DWORD PTR y$[rsp]
  00384	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00388	44 8b 8c 24 a0
	15 00 00	 mov	 r9d, DWORD PTR x$[rsp]
  00390	44 8b 44 24 48	 mov	 r8d, DWORD PTR c$[rsp]
  00395	48 8d 94 24 60
	14 00 00	 lea	 rdx, QWORD PTR buf$[rsp]
  0039d	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  003a5	e8 00 00 00 00	 call	 DrawRectangledText
$LN6@PaintSynTr:

; 772  :                     break;
; 773  :                 }
; 774  :                 MoveToEx(hdc, xCenter[pCount], yCenter[pCount], NULL);

  003aa	48 63 44 24 30	 movsxd	 rax, DWORD PTR pCount$[rsp]
  003af	48 63 4c 24 30	 movsxd	 rcx, DWORD PTR pCount$[rsp]
  003b4	45 33 c9	 xor	 r9d, r9d
  003b7	44 8b 84 84 60
	04 00 00	 mov	 r8d, DWORD PTR yCenter$[rsp+rax*4]
  003bf	8b 94 8c 60 08
	00 00		 mov	 edx, DWORD PTR xCenter$[rsp+rcx*4]
  003c6	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  003ce	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_MoveToEx

; 775  :                 LineTo(hdc, x+stringSize.cx/2, y);

  003d4	8b 44 24 38	 mov	 eax, DWORD PTR stringSize$[rsp]
  003d8	99		 cdq
  003d9	2b c2		 sub	 eax, edx
  003db	d1 f8		 sar	 eax, 1
  003dd	8b 8c 24 a0 15
	00 00		 mov	 ecx, DWORD PTR x$[rsp]
  003e4	03 c8		 add	 ecx, eax
  003e6	8b c1		 mov	 eax, ecx
  003e8	44 8b 84 24 a8
	15 00 00	 mov	 r8d, DWORD PTR y$[rsp]
  003f0	8b d0		 mov	 edx, eax
  003f2	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  003fa	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LineTo

; 776  :                 tree =tree->next;

  00400	48 8b 84 24 98
	15 00 00	 mov	 rax, QWORD PTR tree$[rsp]
  00408	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0040c	48 89 84 24 98
	15 00 00	 mov	 QWORD PTR tree$[rsp], rax

; 777  :                 x+= stringSize.cx +10;

  00414	8b 84 24 a0 15
	00 00		 mov	 eax, DWORD PTR x$[rsp]
  0041b	8b 4c 24 38	 mov	 ecx, DWORD PTR stringSize$[rsp]
  0041f	8d 44 08 0a	 lea	 eax, DWORD PTR [rax+rcx+10]
  00423	89 84 24 a0 15
	00 00		 mov	 DWORD PTR x$[rsp], eax
$LN4@PaintSynTr:

; 778  :                 break;
; 779  :             }
; 780  :         }

  0042a	e9 af fc ff ff	 jmp	 $LN16@PaintSynTr
$LN3@PaintSynTr:

; 781  :         
; 782  :         SetBkMode(hdc, prevMode);

  0042f	8b 54 24 4c	 mov	 edx, DWORD PTR prevMode$1[rsp]
  00433	48 8b 8c 24 90
	15 00 00	 mov	 rcx, QWORD PTR hdc$[rsp]
  0043b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetBkMode
$LN8@PaintSynTr:

; 783  :     }
; 784  : }

  00441	48 8b 8c 24 70
	15 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00449	48 33 cc	 xor	 rcx, rsp
  0044c	e8 00 00 00 00	 call	 __security_check_cookie
  00451	48 81 c4 88 15
	00 00		 add	 rsp, 5512		; 00001588H
  00458	c3		 ret	 0
PaintSynTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
hdc$ = 64
str$ = 72
slen$ = 80
x$ = 88
y$ = 96
stringSize$ = 104
DrawRectangledText PROC

; 691  : {

$LN3:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 692  :     GetTextExtentPoint32A(hdc, str, slen, stringSize);

  00018	4c 8b 4c 24 68	 mov	 r9, QWORD PTR stringSize$[rsp]
  0001d	44 8b 44 24 50	 mov	 r8d, DWORD PTR slen$[rsp]
  00022	48 8b 54 24 48	 mov	 rdx, QWORD PTR str$[rsp]
  00027	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hdc$[rsp]
  0002c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetTextExtentPoint32A

; 693  :     stringSize->cx+=10;

  00032	48 8b 44 24 68	 mov	 rax, QWORD PTR stringSize$[rsp]
  00037	8b 00		 mov	 eax, DWORD PTR [rax]
  00039	83 c0 0a	 add	 eax, 10
  0003c	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stringSize$[rsp]
  00041	89 01		 mov	 DWORD PTR [rcx], eax

; 694  :     stringSize->cy+=10;

  00043	48 8b 44 24 68	 mov	 rax, QWORD PTR stringSize$[rsp]
  00048	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0004b	83 c0 0a	 add	 eax, 10
  0004e	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stringSize$[rsp]
  00053	89 41 04	 mov	 DWORD PTR [rcx+4], eax

; 695  :     
; 696  :     Rectangle(hdc, x, y, x+stringSize->cx, y+stringSize->cy);

  00056	48 8b 44 24 68	 mov	 rax, QWORD PTR stringSize$[rsp]
  0005b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0005e	8b 4c 24 60	 mov	 ecx, DWORD PTR y$[rsp]
  00062	03 c8		 add	 ecx, eax
  00064	8b c1		 mov	 eax, ecx
  00066	48 8b 4c 24 68	 mov	 rcx, QWORD PTR stringSize$[rsp]
  0006b	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0006d	8b 54 24 58	 mov	 edx, DWORD PTR x$[rsp]
  00071	03 d1		 add	 edx, ecx
  00073	8b ca		 mov	 ecx, edx
  00075	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  00079	44 8b c9	 mov	 r9d, ecx
  0007c	44 8b 44 24 60	 mov	 r8d, DWORD PTR y$[rsp]
  00081	8b 54 24 58	 mov	 edx, DWORD PTR x$[rsp]
  00085	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hdc$[rsp]
  0008a	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_Rectangle

; 697  :     TextOutA(hdc, x+5, y+5, str, slen);

  00090	8b 44 24 60	 mov	 eax, DWORD PTR y$[rsp]
  00094	83 c0 05	 add	 eax, 5
  00097	8b 4c 24 58	 mov	 ecx, DWORD PTR x$[rsp]
  0009b	83 c1 05	 add	 ecx, 5
  0009e	8b 54 24 50	 mov	 edx, DWORD PTR slen$[rsp]
  000a2	89 54 24 20	 mov	 DWORD PTR [rsp+32], edx
  000a6	4c 8b 4c 24 48	 mov	 r9, QWORD PTR str$[rsp]
  000ab	44 8b c0	 mov	 r8d, eax
  000ae	8b d1		 mov	 edx, ecx
  000b0	48 8b 4c 24 40	 mov	 rcx, QWORD PTR hdc$[rsp]
  000b5	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TextOutA

; 698  : }

  000bb	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000bf	c3		 ret	 0
DrawRectangledText ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
op$1 = 48
prevState$ = 52
result$ = 56
tv78 = 80
hint$ = 84
tv201 = 88
parent$2 = 96
numVars$3 = 104
varResult$ = 112
$T4 = 400
$T5 = 680
stkcxt$ = 960
__$ArrayPad$ = 2016
__$ReturnAddress$ = 2064
lang$ = 2072
statement$ = 2080
c$ = 2088
BuildSyntaxTree PROC

; 521  : {

$LN39:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec f8 07
	00 00		 sub	 rsp, 2040		; 000007f8H
  0001d	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00024	48 33 c4	 xor	 rax, rsp
  00027	48 89 84 24 e0
	07 00 00	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 522  :     SyntaxResult result ={.success=1};

  0002f	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00037	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR result$[rsp+8], 0
  00040	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 0

; 523  :     VarResult varResult ={0};

  00048	48 8d 44 24 70	 lea	 rax, QWORD PTR varResult$[rsp]
  0004d	48 8b f8	 mov	 rdi, rax
  00050	33 c0		 xor	 eax, eax
  00052	b9 18 01 00 00	 mov	 ecx, 280		; 00000118H
  00057	f3 aa		 rep stosb

; 524  :     Var var;
; 525  :     int hint;
; 526  :     int prevState=H_NONE;

  00059	c7 44 24 34 00
	00 00 00	 mov	 DWORD PTR prevState$[rsp], 0

; 527  :     
; 528  :     StackContext stkcxt =

  00061	c7 84 24 c0 03
	00 00 ff ff ff
	ff		 mov	 DWORD PTR stkcxt$[rsp], -1
  0006c	c7 84 24 c4 03
	00 00 ff ff ff
	ff		 mov	 DWORD PTR stkcxt$[rsp+4], -1
  00077	c7 84 24 c8 03
	00 00 00 00 00
	00		 mov	 DWORD PTR stkcxt$[rsp+8], 0
  00082	c7 84 24 cc 03
	00 00 00 00 00
	00		 mov	 DWORD PTR stkcxt$[rsp+12], 0
  0008d	48 8d 84 24 d0
	03 00 00	 lea	 rax, QWORD PTR stkcxt$[rsp+16]
  00095	48 8b f8	 mov	 rdi, rax
  00098	33 c0		 xor	 eax, eax
  0009a	b9 00 04 00 00	 mov	 ecx, 1024		; 00000400H
  0009f	f3 aa		 rep stosb
  000a1	c7 84 24 d0 07
	00 00 ff ff ff
	ff		 mov	 DWORD PTR stkcxt$[rsp+1040], -1
$LN2@BuildSynta:

; 529  :     {
; 530  :         .oCount=-1,
; 531  :         .vCount=-1,
; 532  :         .offset =0,
; 533  :         .ofCount=-1,
; 534  :         .synTreeAllocated=0
; 535  :     };
; 536  :     
; 537  :     while (stkcxt.offset <c)

  000ac	8b 84 24 28 08
	00 00		 mov	 eax, DWORD PTR c$[rsp]
  000b3	39 84 24 c8 03
	00 00		 cmp	 DWORD PTR stkcxt$[rsp+8], eax
  000ba	0f 8d ca 04 00
	00		 jge	 $LN3@BuildSynta

; 538  :     {
; 539  :         hint =GetSyntaxHint(statement[stkcxt.offset]);

  000c0	48 63 84 24 c8
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+8]
  000c8	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  000d0	0f b6 0c 01	 movzx	 ecx, BYTE PTR [rcx+rax]
  000d4	e8 00 00 00 00	 call	 GetSyntaxHint
  000d9	89 44 24 54	 mov	 DWORD PTR hint$[rsp], eax

; 540  :         switch (hint)

  000dd	8b 44 24 54	 mov	 eax, DWORD PTR hint$[rsp]
  000e1	89 44 24 50	 mov	 DWORD PTR tv78[rsp], eax
  000e5	83 7c 24 50 01	 cmp	 DWORD PTR tv78[rsp], 1
  000ea	0f 84 df 00 00
	00		 je	 $LN11@BuildSynta
  000f0	83 7c 24 50 02	 cmp	 DWORD PTR tv78[rsp], 2
  000f5	0f 84 7e 03 00
	00		 je	 $LN22@BuildSynta
  000fb	83 7c 24 50 03	 cmp	 DWORD PTR tv78[rsp], 3
  00100	74 10		 je	 SHORT $LN8@BuildSynta
  00102	83 7c 24 50 04	 cmp	 DWORD PTR tv78[rsp], 4
  00107	0f 84 63 04 00
	00		 je	 $LN28@BuildSynta
  0010d	e9 73 04 00 00	 jmp	 $LN4@BuildSynta
$LN8@BuildSynta:

; 541  :         {
; 542  :             case H_CONST:
; 543  :             if (prevState !=H_OP
; 544  :                 && prevState !=H_NONE)

  00112	83 7c 24 34 01	 cmp	 DWORD PTR prevState$[rsp], 1
  00117	74 37		 je	 SHORT $LN9@BuildSynta
  00119	83 7c 24 34 00	 cmp	 DWORD PTR prevState$[rsp], 0
  0011e	74 30		 je	 SHORT $LN9@BuildSynta

; 545  :             {
; 546  :                 result.success =0;

  00120	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 547  :                 result.err.type =ERR_CONST;

  00128	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 0

; 548  :                 result.err.loc =&statement[stkcxt.offset];

  00130	48 63 84 24 c8
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+8]
  00138	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  00140	48 03 c8	 add	 rcx, rax
  00143	48 8b c1	 mov	 rax, rcx
  00146	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax

; 549  :                 goto BuildSynTree_Exit;

  0014b	e9 3a 04 00 00	 jmp	 $BuildSynTree_Exit$40
$LN9@BuildSynta:

; 550  :             }
; 551  :             varResult =CosumeConstant(statement, &stkcxt.offset);

  00150	4c 8d 84 24 c8
	03 00 00	 lea	 r8, QWORD PTR stkcxt$[rsp+8]
  00158	48 8b 94 24 20
	08 00 00	 mov	 rdx, QWORD PTR statement$[rsp]
  00160	48 8d 8c 24 90
	01 00 00	 lea	 rcx, QWORD PTR $T4[rsp]
  00168	e8 00 00 00 00	 call	 CosumeConstant
  0016d	48 8d 4c 24 70	 lea	 rcx, QWORD PTR varResult$[rsp]
  00172	48 8b f9	 mov	 rdi, rcx
  00175	48 8b f0	 mov	 rsi, rax
  00178	b9 18 01 00 00	 mov	 ecx, 280		; 00000118H
  0017d	f3 a4		 rep movsb

; 552  :             if (varResult.success)

  0017f	83 7c 24 70 00	 cmp	 DWORD PTR varResult$[rsp], 0
  00184	74 3c		 je	 SHORT $LN10@BuildSynta

; 553  :             {
; 554  :                 CopyVar(&lang->varStk[++stkcxt.vCount], &varResult.var);

  00186	8b 84 24 c4 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+4]
  0018d	ff c0		 inc	 eax
  0018f	89 84 24 c4 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp+4], eax
  00196	48 63 84 24 c4
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+4]
  0019e	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  001a5	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  001ad	48 8d 84 01 d0
	26 0b 00	 lea	 rax, QWORD PTR [rcx+rax+730832]
  001b5	48 8d 54 24 78	 lea	 rdx, QWORD PTR varResult$[rsp+8]
  001ba	48 8b c8	 mov	 rcx, rax
  001bd	e8 00 00 00 00	 call	 CopyVar
$LN10@BuildSynta:

; 555  :             }
; 556  :             prevState =hint;

  001c2	8b 44 24 54	 mov	 eax, DWORD PTR hint$[rsp]
  001c6	89 44 24 34	 mov	 DWORD PTR prevState$[rsp], eax

; 557  :             break;

  001ca	e9 b6 03 00 00	 jmp	 $LN4@BuildSynta
$LN11@BuildSynta:

; 558  :             
; 559  :             case H_OP:
; 560  :             if (prevState ==H_NONE)

  001cf	83 7c 24 34 00	 cmp	 DWORD PTR prevState$[rsp], 0
  001d4	75 33		 jne	 SHORT $LN12@BuildSynta

; 561  :             {
; 562  :                 result.success =0;

  001d6	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 563  :                 result.err.type =ERR_OPERAND;

  001de	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 2

; 564  :                 result.err.loc =&statement[stkcxt.offset-1];

  001e6	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+8]
  001ed	ff c8		 dec	 eax
  001ef	48 98		 cdqe
  001f1	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  001f9	48 03 c8	 add	 rcx, rax
  001fc	48 8b c1	 mov	 rax, rcx
  001ff	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax

; 565  :                 goto BuildSynTree_Exit;

  00204	e9 81 03 00 00	 jmp	 $BuildSynTree_Exit$40
$LN12@BuildSynta:

; 566  :             }
; 567  :             char op=CosumeOperand(statement, &stkcxt.offset);

  00209	48 8d 94 24 c8
	03 00 00	 lea	 rdx, QWORD PTR stkcxt$[rsp+8]
  00211	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  00219	e8 00 00 00 00	 call	 CosumeOperand
  0021e	88 44 24 30	 mov	 BYTE PTR op$1[rsp], al

; 568  :             if (op==OP_NONE)

  00222	0f be 44 24 30	 movsx	 eax, BYTE PTR op$1[rsp]
  00227	85 c0		 test	 eax, eax
  00229	75 38		 jne	 SHORT $LN13@BuildSynta

; 569  :             {
; 570  :                 result.success =0;

  0022b	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 571  :                 result.err.type =ERR_OPERAND;

  00233	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 2

; 572  :                 result.err.loc =&statement[stkcxt.offset-1];

  0023b	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+8]
  00242	ff c8		 dec	 eax
  00244	48 98		 cdqe
  00246	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  0024e	48 03 c8	 add	 rcx, rax
  00251	48 8b c1	 mov	 rax, rcx
  00254	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax

; 573  :                 goto BuildSynTree_Exit;

  00259	e9 2c 03 00 00	 jmp	 $BuildSynTree_Exit$40

; 574  :             }

  0025e	e9 cc 00 00 00	 jmp	 $LN14@BuildSynta
$LN13@BuildSynta:

; 575  :             else if (op ==OP_COMMA
; 576  :                      && stkcxt.ofCount==-1)

  00263	0f be 44 24 30	 movsx	 eax, BYTE PTR op$1[rsp]
  00268	83 f8 17	 cmp	 eax, 23
  0026b	75 42		 jne	 SHORT $LN15@BuildSynta
  0026d	83 bc 24 d0 07
	00 00 ff	 cmp	 DWORD PTR stkcxt$[rsp+1040], -1
  00275	75 38		 jne	 SHORT $LN15@BuildSynta

; 577  :             {
; 578  :                 result.success =0;

  00277	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 579  :                 result.err.type =ERR_OPERAND;

  0027f	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 2

; 580  :                 result.err.loc =&statement[stkcxt.offset-1];

  00287	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+8]
  0028e	ff c8		 dec	 eax
  00290	48 98		 cdqe
  00292	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  0029a	48 03 c8	 add	 rcx, rax
  0029d	48 8b c1	 mov	 rax, rcx
  002a0	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax

; 581  :                 goto BuildSynTree_Exit;

  002a5	e9 e0 02 00 00	 jmp	 $BuildSynTree_Exit$40

; 582  :             }

  002aa	e9 80 00 00 00	 jmp	 $LN16@BuildSynta
$LN15@BuildSynta:

; 583  :             else if (op ==OP_OBRAK)

  002af	0f be 44 24 30	 movsx	 eax, BYTE PTR op$1[rsp]
  002b4	83 f8 15	 cmp	 eax, 21
  002b7	75 76		 jne	 SHORT $LN17@BuildSynta

; 584  :             {
; 585  :                 if (prevState ==H_CONST)

  002b9	83 7c 24 34 03	 cmp	 DWORD PTR prevState$[rsp], 3
  002be	75 22		 jne	 SHORT $LN18@BuildSynta

; 586  :                 {
; 587  :                     PushOperand(lang, &stkcxt, statement, OP_MUL);

  002c0	41 b1 03	 mov	 r9b, 3
  002c3	4c 8b 84 24 20
	08 00 00	 mov	 r8, QWORD PTR statement$[rsp]
  002cb	48 8d 94 24 c0
	03 00 00	 lea	 rdx, QWORD PTR stkcxt$[rsp]
  002d3	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  002db	e8 00 00 00 00	 call	 PushOperand

; 588  :                 }

  002e0	eb 4d		 jmp	 SHORT $LN19@BuildSynta
$LN18@BuildSynta:

; 589  :                 else if (prevState ==H_VAR)

  002e2	83 7c 24 34 02	 cmp	 DWORD PTR prevState$[rsp], 2
  002e7	75 46		 jne	 SHORT $LN20@BuildSynta

; 590  :                 {
; 591  :                     stkcxt.varOffsets[++stkcxt.ofCount] =stkcxt.vCount;

  002e9	8b 84 24 d0 07
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+1040]
  002f0	ff c0		 inc	 eax
  002f2	89 84 24 d0 07
	00 00		 mov	 DWORD PTR stkcxt$[rsp+1040], eax
  002f9	48 63 84 24 d0
	07 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+1040]
  00301	8b 8c 24 c4 03
	00 00		 mov	 ecx, DWORD PTR stkcxt$[rsp+4]
  00308	89 8c 84 d0 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp+rax*4+16], ecx

; 592  :                     PushOperand(lang, &stkcxt, statement, OP_FUNC);

  0030f	41 b1 14	 mov	 r9b, 20
  00312	4c 8b 84 24 20
	08 00 00	 mov	 r8, QWORD PTR statement$[rsp]
  0031a	48 8d 94 24 c0
	03 00 00	 lea	 rdx, QWORD PTR stkcxt$[rsp]
  00322	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  0032a	e8 00 00 00 00	 call	 PushOperand
$LN20@BuildSynta:
$LN19@BuildSynta:
$LN17@BuildSynta:
$LN16@BuildSynta:
$LN14@BuildSynta:

; 593  :                 }
; 594  :             }
; 595  :             PushOperand(lang, &stkcxt, statement, op);

  0032f	44 0f b6 4c 24
	30		 movzx	 r9d, BYTE PTR op$1[rsp]
  00335	4c 8b 84 24 20
	08 00 00	 mov	 r8, QWORD PTR statement$[rsp]
  0033d	48 8d 94 24 c0
	03 00 00	 lea	 rdx, QWORD PTR stkcxt$[rsp]
  00345	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  0034d	e8 00 00 00 00	 call	 PushOperand

; 596  :             
; 597  :             if (op ==OP_CBRAK
; 598  :                 && lang->opStk[stkcxt.oCount] ==OP_FUNC)

  00352	0f be 44 24 30	 movsx	 eax, BYTE PTR op$1[rsp]
  00357	83 f8 16	 cmp	 eax, 22
  0035a	0f 85 f0 00 00
	00		 jne	 $LN21@BuildSynta
  00360	48 63 84 24 c0
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp]
  00368	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  00370	0f be 84 01 d0
	22 0b 00	 movsx	 eax, BYTE PTR [rcx+rax+729808]
  00378	83 f8 14	 cmp	 eax, 20
  0037b	0f 85 cf 00 00
	00		 jne	 $LN21@BuildSynta

; 599  :             {
; 600  :                 int numVars =stkcxt.vCount- stkcxt.varOffsets[stkcxt.ofCount--]+1;

  00381	48 63 84 24 d0
	07 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+1040]
  00389	8b 84 84 d0 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+rax*4+16]
  00390	8b 8c 24 c4 03
	00 00		 mov	 ecx, DWORD PTR stkcxt$[rsp+4]
  00397	2b c8		 sub	 ecx, eax
  00399	8b c1		 mov	 eax, ecx
  0039b	ff c0		 inc	 eax
  0039d	89 44 24 68	 mov	 DWORD PTR numVars$3[rsp], eax
  003a1	8b 84 24 d0 07
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+1040]
  003a8	ff c8		 dec	 eax
  003aa	89 84 24 d0 07
	00 00		 mov	 DWORD PTR stkcxt$[rsp+1040], eax

; 601  :                 SynTree *parent=&lang->synTrees[stkcxt.synTreeAllocated++];

  003b1	48 63 84 24 cc
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+12]
  003b9	48 69 c0 28 01
	00 00		 imul	 rax, rax, 296		; 00000128H
  003c0	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  003c8	48 8d 84 01 d0
	82 06 00	 lea	 rax, QWORD PTR [rcx+rax+426704]
  003d0	48 89 44 24 60	 mov	 QWORD PTR parent$2[rsp], rax
  003d5	8b 84 24 cc 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+12]
  003dc	ff c0		 inc	 eax
  003de	89 84 24 cc 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp+12], eax

; 602  :                 
; 603  :                 parent->op =OP_FUNC;

  003e5	48 8b 44 24 60	 mov	 rax, QWORD PTR parent$2[rsp]
  003ea	c7 40 18 14 00
	00 00		 mov	 DWORD PTR [rax+24], 20

; 604  :                 parent->stype =ST_OP;

  003f1	48 8b 44 24 60	 mov	 rax, QWORD PTR parent$2[rsp]
  003f6	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 605  :                 parent->children =NULL;

  003fc	48 8b 44 24 60	 mov	 rax, QWORD PTR parent$2[rsp]
  00401	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 606  :                 parent->next =NULL;

  00409	48 8b 44 24 60	 mov	 rax, QWORD PTR parent$2[rsp]
  0040e	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 607  :                 
; 608  :                 PopNumVars(lang, parent, &stkcxt, statement, numVars);

  00416	8b 44 24 68	 mov	 eax, DWORD PTR numVars$3[rsp]
  0041a	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  0041e	4c 8b 8c 24 20
	08 00 00	 mov	 r9, QWORD PTR statement$[rsp]
  00426	4c 8d 84 24 c0
	03 00 00	 lea	 r8, QWORD PTR stkcxt$[rsp]
  0042e	48 8b 54 24 60	 mov	 rdx, QWORD PTR parent$2[rsp]
  00433	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  0043b	e8 00 00 00 00	 call	 PopNumVars

; 609  :                 
; 610  :                 stkcxt.oCount--;

  00440	8b 84 24 c0 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp]
  00447	ff c8		 dec	 eax
  00449	89 84 24 c0 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp], eax
$LN21@BuildSynta:

; 611  :             }
; 612  :             prevState =(op ==OP_CBRAK) ? H_CONST :hint;

  00450	0f be 44 24 30	 movsx	 eax, BYTE PTR op$1[rsp]
  00455	83 f8 16	 cmp	 eax, 22
  00458	75 0a		 jne	 SHORT $LN37@BuildSynta
  0045a	c7 44 24 58 03
	00 00 00	 mov	 DWORD PTR tv201[rsp], 3
  00462	eb 08		 jmp	 SHORT $LN38@BuildSynta
$LN37@BuildSynta:
  00464	8b 44 24 54	 mov	 eax, DWORD PTR hint$[rsp]
  00468	89 44 24 58	 mov	 DWORD PTR tv201[rsp], eax
$LN38@BuildSynta:
  0046c	8b 44 24 58	 mov	 eax, DWORD PTR tv201[rsp]
  00470	89 44 24 34	 mov	 DWORD PTR prevState$[rsp], eax

; 613  :             break;

  00474	e9 0c 01 00 00	 jmp	 $LN4@BuildSynta
$LN22@BuildSynta:

; 614  :             
; 615  :             case H_VAR:
; 616  :             if (prevState ==H_CONST)

  00479	83 7c 24 34 03	 cmp	 DWORD PTR prevState$[rsp], 3
  0047e	75 2e		 jne	 SHORT $LN23@BuildSynta

; 617  :             {
; 618  :                 PushOperand(lang, &stkcxt, statement, OP_MUL);

  00480	41 b1 03	 mov	 r9b, 3
  00483	4c 8b 84 24 20
	08 00 00	 mov	 r8, QWORD PTR statement$[rsp]
  0048b	48 8d 94 24 c0
	03 00 00	 lea	 rdx, QWORD PTR stkcxt$[rsp]
  00493	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  0049b	e8 00 00 00 00	 call	 PushOperand

; 619  :                 if (!result.success)

  004a0	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  004a5	75 05		 jne	 SHORT $LN25@BuildSynta

; 620  :                 {
; 621  :                     goto BuildSynTree_Exit;

  004a7	e9 de 00 00 00	 jmp	 $BuildSynTree_Exit$40
$LN25@BuildSynta:

; 622  :                 }
; 623  :             }

  004ac	eb 3e		 jmp	 SHORT $LN24@BuildSynta
$LN23@BuildSynta:

; 624  :             else if (prevState !=H_OP
; 625  :                      && prevState !=H_NONE)

  004ae	83 7c 24 34 01	 cmp	 DWORD PTR prevState$[rsp], 1
  004b3	74 37		 je	 SHORT $LN26@BuildSynta
  004b5	83 7c 24 34 00	 cmp	 DWORD PTR prevState$[rsp], 0
  004ba	74 30		 je	 SHORT $LN26@BuildSynta

; 626  :             {
; 627  :                 result.success =0;

  004bc	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 628  :                 result.err.type =ERR_CONST;

  004c4	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 0

; 629  :                 result.err.loc =&statement[stkcxt.offset];

  004cc	48 63 84 24 c8
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+8]
  004d4	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  004dc	48 03 c8	 add	 rcx, rax
  004df	48 8b c1	 mov	 rax, rcx
  004e2	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax

; 630  :                 goto BuildSynTree_Exit;

  004e7	e9 9e 00 00 00	 jmp	 $BuildSynTree_Exit$40
$LN26@BuildSynta:
$LN24@BuildSynta:

; 631  :             }
; 632  :             varResult =CosumeVariable(statement, &stkcxt.offset, c);

  004ec	44 8b 8c 24 28
	08 00 00	 mov	 r9d, DWORD PTR c$[rsp]
  004f4	4c 8d 84 24 c8
	03 00 00	 lea	 r8, QWORD PTR stkcxt$[rsp+8]
  004fc	48 8b 94 24 20
	08 00 00	 mov	 rdx, QWORD PTR statement$[rsp]
  00504	48 8d 8c 24 a8
	02 00 00	 lea	 rcx, QWORD PTR $T5[rsp]
  0050c	e8 00 00 00 00	 call	 CosumeVariable
  00511	48 8d 4c 24 70	 lea	 rcx, QWORD PTR varResult$[rsp]
  00516	48 8b f9	 mov	 rdi, rcx
  00519	48 8b f0	 mov	 rsi, rax
  0051c	b9 18 01 00 00	 mov	 ecx, 280		; 00000118H
  00521	f3 a4		 rep movsb

; 633  :             if (varResult.success)

  00523	83 7c 24 70 00	 cmp	 DWORD PTR varResult$[rsp], 0
  00528	74 3c		 je	 SHORT $LN27@BuildSynta

; 634  :             {
; 635  :                 CopyVar(&lang->varStk[++stkcxt.vCount], &varResult.var);

  0052a	8b 84 24 c4 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+4]
  00531	ff c0		 inc	 eax
  00533	89 84 24 c4 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp+4], eax
  0053a	48 63 84 24 c4
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+4]
  00542	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  00549	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  00551	48 8d 84 01 d0
	26 0b 00	 lea	 rax, QWORD PTR [rcx+rax+730832]
  00559	48 8d 54 24 78	 lea	 rdx, QWORD PTR varResult$[rsp+8]
  0055e	48 8b c8	 mov	 rcx, rax
  00561	e8 00 00 00 00	 call	 CopyVar
$LN27@BuildSynta:

; 636  :             }
; 637  :             prevState =hint;

  00566	8b 44 24 54	 mov	 eax, DWORD PTR hint$[rsp]
  0056a	89 44 24 34	 mov	 DWORD PTR prevState$[rsp], eax

; 638  :             break;

  0056e	eb 15		 jmp	 SHORT $LN4@BuildSynta
$LN28@BuildSynta:

; 639  :             
; 640  :             case H_WSPACE:
; 641  :             EatWhitespace(statement, &stkcxt.offset);

  00570	48 8d 94 24 c8
	03 00 00	 lea	 rdx, QWORD PTR stkcxt$[rsp+8]
  00578	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  00580	e8 00 00 00 00	 call	 EatWhitespace
$LN4@BuildSynta:

; 642  :             break;
; 643  :         }
; 644  :     }

  00585	e9 22 fb ff ff	 jmp	 $LN2@BuildSynta
$LN3@BuildSynta:
$BuildSynTree_Exit$40:

; 645  :     BuildSynTree_Exit:
; 646  :     if (result.success)

  0058a	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  0058f	0f 84 e7 01 00
	00		 je	 $LN29@BuildSynta
$LN6@BuildSynta:

; 647  :     {
; 648  :         while (stkcxt.oCount!=-1
; 649  :                && stkcxt.vCount !=-1)

  00595	83 bc 24 c0 03
	00 00 ff	 cmp	 DWORD PTR stkcxt$[rsp], -1
  0059d	0f 84 af 00 00
	00		 je	 $LN7@BuildSynta
  005a3	83 bc 24 c4 03
	00 00 ff	 cmp	 DWORD PTR stkcxt$[rsp+4], -1
  005ab	0f 84 a1 00 00
	00		 je	 $LN7@BuildSynta

; 650  :         {
; 651  :             if (lang->opStk[stkcxt.oCount] ==OP_OBRAK)

  005b1	48 63 84 24 c0
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp]
  005b9	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  005c1	0f be 84 01 d0
	22 0b 00	 movsx	 eax, BYTE PTR [rcx+rax+729808]
  005c9	83 f8 15	 cmp	 eax, 21
  005cc	75 30		 jne	 SHORT $LN30@BuildSynta

; 652  :             {
; 653  :                 result.success =0;

  005ce	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 654  :                 result.err.type =ERR_OPERAND;

  005d6	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 2

; 655  :                 result.err.loc =&statement[stkcxt.offset-1];

  005de	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+8]
  005e5	ff c8		 dec	 eax
  005e7	48 98		 cdqe
  005e9	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  005f1	48 03 c8	 add	 rcx, rax
  005f4	48 8b c1	 mov	 rax, rcx
  005f7	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax

; 656  :                 break;

  005fc	eb 54		 jmp	 SHORT $LN7@BuildSynta
$LN30@BuildSynta:

; 657  :             }
; 658  :             if (!PopOperand(lang, &stkcxt, statement))

  005fe	4c 8b 84 24 20
	08 00 00	 mov	 r8, QWORD PTR statement$[rsp]
  00606	48 8d 94 24 c0
	03 00 00	 lea	 rdx, QWORD PTR stkcxt$[rsp]
  0060e	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  00616	e8 00 00 00 00	 call	 PopOperand
  0061b	85 c0		 test	 eax, eax
  0061d	75 2e		 jne	 SHORT $LN31@BuildSynta

; 659  :             {
; 660  :                 result.success =0;

  0061f	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 661  :                 result.err.type =ERR_OPERAND;

  00627	c7 44 24 48 02
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 2

; 662  :                 result.err.loc =&statement[stkcxt.offset-1];

  0062f	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+8]
  00636	ff c8		 dec	 eax
  00638	48 98		 cdqe
  0063a	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  00642	48 03 c8	 add	 rcx, rax
  00645	48 8b c1	 mov	 rax, rcx
  00648	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax
$LN31@BuildSynta:

; 663  :             }
; 664  :         }

  0064d	e9 43 ff ff ff	 jmp	 $LN6@BuildSynta
$LN7@BuildSynta:

; 665  :         if (result.success
; 666  :             && stkcxt.vCount !=-1)

  00652	83 7c 24 38 00	 cmp	 DWORD PTR result$[rsp], 0
  00657	0f 84 1f 01 00
	00		 je	 $LN32@BuildSynta
  0065d	83 bc 24 c4 03
	00 00 ff	 cmp	 DWORD PTR stkcxt$[rsp+4], -1
  00665	0f 84 11 01 00
	00		 je	 $LN32@BuildSynta

; 667  :         {
; 668  :             if (lang->varStk[stkcxt.vCount].vtype !=VT_SYNTREE)

  0066b	48 63 84 24 c4
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+4]
  00673	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  0067a	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  00682	83 bc 01 d0 26
	0b 00 02	 cmp	 DWORD PTR [rcx+rax+730832], 2
  0068a	0f 84 80 00 00
	00		 je	 $LN33@BuildSynta

; 669  :             {
; 670  :                 result.tree =&lang->synTrees[stkcxt.synTreeAllocated++];

  00690	48 63 84 24 cc
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+12]
  00698	48 69 c0 28 01
	00 00		 imul	 rax, rax, 296		; 00000128H
  0069f	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  006a7	48 8d 84 01 d0
	82 06 00	 lea	 rax, QWORD PTR [rcx+rax+426704]
  006af	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax
  006b4	8b 84 24 cc 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+12]
  006bb	ff c0		 inc	 eax
  006bd	89 84 24 cc 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp+12], eax

; 671  :                 result.tree->stype =ST_VAR;

  006c4	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp+8]
  006c9	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 672  :                 result.tree->var =lang->varStk[stkcxt.vCount--];

  006cf	48 63 84 24 c4
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+4]
  006d7	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  006de	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp+8]
  006e3	48 8b 94 24 18
	08 00 00	 mov	 rdx, QWORD PTR lang$[rsp]
  006eb	48 8d 79 18	 lea	 rdi, QWORD PTR [rcx+24]
  006ef	48 8d b4 02 d0
	26 0b 00	 lea	 rsi, QWORD PTR [rdx+rax+730832]
  006f7	b9 10 01 00 00	 mov	 ecx, 272		; 00000110H
  006fc	f3 a4		 rep movsb
  006fe	8b 84 24 c4 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+4]
  00705	ff c8		 dec	 eax
  00707	89 84 24 c4 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp+4], eax

; 673  :             }

  0070e	eb 34		 jmp	 SHORT $LN34@BuildSynta
$LN33@BuildSynta:

; 674  :             else
; 675  :             {
; 676  :                 result.tree =lang->varStk[stkcxt.vCount--].synTree;

  00710	48 63 84 24 c4
	03 00 00	 movsxd	 rax, DWORD PTR stkcxt$[rsp+4]
  00718	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  0071f	48 8b 8c 24 18
	08 00 00	 mov	 rcx, QWORD PTR lang$[rsp]
  00727	48 8b 84 01 d8
	26 0b 00	 mov	 rax, QWORD PTR [rcx+rax+730840]
  0072f	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax
  00734	8b 84 24 c4 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+4]
  0073b	ff c8		 dec	 eax
  0073d	89 84 24 c4 03
	00 00		 mov	 DWORD PTR stkcxt$[rsp+4], eax
$LN34@BuildSynta:

; 677  :             }
; 678  :             if (stkcxt.vCount !=-1)

  00744	83 bc 24 c4 03
	00 00 ff	 cmp	 DWORD PTR stkcxt$[rsp+4], -1
  0074c	74 2e		 je	 SHORT $LN35@BuildSynta

; 679  :             {
; 680  :                 result.success =0;

  0074e	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 681  :                 result.err.type =ERR_VAR;

  00756	c7 44 24 48 01
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 1

; 682  :                 result.err.loc =&statement[stkcxt.offset-1];

  0075e	8b 84 24 c8 03
	00 00		 mov	 eax, DWORD PTR stkcxt$[rsp+8]
  00765	ff c8		 dec	 eax
  00767	48 98		 cdqe
  00769	48 8b 8c 24 20
	08 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  00771	48 03 c8	 add	 rcx, rax
  00774	48 8b c1	 mov	 rax, rcx
  00777	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+8], rax
$LN35@BuildSynta:
$LN32@BuildSynta:
$LN29@BuildSynta:

; 683  :             }
; 684  :         }
; 685  :     }
; 686  :     return result;

  0077c	48 8d 44 24 38	 lea	 rax, QWORD PTR result$[rsp]
  00781	48 8b bc 24 10
	08 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00789	48 8b f0	 mov	 rsi, rax
  0078c	b9 18 00 00 00	 mov	 ecx, 24
  00791	f3 a4		 rep movsb
  00793	48 8b 84 24 10
	08 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 687  : }

  0079b	48 8b 8c 24 e0
	07 00 00	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  007a3	48 33 cc	 xor	 rcx, rsp
  007a6	e8 00 00 00 00	 call	 __security_check_cookie
  007ab	48 81 c4 f8 07
	00 00		 add	 rsp, 2040		; 000007f8H
  007b2	5f		 pop	 rdi
  007b3	5e		 pop	 rsi
  007b4	c3		 ret	 0
BuildSyntaxTree ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
tv87 = 32
lang$ = 64
cxt$ = 72
statement$ = 80
op$ = 88
PushOperand PROC

; 499  : {

$LN9:
  00000	44 88 4c 24 20	 mov	 BYTE PTR [rsp+32], r9b
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 38	 sub	 rsp, 56			; 00000038H
$LN2@PushOperan:

; 500  :     while (cxt->oCount!=-1
; 501  :            && IsBiggerOrEqPred(lang->opStk[cxt->oCount], op))

  00018	48 8b 44 24 48	 mov	 rax, QWORD PTR cxt$[rsp]
  0001d	83 38 ff	 cmp	 DWORD PTR [rax], -1
  00020	74 3f		 je	 SHORT $LN3@PushOperan
  00022	48 8b 44 24 48	 mov	 rax, QWORD PTR cxt$[rsp]
  00027	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0002a	0f b6 54 24 58	 movzx	 edx, BYTE PTR op$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lang$[rsp]
  00034	0f b6 8c 01 d0
	22 0b 00	 movzx	 ecx, BYTE PTR [rcx+rax+729808]
  0003c	e8 00 00 00 00	 call	 IsBiggerOrEqPred
  00041	85 c0		 test	 eax, eax
  00043	74 1c		 je	 SHORT $LN3@PushOperan

; 502  :     {
; 503  :         if (!PopOperand(lang, cxt, statement))

  00045	4c 8b 44 24 50	 mov	 r8, QWORD PTR statement$[rsp]
  0004a	48 8b 54 24 48	 mov	 rdx, QWORD PTR cxt$[rsp]
  0004f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lang$[rsp]
  00054	e8 00 00 00 00	 call	 PopOperand
  00059	85 c0		 test	 eax, eax
  0005b	75 02		 jne	 SHORT $LN4@PushOperan

; 504  :         {
; 505  :             break;

  0005d	eb 02		 jmp	 SHORT $LN3@PushOperan
$LN4@PushOperan:

; 506  :         }
; 507  :     }

  0005f	eb b7		 jmp	 SHORT $LN2@PushOperan
$LN3@PushOperan:

; 508  :     if (op !=OP_CBRAK
; 509  :         && op!=OP_COMMA)

  00061	0f be 44 24 58	 movsx	 eax, BYTE PTR op$[rsp]
  00066	83 f8 16	 cmp	 eax, 22
  00069	74 3a		 je	 SHORT $LN5@PushOperan
  0006b	0f be 44 24 58	 movsx	 eax, BYTE PTR op$[rsp]
  00070	83 f8 17	 cmp	 eax, 23
  00073	74 30		 je	 SHORT $LN5@PushOperan

; 510  :     {
; 511  :         lang->opStk[++cxt->oCount] =op;

  00075	48 8b 44 24 48	 mov	 rax, QWORD PTR cxt$[rsp]
  0007a	8b 00		 mov	 eax, DWORD PTR [rax]
  0007c	ff c0		 inc	 eax
  0007e	89 44 24 20	 mov	 DWORD PTR tv87[rsp], eax
  00082	48 8b 44 24 48	 mov	 rax, QWORD PTR cxt$[rsp]
  00087	8b 4c 24 20	 mov	 ecx, DWORD PTR tv87[rsp]
  0008b	89 08		 mov	 DWORD PTR [rax], ecx
  0008d	48 63 44 24 20	 movsxd	 rax, DWORD PTR tv87[rsp]
  00092	48 8b 4c 24 40	 mov	 rcx, QWORD PTR lang$[rsp]
  00097	0f b6 54 24 58	 movzx	 edx, BYTE PTR op$[rsp]
  0009c	88 94 01 d0 22
	0b 00		 mov	 BYTE PTR [rcx+rax+729808], dl

; 512  :     }

  000a3	eb 1a		 jmp	 SHORT $LN6@PushOperan
$LN5@PushOperan:

; 513  :     else if (op ==OP_CBRAK)

  000a5	0f be 44 24 58	 movsx	 eax, BYTE PTR op$[rsp]
  000aa	83 f8 16	 cmp	 eax, 22
  000ad	75 10		 jne	 SHORT $LN7@PushOperan

; 514  :     {
; 515  :         --cxt->oCount;

  000af	48 8b 44 24 48	 mov	 rax, QWORD PTR cxt$[rsp]
  000b4	8b 00		 mov	 eax, DWORD PTR [rax]
  000b6	ff c8		 dec	 eax
  000b8	48 8b 4c 24 48	 mov	 rcx, QWORD PTR cxt$[rsp]
  000bd	89 01		 mov	 DWORD PTR [rcx], eax
$LN7@PushOperan:
$LN6@PushOperan:

; 516  :     }
; 517  : }

  000bf	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000c3	c3		 ret	 0
PushOperand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
op1$ = 48
opArgCount$ = 52
result$ = 56
parent$ = 64
lang$ = 96
cxt$ = 104
statement$ = 112
PopOperand PROC

; 480  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 481  :     _bool result;
; 482  :     
; 483  :     char op1 =lang->opStk[cxt->oCount--];

  00013	48 8b 44 24 68	 mov	 rax, QWORD PTR cxt$[rsp]
  00018	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  0001b	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  00020	0f b6 84 01 d0
	22 0b 00	 movzx	 eax, BYTE PTR [rcx+rax+729808]
  00028	88 44 24 30	 mov	 BYTE PTR op1$[rsp], al
  0002c	48 8b 44 24 68	 mov	 rax, QWORD PTR cxt$[rsp]
  00031	8b 00		 mov	 eax, DWORD PTR [rax]
  00033	ff c8		 dec	 eax
  00035	48 8b 4c 24 68	 mov	 rcx, QWORD PTR cxt$[rsp]
  0003a	89 01		 mov	 DWORD PTR [rcx], eax

; 484  :     int opArgCount =GetOpArgCount(op1);

  0003c	0f b6 4c 24 30	 movzx	 ecx, BYTE PTR op1$[rsp]
  00041	e8 00 00 00 00	 call	 GetOpArgCount
  00046	89 44 24 34	 mov	 DWORD PTR opArgCount$[rsp], eax

; 485  :     SynTree *parent=&lang->synTrees[cxt->synTreeAllocated++];

  0004a	48 8b 44 24 68	 mov	 rax, QWORD PTR cxt$[rsp]
  0004f	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  00053	48 69 c0 28 01
	00 00		 imul	 rax, rax, 296		; 00000128H
  0005a	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  0005f	48 8d 84 01 d0
	82 06 00	 lea	 rax, QWORD PTR [rcx+rax+426704]
  00067	48 89 44 24 40	 mov	 QWORD PTR parent$[rsp], rax
  0006c	48 8b 44 24 68	 mov	 rax, QWORD PTR cxt$[rsp]
  00071	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00074	ff c0		 inc	 eax
  00076	48 8b 4c 24 68	 mov	 rcx, QWORD PTR cxt$[rsp]
  0007b	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 486  :     
; 487  :     parent->op =op1;

  0007e	0f be 44 24 30	 movsx	 eax, BYTE PTR op1$[rsp]
  00083	48 8b 4c 24 40	 mov	 rcx, QWORD PTR parent$[rsp]
  00088	89 41 18	 mov	 DWORD PTR [rcx+24], eax

; 488  :     parent->stype =ST_OP;

  0008b	48 8b 44 24 40	 mov	 rax, QWORD PTR parent$[rsp]
  00090	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 489  :     parent->children =NULL;

  00096	48 8b 44 24 40	 mov	 rax, QWORD PTR parent$[rsp]
  0009b	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 490  :     parent->next =NULL;

  000a3	48 8b 44 24 40	 mov	 rax, QWORD PTR parent$[rsp]
  000a8	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 491  :     
; 492  :     result =PopNumVars(lang, parent, cxt, statement, opArgCount);

  000b0	8b 44 24 34	 mov	 eax, DWORD PTR opArgCount$[rsp]
  000b4	89 44 24 20	 mov	 DWORD PTR [rsp+32], eax
  000b8	4c 8b 4c 24 70	 mov	 r9, QWORD PTR statement$[rsp]
  000bd	4c 8b 44 24 68	 mov	 r8, QWORD PTR cxt$[rsp]
  000c2	48 8b 54 24 40	 mov	 rdx, QWORD PTR parent$[rsp]
  000c7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  000cc	e8 00 00 00 00	 call	 PopNumVars
  000d1	89 44 24 38	 mov	 DWORD PTR result$[rsp], eax

; 493  :     
; 494  :     return result;

  000d5	8b 44 24 38	 mov	 eax, DWORD PTR result$[rsp]

; 495  : }

  000d9	48 83 c4 58	 add	 rsp, 88			; 00000058H
  000dd	c3		 ret	 0
PopOperand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
tv143 = 32
tv147 = 36
tv66 = 40
result$ = 44
child$1 = 48
tv95 = 56
lang$ = 80
parent$ = 88
cxt$ = 96
statement$ = 104
numVars$ = 112
PopNumVars PROC

; 450  : {

$LN9:
  00000	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 48	 sub	 rsp, 72			; 00000048H
$LN2@PopNumVars:

; 451  :     _bool result;
; 452  :     while (numVars--
; 453  :            && cxt->vCount!=-1)

  00018	8b 44 24 70	 mov	 eax, DWORD PTR numVars$[rsp]
  0001c	89 44 24 28	 mov	 DWORD PTR tv66[rsp], eax
  00020	8b 44 24 70	 mov	 eax, DWORD PTR numVars$[rsp]
  00024	ff c8		 dec	 eax
  00026	89 44 24 70	 mov	 DWORD PTR numVars$[rsp], eax
  0002a	83 7c 24 28 00	 cmp	 DWORD PTR tv66[rsp], 0
  0002f	0f 84 20 01 00
	00		 je	 $LN3@PopNumVars
  00035	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  0003a	83 78 04 ff	 cmp	 DWORD PTR [rax+4], -1
  0003e	0f 84 11 01 00
	00		 je	 $LN3@PopNumVars

; 454  :     {
; 455  :         SynTree *child;
; 456  :         if (lang->varStk[cxt->vCount].vtype !=VT_SYNTREE)

  00044	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  00049	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  0004d	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  00054	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lang$[rsp]
  00059	83 bc 01 d0 26
	0b 00 02	 cmp	 DWORD PTR [rcx+rax+730832], 2
  00061	0f 84 a6 00 00
	00		 je	 $LN4@PopNumVars

; 457  :         {
; 458  :             child =&lang->synTrees[cxt->synTreeAllocated++];

  00067	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  0006c	48 63 40 0c	 movsxd	 rax, DWORD PTR [rax+12]
  00070	48 69 c0 28 01
	00 00		 imul	 rax, rax, 296		; 00000128H
  00077	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lang$[rsp]
  0007c	48 8d 84 01 d0
	82 06 00	 lea	 rax, QWORD PTR [rcx+rax+426704]
  00084	48 89 44 24 30	 mov	 QWORD PTR child$1[rsp], rax
  00089	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  0008e	8b 40 0c	 mov	 eax, DWORD PTR [rax+12]
  00091	ff c0		 inc	 eax
  00093	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cxt$[rsp]
  00098	89 41 0c	 mov	 DWORD PTR [rcx+12], eax

; 459  :             child->children =NULL;

  0009b	48 8b 44 24 30	 mov	 rax, QWORD PTR child$1[rsp]
  000a0	48 c7 40 10 00
	00 00 00	 mov	 QWORD PTR [rax+16], 0

; 460  :             child->next=NULL;

  000a8	48 8b 44 24 30	 mov	 rax, QWORD PTR child$1[rsp]
  000ad	48 c7 40 08 00
	00 00 00	 mov	 QWORD PTR [rax+8], 0

; 461  :             child->stype =ST_VAR;

  000b5	48 8b 44 24 30	 mov	 rax, QWORD PTR child$1[rsp]
  000ba	c7 00 01 00 00
	00		 mov	 DWORD PTR [rax], 1

; 462  :             CopyVar(&child->var, &lang->varStk[cxt->vCount--]);

  000c0	48 8b 44 24 50	 mov	 rax, QWORD PTR lang$[rsp]
  000c5	48 05 d0 26 0b
	00		 add	 rax, 730832		; 000b26d0H
  000cb	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cxt$[rsp]
  000d0	48 63 49 04	 movsxd	 rcx, DWORD PTR [rcx+4]
  000d4	48 69 c9 10 01
	00 00		 imul	 rcx, rcx, 272		; 00000110H
  000db	48 03 c1	 add	 rax, rcx
  000de	48 89 44 24 38	 mov	 QWORD PTR tv95[rsp], rax
  000e3	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  000e8	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  000eb	ff c8		 dec	 eax
  000ed	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cxt$[rsp]
  000f2	89 41 04	 mov	 DWORD PTR [rcx+4], eax
  000f5	48 8b 44 24 30	 mov	 rax, QWORD PTR child$1[rsp]
  000fa	48 83 c0 18	 add	 rax, 24
  000fe	48 8b 54 24 38	 mov	 rdx, QWORD PTR tv95[rsp]
  00103	48 8b c8	 mov	 rcx, rax
  00106	e8 00 00 00 00	 call	 CopyVar

; 463  :         }

  0010b	eb 34		 jmp	 SHORT $LN5@PopNumVars
$LN4@PopNumVars:

; 464  :         else
; 465  :         {
; 466  :             child =(SynTree *)lang->varStk[cxt->vCount--].synTree;

  0010d	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  00112	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  00116	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  0011d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lang$[rsp]
  00122	48 8b 84 01 d8
	26 0b 00	 mov	 rax, QWORD PTR [rcx+rax+730840]
  0012a	48 89 44 24 30	 mov	 QWORD PTR child$1[rsp], rax
  0012f	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  00134	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  00137	ff c8		 dec	 eax
  00139	48 8b 4c 24 60	 mov	 rcx, QWORD PTR cxt$[rsp]
  0013e	89 41 04	 mov	 DWORD PTR [rcx+4], eax
$LN5@PopNumVars:

; 467  :         }
; 468  :         AddSynTreeChild(parent, child);

  00141	48 8b 54 24 30	 mov	 rdx, QWORD PTR child$1[rsp]
  00146	48 8b 4c 24 58	 mov	 rcx, QWORD PTR parent$[rsp]
  0014b	e8 00 00 00 00	 call	 AddSynTreeChild

; 469  :     }

  00150	e9 c3 fe ff ff	 jmp	 $LN2@PopNumVars
$LN3@PopNumVars:

; 470  :     result =numVars==-1;

  00155	83 7c 24 70 ff	 cmp	 DWORD PTR numVars$[rsp], -1
  0015a	75 0a		 jne	 SHORT $LN7@PopNumVars
  0015c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv143[rsp], 1
  00164	eb 08		 jmp	 SHORT $LN8@PopNumVars
$LN7@PopNumVars:
  00166	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv143[rsp], 0
$LN8@PopNumVars:
  0016e	8b 44 24 20	 mov	 eax, DWORD PTR tv143[rsp]
  00172	89 44 24 2c	 mov	 DWORD PTR result$[rsp], eax

; 471  :     
; 472  :     lang->varStk[++cxt->vCount].synTree =(void *)parent;

  00176	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  0017b	8b 40 04	 mov	 eax, DWORD PTR [rax+4]
  0017e	ff c0		 inc	 eax
  00180	89 44 24 24	 mov	 DWORD PTR tv147[rsp], eax
  00184	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  00189	8b 4c 24 24	 mov	 ecx, DWORD PTR tv147[rsp]
  0018d	89 48 04	 mov	 DWORD PTR [rax+4], ecx
  00190	48 63 44 24 24	 movsxd	 rax, DWORD PTR tv147[rsp]
  00195	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  0019c	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lang$[rsp]
  001a1	48 8b 54 24 58	 mov	 rdx, QWORD PTR parent$[rsp]
  001a6	48 89 94 01 d8
	26 0b 00	 mov	 QWORD PTR [rcx+rax+730840], rdx

; 473  :     lang->varStk[cxt->vCount].vtype =VT_SYNTREE;

  001ae	48 8b 44 24 60	 mov	 rax, QWORD PTR cxt$[rsp]
  001b3	48 63 40 04	 movsxd	 rax, DWORD PTR [rax+4]
  001b7	48 69 c0 10 01
	00 00		 imul	 rax, rax, 272		; 00000110H
  001be	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lang$[rsp]
  001c3	c7 84 01 d0 26
	0b 00 02 00 00
	00		 mov	 DWORD PTR [rcx+rax+730832], 2

; 474  :     
; 475  :     return result;

  001ce	8b 44 24 2c	 mov	 eax, DWORD PTR result$[rsp]

; 476  : }

  001d2	48 83 c4 48	 add	 rsp, 72			; 00000048H
  001d6	c3		 ret	 0
PopNumVars ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
result$ = 32
opChars$ = 40
c$ = 64
GetSyntaxHint PROC

; 425  : {

$LN9:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 426  :     char *opChars ="!:=-+*/^&|()<>.-,";

  00008	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG38855
  0000f	48 89 44 24 28	 mov	 QWORD PTR opChars$[rsp], rax

; 427  :     int result=H_NONE;

  00014	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 428  :     if (c >= '0'
; 429  :         && c <= '9')

  0001c	0f be 44 24 40	 movsx	 eax, BYTE PTR c$[rsp]
  00021	83 f8 30	 cmp	 eax, 48			; 00000030H
  00024	7c 14		 jl	 SHORT $LN2@GetSyntaxH
  00026	0f be 44 24 40	 movsx	 eax, BYTE PTR c$[rsp]
  0002b	83 f8 39	 cmp	 eax, 57			; 00000039H
  0002e	7f 0a		 jg	 SHORT $LN2@GetSyntaxH

; 430  :     {
; 431  :         result=H_CONST;

  00030	c7 44 24 20 03
	00 00 00	 mov	 DWORD PTR result$[rsp], 3

; 432  :     }

  00038	eb 39		 jmp	 SHORT $LN3@GetSyntaxH
$LN2@GetSyntaxH:

; 433  :     else if (c == ' ')

  0003a	0f be 44 24 40	 movsx	 eax, BYTE PTR c$[rsp]
  0003f	83 f8 20	 cmp	 eax, 32			; 00000020H
  00042	75 0a		 jne	 SHORT $LN4@GetSyntaxH

; 434  :     {
; 435  :         result=H_WSPACE;

  00044	c7 44 24 20 04
	00 00 00	 mov	 DWORD PTR result$[rsp], 4

; 436  :     }

  0004c	eb 25		 jmp	 SHORT $LN5@GetSyntaxH
$LN4@GetSyntaxH:

; 437  :     else if (CharInStr(opChars, c))

  0004e	0f b6 54 24 40	 movzx	 edx, BYTE PTR c$[rsp]
  00053	48 8b 4c 24 28	 mov	 rcx, QWORD PTR opChars$[rsp]
  00058	e8 00 00 00 00	 call	 CharInStr
  0005d	85 c0		 test	 eax, eax
  0005f	74 0a		 je	 SHORT $LN6@GetSyntaxH

; 438  :     {
; 439  :         result =H_OP;

  00061	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1

; 440  :     }

  00069	eb 08		 jmp	 SHORT $LN7@GetSyntaxH
$LN6@GetSyntaxH:

; 441  :     else
; 442  :     {
; 443  :         result=H_VAR;

  0006b	c7 44 24 20 02
	00 00 00	 mov	 DWORD PTR result$[rsp], 2
$LN7@GetSyntaxH:
$LN5@GetSyntaxH:
$LN3@GetSyntaxH:

; 444  :     }
; 445  :     return result;

  00073	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 446  : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
GetSyntaxHint ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
offset$ = 0
tv70 = 4
statement$ = 32
offs$ = 40
EatWhitespace PROC

; 417  : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 418  :     int offset =*offs;

  0000e	48 8b 44 24 28	 mov	 rax, QWORD PTR offs$[rsp]
  00013	8b 00		 mov	 eax, DWORD PTR [rax]
  00015	89 04 24	 mov	 DWORD PTR offset$[rsp], eax
$LN2@EatWhitesp:

; 419  :     while (statement[offset++] ==' ');

  00018	48 63 04 24	 movsxd	 rax, DWORD PTR offset$[rsp]
  0001c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR statement$[rsp]
  00021	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00025	89 44 24 04	 mov	 DWORD PTR tv70[rsp], eax
  00029	8b 04 24	 mov	 eax, DWORD PTR offset$[rsp]
  0002c	ff c0		 inc	 eax
  0002e	89 04 24	 mov	 DWORD PTR offset$[rsp], eax
  00031	83 7c 24 04 20	 cmp	 DWORD PTR tv70[rsp], 32	; 00000020H
  00036	75 02		 jne	 SHORT $LN3@EatWhitesp
  00038	eb de		 jmp	 SHORT $LN2@EatWhitesp
$LN3@EatWhitesp:

; 420  :     *offs =offset-1;

  0003a	8b 04 24	 mov	 eax, DWORD PTR offset$[rsp]
  0003d	ff c8		 dec	 eax
  0003f	48 8b 4c 24 28	 mov	 rcx, QWORD PTR offs$[rsp]
  00044	89 01		 mov	 DWORD PTR [rcx], eax

; 421  : }

  00046	48 83 c4 18	 add	 rsp, 24
  0004a	c3		 ret	 0
EatWhitespace ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
offset$ = 32
c$ = 36
illegal$ = 40
result$ = 48
__$ReturnAddress$ = 368
statement$ = 376
offs$ = 384
cOffset$ = 392
CosumeVariable PROC

; 385  : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H

; 386  :     VarResult result={ .var.vtype =VT_VAR };

  0001d	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  0002d	48 8d 44 24 40	 lea	 rax, QWORD PTR result$[rsp+16]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 08 01 00 00	 mov	 ecx, 264		; 00000108H
  0003c	f3 aa		 rep stosb

; 387  :     
; 388  :     char *illegal=" =-+*$#@!^&():\'\"<>?,./;\\|}{[]-";

  0003e	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG38840
  00045	48 89 44 24 28	 mov	 QWORD PTR illegal$[rsp], rax

; 389  :     int offset =*offs;

  0004a	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR offs$[rsp]
  00052	8b 00		 mov	 eax, DWORD PTR [rax]
  00054	89 44 24 20	 mov	 DWORD PTR offset$[rsp], eax

; 390  :     int c=0;

  00058	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR c$[rsp], 0
$LN2@CosumeVari:

; 391  :     
; 392  :     while (cOffset !=offset
; 393  :            && statement[offset]
; 394  :            && !CharInStr(illegal, statement[offset]))

  00060	8b 44 24 20	 mov	 eax, DWORD PTR offset$[rsp]
  00064	39 84 24 88 01
	00 00		 cmp	 DWORD PTR cOffset$[rsp], eax
  0006b	74 64		 je	 SHORT $LN3@CosumeVari
  0006d	48 63 44 24 20	 movsxd	 rax, DWORD PTR offset$[rsp]
  00072	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  0007a	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0007e	85 c0		 test	 eax, eax
  00080	74 4f		 je	 SHORT $LN3@CosumeVari
  00082	48 63 44 24 20	 movsxd	 rax, DWORD PTR offset$[rsp]
  00087	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  0008f	0f b6 14 01	 movzx	 edx, BYTE PTR [rcx+rax]
  00093	48 8b 4c 24 28	 mov	 rcx, QWORD PTR illegal$[rsp]
  00098	e8 00 00 00 00	 call	 CharInStr
  0009d	85 c0		 test	 eax, eax
  0009f	75 30		 jne	 SHORT $LN3@CosumeVari

; 395  :     {
; 396  :         result.var.varName[c++] =statement[offset++];

  000a1	48 63 44 24 20	 movsxd	 rax, DWORD PTR offset$[rsp]
  000a6	48 63 4c 24 24	 movsxd	 rcx, DWORD PTR c$[rsp]
  000ab	48 8b 94 24 78
	01 00 00	 mov	 rdx, QWORD PTR statement$[rsp]
  000b3	0f b6 04 02	 movzx	 eax, BYTE PTR [rdx+rax]
  000b7	88 44 0c 40	 mov	 BYTE PTR result$[rsp+rcx+16], al
  000bb	8b 44 24 24	 mov	 eax, DWORD PTR c$[rsp]
  000bf	ff c0		 inc	 eax
  000c1	89 44 24 24	 mov	 DWORD PTR c$[rsp], eax
  000c5	8b 44 24 20	 mov	 eax, DWORD PTR offset$[rsp]
  000c9	ff c0		 inc	 eax
  000cb	89 44 24 20	 mov	 DWORD PTR offset$[rsp], eax

; 397  :     }

  000cf	eb 8f		 jmp	 SHORT $LN2@CosumeVari
$LN3@CosumeVari:

; 398  :     result.var.varName[c]='\0';

  000d1	48 63 44 24 24	 movsxd	 rax, DWORD PTR c$[rsp]
  000d6	c6 44 04 40 00	 mov	 BYTE PTR result$[rsp+rax+16], 0

; 399  :     
; 400  :     if (offset == *offs)

  000db	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR offs$[rsp]
  000e3	8b 00		 mov	 eax, DWORD PTR [rax]
  000e5	39 44 24 20	 cmp	 DWORD PTR offset$[rsp], eax
  000e9	75 2a		 jne	 SHORT $LN4@CosumeVari

; 401  :     {
; 402  :         result.success =0;

  000eb	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 403  :         result.err.type = ERR_VAR;

  000f3	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 1

; 404  :         result.err.loc =&statement[offset];

  000fb	48 63 44 24 20	 movsxd	 rax, DWORD PTR offset$[rsp]
  00100	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  00108	48 03 c8	 add	 rcx, rax
  0010b	48 8b c1	 mov	 rax, rcx
  0010e	48 89 44 24 38	 mov	 QWORD PTR result$[rsp+8], rax

; 405  :     }

  00113	eb 16		 jmp	 SHORT $LN5@CosumeVari
$LN4@CosumeVari:

; 406  :     else
; 407  :     {
; 408  :         *offs =offset;

  00115	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR offs$[rsp]
  0011d	8b 4c 24 20	 mov	 ecx, DWORD PTR offset$[rsp]
  00121	89 08		 mov	 DWORD PTR [rax], ecx

; 409  :         result.success =1;

  00123	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
$LN5@CosumeVari:

; 410  :     }
; 411  :     
; 412  :     return result;

  0012b	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00130	48 8b bc 24 70
	01 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00138	48 8b f0	 mov	 rsi, rax
  0013b	b9 18 01 00 00	 mov	 ecx, 280		; 00000118H
  00140	f3 a4		 rep movsb
  00142	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 413  : }

  0014a	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00151	5f		 pop	 rdi
  00152	5e		 pop	 rsi
  00153	c3		 ret	 0
CosumeVariable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
tv72 = 0
result$ = 4
str$ = 32
c$ = 40
CharInStr PROC

; 373  : {

$LN7:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 18	 sub	 rsp, 24
$LN2@CharInStr:

; 374  :     while (*str
; 375  :            && *str !=c)

  0000d	48 8b 44 24 20	 mov	 rax, QWORD PTR str$[rsp]
  00012	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00015	85 c0		 test	 eax, eax
  00017	74 20		 je	 SHORT $LN3@CharInStr
  00019	48 8b 44 24 20	 mov	 rax, QWORD PTR str$[rsp]
  0001e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00021	0f be 4c 24 28	 movsx	 ecx, BYTE PTR c$[rsp]
  00026	3b c1		 cmp	 eax, ecx
  00028	74 0f		 je	 SHORT $LN3@CharInStr

; 376  :     {
; 377  :         str++;

  0002a	48 8b 44 24 20	 mov	 rax, QWORD PTR str$[rsp]
  0002f	48 ff c0	 inc	 rax
  00032	48 89 44 24 20	 mov	 QWORD PTR str$[rsp], rax

; 378  :     }

  00037	eb d4		 jmp	 SHORT $LN2@CharInStr
$LN3@CharInStr:

; 379  :     _bool result =(*str !='\0');

  00039	48 8b 44 24 20	 mov	 rax, QWORD PTR str$[rsp]
  0003e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00041	85 c0		 test	 eax, eax
  00043	74 09		 je	 SHORT $LN5@CharInStr
  00045	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv72[rsp], 1
  0004c	eb 07		 jmp	 SHORT $LN6@CharInStr
$LN5@CharInStr:
  0004e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv72[rsp], 0
$LN6@CharInStr:
  00055	8b 04 24	 mov	 eax, DWORD PTR tv72[rsp]
  00058	89 44 24 04	 mov	 DWORD PTR result$[rsp], eax

; 380  :     return result;

  0005c	8b 44 24 04	 mov	 eax, DWORD PTR result$[rsp]

; 381  : }

  00060	48 83 c4 18	 add	 rsp, 24
  00064	c3		 ret	 0
CharInStr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
endptr$ = 32
result$ = 48
__$ReturnAddress$ = 368
statement$ = 376
offs$ = 384
CosumeConstant PROC

; 353  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 58 01
	00 00		 sub	 rsp, 344		; 00000158H

; 354  :     VarResult result ={.var.vtype =VT_CONST, .var._const.type=TREAL };

  00018	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
  00020	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1
  00028	c7 44 24 40 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 12
  00030	c6 44 24 48 00	 mov	 BYTE PTR result$[rsp+24], 0
  00035	48 8d 44 24 49	 lea	 rax, QWORD PTR result$[rsp+25]
  0003a	48 8b f8	 mov	 rdi, rax
  0003d	33 c0		 xor	 eax, eax
  0003f	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00044	f3 aa		 rep stosb
  00046	48 8d 84 24 c8
	00 00 00	 lea	 rax, QWORD PTR result$[rsp+152]
  0004e	48 8b f8	 mov	 rdi, rax
  00051	33 c0		 xor	 eax, eax
  00053	b9 80 00 00 00	 mov	 ecx, 128		; 00000080H
  00058	f3 aa		 rep stosb

; 355  :     char *endptr;
; 356  :     result.var._const.real =strtod(&statement[*offs], &endptr);

  0005a	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR offs$[rsp]
  00062	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  00065	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  0006d	48 03 c8	 add	 rcx, rax
  00070	48 8b c1	 mov	 rax, rcx
  00073	48 8d 54 24 20	 lea	 rdx, QWORD PTR endptr$[rsp]
  00078	48 8b c8	 mov	 rcx, rax
  0007b	e8 00 00 00 00	 call	 strtod
  00080	f2 0f 11 44 24
	48		 movsd	 QWORD PTR result$[rsp+24], xmm0

; 357  :     if (statement==endptr)

  00086	48 8b 44 24 20	 mov	 rax, QWORD PTR endptr$[rsp]
  0008b	48 39 84 24 78
	01 00 00	 cmp	 QWORD PTR statement$[rsp], rax
  00093	75 1f		 jne	 SHORT $LN2@CosumeCons

; 358  :     {
; 359  :         result.success =0;

  00095	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0

; 360  :         result.err.type =ERR_CONST;

  0009d	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR result$[rsp+16], 0

; 361  :         result.err.loc =statement;

  000a5	48 8b 84 24 78
	01 00 00	 mov	 rax, QWORD PTR statement$[rsp]
  000ad	48 89 44 24 38	 mov	 QWORD PTR result$[rsp+8], rax

; 362  :     }

  000b2	eb 47		 jmp	 SHORT $LN3@CosumeCons
$LN2@CosumeCons:

; 363  :     else
; 364  :     {
; 365  :         result.success =1;

  000b4	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1

; 366  :         *offs += endptr-&statement[*offs];

  000bc	48 8b 84 24 80
	01 00 00	 mov	 rax, QWORD PTR offs$[rsp]
  000c4	48 63 00	 movsxd	 rax, DWORD PTR [rax]
  000c7	48 8b 8c 24 78
	01 00 00	 mov	 rcx, QWORD PTR statement$[rsp]
  000cf	48 03 c8	 add	 rcx, rax
  000d2	48 8b c1	 mov	 rax, rcx
  000d5	48 8b 4c 24 20	 mov	 rcx, QWORD PTR endptr$[rsp]
  000da	48 2b c8	 sub	 rcx, rax
  000dd	48 8b c1	 mov	 rax, rcx
  000e0	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR offs$[rsp]
  000e8	48 63 09	 movsxd	 rcx, DWORD PTR [rcx]
  000eb	48 03 c8	 add	 rcx, rax
  000ee	48 8b c1	 mov	 rax, rcx
  000f1	48 8b 8c 24 80
	01 00 00	 mov	 rcx, QWORD PTR offs$[rsp]
  000f9	89 01		 mov	 DWORD PTR [rcx], eax
$LN3@CosumeCons:

; 367  :     }
; 368  :     return result;

  000fb	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00100	48 8b bc 24 70
	01 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 18 01 00 00	 mov	 ecx, 280		; 00000118H
  00110	f3 a4		 rep movsb
  00112	48 8b 84 24 70
	01 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 369  : }

  0011a	48 81 c4 58 01
	00 00		 add	 rsp, 344		; 00000158H
  00121	5f		 pop	 rdi
  00122	5e		 pop	 rsi
  00123	c3		 ret	 0
CosumeConstant ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
tv69 = 32
tv64 = 36
result$ = 40
op0$ = 64
op1$ = 72
IsBiggerOrEqPred PROC

; 346  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00008	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 347  :     _bool result =(GetOpPred(op0) >=GetOpPred2(op1));

  0000c	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR op0$[rsp]
  00011	e8 00 00 00 00	 call	 GetOpPred
  00016	89 44 24 24	 mov	 DWORD PTR tv64[rsp], eax
  0001a	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR op1$[rsp]
  0001f	e8 00 00 00 00	 call	 GetOpPred2
  00024	8b 4c 24 24	 mov	 ecx, DWORD PTR tv64[rsp]
  00028	3b c8		 cmp	 ecx, eax
  0002a	7c 0a		 jl	 SHORT $LN3@IsBiggerOr
  0002c	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR tv69[rsp], 1
  00034	eb 08		 jmp	 SHORT $LN4@IsBiggerOr
$LN3@IsBiggerOr:
  00036	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR tv69[rsp], 0
$LN4@IsBiggerOr:
  0003e	8b 44 24 20	 mov	 eax, DWORD PTR tv69[rsp]
  00042	89 44 24 28	 mov	 DWORD PTR result$[rsp], eax

; 348  :     return result;

  00046	8b 44 24 28	 mov	 eax, DWORD PTR result$[rsp]

; 349  : }

  0004a	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0004e	c3		 ret	 0
IsBiggerOrEqPred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
result$ = 0
op$ = 32
GetOpArgCount PROC

; 337  : {

$LN3:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 18	 sub	 rsp, 24

; 338  :     int result;
; 339  :     result=2;

  00008	c7 04 24 02 00
	00 00		 mov	 DWORD PTR result$[rsp], 2

; 340  :     
; 341  :     return result;

  0000f	8b 04 24	 mov	 eax, DWORD PTR result$[rsp]

; 342  : }

  00012	48 83 c4 18	 add	 rsp, 24
  00016	c3		 ret	 0
GetOpArgCount ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
result$ = 32
tv65 = 36
op2$ = 64
GetOpPred2 PROC

; 308  : {

$LN11:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 309  :     int result;
; 310  :     switch (op2)

  00008	0f b6 44 24 40	 movzx	 eax, BYTE PTR op2$[rsp]
  0000d	88 44 24 24	 mov	 BYTE PTR tv65[rsp], al
  00011	80 7c 24 24 05	 cmp	 BYTE PTR tv65[rsp], 5
  00016	74 3c		 je	 SHORT $LN8@GetOpPred2
  00018	80 7c 24 24 14	 cmp	 BYTE PTR tv65[rsp], 20
  0001d	74 21		 je	 SHORT $LN5@GetOpPred2
  0001f	80 7c 24 24 15	 cmp	 BYTE PTR tv65[rsp], 21
  00024	74 10		 je	 SHORT $LN4@GetOpPred2
  00026	80 7c 24 24 16	 cmp	 BYTE PTR tv65[rsp], 22
  0002b	74 1d		 je	 SHORT $LN7@GetOpPred2
  0002d	80 7c 24 24 17	 cmp	 BYTE PTR tv65[rsp], 23
  00032	74 0c		 je	 SHORT $LN6@GetOpPred2
  00034	eb 38		 jmp	 SHORT $LN9@GetOpPred2
$LN4@GetOpPred2:

; 311  :     {
; 312  :         case OP_OBRAK:
; 313  :         result =13;

  00036	c7 44 24 20 0d
	00 00 00	 mov	 DWORD PTR result$[rsp], 13

; 314  :         break;

  0003e	eb 3c		 jmp	 SHORT $LN2@GetOpPred2
$LN5@GetOpPred2:
$LN6@GetOpPred2:

; 315  :         case OP_FUNC:
; 316  :         case OP_COMMA:
; 317  :         result =12;

  00040	c7 44 24 20 0c
	00 00 00	 mov	 DWORD PTR result$[rsp], 12

; 318  :         break;

  00048	eb 32		 jmp	 SHORT $LN2@GetOpPred2
$LN7@GetOpPred2:

; 319  :         
; 320  :         case OP_CBRAK:
; 321  :         result=1;

  0004a	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1

; 322  :         break;

  00052	eb 28		 jmp	 SHORT $LN2@GetOpPred2
$LN8@GetOpPred2:

; 323  :         
; 324  :         case OP_PWR:
; 325  :         result=GetOpPred(op2);

  00054	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR op2$[rsp]
  00059	e8 00 00 00 00	 call	 GetOpPred
  0005e	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 326  :         result++;

  00062	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]
  00066	ff c0		 inc	 eax
  00068	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 327  :         break;

  0006c	eb 0e		 jmp	 SHORT $LN2@GetOpPred2
$LN9@GetOpPred2:

; 328  :         
; 329  :         default:
; 330  :         result=GetOpPred(op2);

  0006e	0f b6 4c 24 40	 movzx	 ecx, BYTE PTR op2$[rsp]
  00073	e8 00 00 00 00	 call	 GetOpPred
  00078	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax
$LN2@GetOpPred2:

; 331  :         break;
; 332  :     }
; 333  :     return result;

  0007c	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 334  : }

  00080	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00084	c3		 ret	 0
GetOpPred2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
result$ = 0
tv65 = 4
op$ = 32
GetOpPred PROC

; 271  : {

$LN26:
  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl
  00004	48 83 ec 18	 sub	 rsp, 24

; 272  :     int result;
; 273  :     switch (op)

  00008	0f be 44 24 20	 movsx	 eax, BYTE PTR op$[rsp]
  0000d	89 44 24 04	 mov	 DWORD PTR tv65[rsp], eax
  00011	8b 44 24 04	 mov	 eax, DWORD PTR tv65[rsp]
  00015	ff c8		 dec	 eax
  00017	89 44 24 04	 mov	 DWORD PTR tv65[rsp], eax
  0001b	83 7c 24 04 14	 cmp	 DWORD PTR tv65[rsp], 20
  00020	0f 87 8b 00 00
	00		 ja	 $LN2@GetOpPred
  00026	48 63 44 24 04	 movsxd	 rax, DWORD PTR tv65[rsp]
  0002b	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00032	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN25@GetOpPred[rcx+rax*4]
  00039	48 03 c1	 add	 rax, rcx
  0003c	ff e0		 jmp	 rax
$LN4@GetOpPred:

; 274  :     {
; 275  :         case OP_FUNC: result =0; break;

  0003e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR result$[rsp], 0
  00045	eb 6a		 jmp	 SHORT $LN2@GetOpPred
$LN5@GetOpPred:

; 276  :         case OP_OBRAK: result =0;break;

  00047	c7 04 24 00 00
	00 00		 mov	 DWORD PTR result$[rsp], 0
  0004e	eb 61		 jmp	 SHORT $LN2@GetOpPred
$LN6@GetOpPred:

; 277  :         case OP_ASG: result=1;break;

  00050	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  00057	eb 58		 jmp	 SHORT $LN2@GetOpPred
$LN7@GetOpPred:

; 278  :         
; 279  :         case OP_OR: result =2;break;

  00059	c7 04 24 02 00
	00 00		 mov	 DWORD PTR result$[rsp], 2
  00060	eb 4f		 jmp	 SHORT $LN2@GetOpPred
$LN8@GetOpPred:

; 280  :         case OP_AND: result =3; break;

  00062	c7 04 24 03 00
	00 00		 mov	 DWORD PTR result$[rsp], 3
  00069	eb 46		 jmp	 SHORT $LN2@GetOpPred
$LN9@GetOpPred:

; 281  :         case OP_BOR: result =4; break;

  0006b	c7 04 24 04 00
	00 00		 mov	 DWORD PTR result$[rsp], 4
  00072	eb 3d		 jmp	 SHORT $LN2@GetOpPred
$LN10@GetOpPred:

; 282  :         case OP_BAND: result =5; break;

  00074	c7 04 24 05 00
	00 00		 mov	 DWORD PTR result$[rsp], 5
  0007b	eb 34		 jmp	 SHORT $LN2@GetOpPred
$LN11@GetOpPred:
$LN12@GetOpPred:

; 283  :         
; 284  :         case OP_CEQ:
; 285  :         case OP_CNEQ: result =6; break;

  0007d	c7 04 24 06 00
	00 00		 mov	 DWORD PTR result$[rsp], 6
  00084	eb 2b		 jmp	 SHORT $LN2@GetOpPred
$LN13@GetOpPred:
$LN14@GetOpPred:
$LN15@GetOpPred:
$LN16@GetOpPred:

; 286  :         
; 287  :         case OP_CMT:
; 288  :         case OP_CMTEQ:
; 289  :         case OP_CLT:
; 290  :         case OP_CLTEQ: result =7; break;

  00086	c7 04 24 07 00
	00 00		 mov	 DWORD PTR result$[rsp], 7
  0008d	eb 22		 jmp	 SHORT $LN2@GetOpPred
$LN17@GetOpPred:
$LN18@GetOpPred:

; 291  :         
; 292  :         case OP_SL:
; 293  :         case OP_SR: result =8; break;

  0008f	c7 04 24 08 00
	00 00		 mov	 DWORD PTR result$[rsp], 8
  00096	eb 19		 jmp	 SHORT $LN2@GetOpPred
$LN19@GetOpPred:
$LN20@GetOpPred:

; 294  :         
; 295  :         case OP_ADD:
; 296  :         case OP_SUB: result=9; break;

  00098	c7 04 24 09 00
	00 00		 mov	 DWORD PTR result$[rsp], 9
  0009f	eb 10		 jmp	 SHORT $LN2@GetOpPred
$LN21@GetOpPred:
$LN22@GetOpPred:

; 297  :         
; 298  :         
; 299  :         case OP_DIV:
; 300  :         case OP_MUL: result=10; break;

  000a1	c7 04 24 0a 00
	00 00		 mov	 DWORD PTR result$[rsp], 10
  000a8	eb 07		 jmp	 SHORT $LN2@GetOpPred
$LN23@GetOpPred:

; 301  :         
; 302  :         case OP_PWR: result=11; break;

  000aa	c7 04 24 0b 00
	00 00		 mov	 DWORD PTR result$[rsp], 11
$LN2@GetOpPred:

; 303  :     }
; 304  :     return result;

  000b1	8b 04 24	 mov	 eax, DWORD PTR result$[rsp]

; 305  : }

  000b4	48 83 c4 18	 add	 rsp, 24
  000b8	c3		 ret	 0
  000b9	0f 1f 00	 npad	 3
$LN25@GetOpPred:
  000bc	00 00 00 00	 DD	 $LN19@GetOpPred
  000c0	00 00 00 00	 DD	 $LN20@GetOpPred
  000c4	00 00 00 00	 DD	 $LN22@GetOpPred
  000c8	00 00 00 00	 DD	 $LN21@GetOpPred
  000cc	00 00 00 00	 DD	 $LN23@GetOpPred
  000d0	00 00 00 00	 DD	 $LN18@GetOpPred
  000d4	00 00 00 00	 DD	 $LN17@GetOpPred
  000d8	00 00 00 00	 DD	 $LN10@GetOpPred
  000dc	00 00 00 00	 DD	 $LN8@GetOpPred
  000e0	00 00 00 00	 DD	 $LN9@GetOpPred
  000e4	00 00 00 00	 DD	 $LN7@GetOpPred
  000e8	00 00 00 00	 DD	 $LN13@GetOpPred
  000ec	00 00 00 00	 DD	 $LN15@GetOpPred
  000f0	00 00 00 00	 DD	 $LN14@GetOpPred
  000f4	00 00 00 00	 DD	 $LN16@GetOpPred
  000f8	00 00 00 00	 DD	 $LN11@GetOpPred
  000fc	00 00 00 00	 DD	 $LN12@GetOpPred
  00100	00 00 00 00	 DD	 $LN2@GetOpPred
  00104	00 00 00 00	 DD	 $LN6@GetOpPred
  00108	00 00 00 00	 DD	 $LN4@GetOpPred
  0010c	00 00 00 00	 DD	 $LN5@GetOpPred
GetOpPred ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
result$ = 0
offset$ = 4
tv68 = 8
tv74 = 12
tv85 = 16
statement$ = 48
offs$ = 56
CosumeOperand PROC

; 180  : {

$LN43:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 181  :     char result=OP_NONE;

  0000e	c6 04 24 00	 mov	 BYTE PTR result$[rsp], 0

; 182  :     int offset =*offs;

  00012	48 8b 44 24 38	 mov	 rax, QWORD PTR offs$[rsp]
  00017	8b 00		 mov	 eax, DWORD PTR [rax]
  00019	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 183  :     switch (statement[offset])

  0001d	48 63 44 24 04	 movsxd	 rax, DWORD PTR offset$[rsp]
  00022	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  00027	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0002b	89 44 24 08	 mov	 DWORD PTR tv68[rsp], eax
  0002f	8b 44 24 08	 mov	 eax, DWORD PTR tv68[rsp]
  00033	83 e8 21	 sub	 eax, 33			; 00000021H
  00036	89 44 24 08	 mov	 DWORD PTR tv68[rsp], eax
  0003a	83 7c 24 08 5b	 cmp	 DWORD PTR tv68[rsp], 91	; 0000005bH
  0003f	0f 87 d2 01 00
	00		 ja	 $LN2@CosumeOper
  00045	48 63 44 24 08	 movsxd	 rax, DWORD PTR tv68[rsp]
  0004a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:__ImageBase
  00051	0f b6 84 01 00
	00 00 00	 movzx	 eax, BYTE PTR $LN41@CosumeOper[rcx+rax]
  00059	8b 84 81 00 00
	00 00		 mov	 eax, DWORD PTR $LN42@CosumeOper[rcx+rax*4]
  00060	48 03 c1	 add	 rax, rcx
  00063	ff e0		 jmp	 rax
$LN8@CosumeOper:

; 184  :     {
; 185  :         case '+': result =OP_ADD; break;

  00065	c6 04 24 01	 mov	 BYTE PTR result$[rsp], 1
  00069	e9 a9 01 00 00	 jmp	 $LN2@CosumeOper
$LN9@CosumeOper:

; 186  :         case '-': result= OP_SUB; break;

  0006e	c6 04 24 02	 mov	 BYTE PTR result$[rsp], 2
  00072	e9 a0 01 00 00	 jmp	 $LN2@CosumeOper
$LN10@CosumeOper:

; 187  :         case '*': result=OP_MUL; break;

  00077	c6 04 24 03	 mov	 BYTE PTR result$[rsp], 3
  0007b	e9 97 01 00 00	 jmp	 $LN2@CosumeOper
$LN11@CosumeOper:

; 188  :         case '/': result=OP_DIV; break;

  00080	c6 04 24 04	 mov	 BYTE PTR result$[rsp], 4
  00084	e9 8e 01 00 00	 jmp	 $LN2@CosumeOper
$LN12@CosumeOper:

; 189  :         case '^': result=OP_PWR; break;

  00089	c6 04 24 05	 mov	 BYTE PTR result$[rsp], 5
  0008d	e9 85 01 00 00	 jmp	 $LN2@CosumeOper
$LN13@CosumeOper:

; 190  :         case '<': offset++;

  00092	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  00096	ff c0		 inc	 eax
  00098	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 191  :         switch (statement[offset])

  0009c	48 63 44 24 04	 movsxd	 rax, DWORD PTR offset$[rsp]
  000a1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  000a6	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000aa	88 44 24 0c	 mov	 BYTE PTR tv74[rsp], al
  000ae	80 7c 24 0c 3c	 cmp	 BYTE PTR tv74[rsp], 60	; 0000003cH
  000b3	74 09		 je	 SHORT $LN14@CosumeOper
  000b5	80 7c 24 0c 3d	 cmp	 BYTE PTR tv74[rsp], 61	; 0000003dH
  000ba	74 08		 je	 SHORT $LN15@CosumeOper
  000bc	eb 0c		 jmp	 SHORT $LN16@CosumeOper
$LN14@CosumeOper:

; 192  :         {
; 193  :             case '<': result=OP_SR;break;

  000be	c6 04 24 06	 mov	 BYTE PTR result$[rsp], 6
  000c2	eb 14		 jmp	 SHORT $LN4@CosumeOper
$LN15@CosumeOper:

; 194  :             case '=': result=OP_CLTEQ; break;

  000c4	c6 04 24 0f	 mov	 BYTE PTR result$[rsp], 15
  000c8	eb 0e		 jmp	 SHORT $LN4@CosumeOper
$LN16@CosumeOper:

; 195  :             default: offset--; result=OP_CLT;break;

  000ca	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  000ce	ff c8		 dec	 eax
  000d0	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax
  000d4	c6 04 24 0d	 mov	 BYTE PTR result$[rsp], 13
$LN4@CosumeOper:

; 196  :         }
; 197  :         break;

  000d8	e9 3a 01 00 00	 jmp	 $LN2@CosumeOper
$LN17@CosumeOper:

; 198  :         
; 199  :         case '>':offset++;

  000dd	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  000e1	ff c0		 inc	 eax
  000e3	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 200  :         switch (statement[offset])

  000e7	48 63 44 24 04	 movsxd	 rax, DWORD PTR offset$[rsp]
  000ec	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  000f1	0f b6 04 01	 movzx	 eax, BYTE PTR [rcx+rax]
  000f5	88 44 24 10	 mov	 BYTE PTR tv85[rsp], al
  000f9	80 7c 24 10 3d	 cmp	 BYTE PTR tv85[rsp], 61	; 0000003dH
  000fe	74 0f		 je	 SHORT $LN19@CosumeOper
  00100	80 7c 24 10 3e	 cmp	 BYTE PTR tv85[rsp], 62	; 0000003eH
  00105	74 02		 je	 SHORT $LN18@CosumeOper
  00107	eb 0c		 jmp	 SHORT $LN20@CosumeOper
$LN18@CosumeOper:

; 201  :         {
; 202  :             case '>': result=OP_SL;break;

  00109	c6 04 24 07	 mov	 BYTE PTR result$[rsp], 7
  0010d	eb 14		 jmp	 SHORT $LN6@CosumeOper
$LN19@CosumeOper:

; 203  :             case '=': result=OP_CMTEQ; break;

  0010f	c6 04 24 0e	 mov	 BYTE PTR result$[rsp], 14
  00113	eb 0e		 jmp	 SHORT $LN6@CosumeOper
$LN20@CosumeOper:

; 204  :             default: offset--; result=OP_CMT;break;

  00115	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  00119	ff c8		 dec	 eax
  0011b	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax
  0011f	c6 04 24 0c	 mov	 BYTE PTR result$[rsp], 12
$LN6@CosumeOper:

; 205  :         }
; 206  :         break;

  00123	e9 ef 00 00 00	 jmp	 $LN2@CosumeOper
$LN21@CosumeOper:

; 207  :         
; 208  :         case '&':
; 209  :         if (statement[offset+1] =='&')

  00128	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  0012c	ff c0		 inc	 eax
  0012e	48 98		 cdqe
  00130	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  00135	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00139	83 f8 26	 cmp	 eax, 38			; 00000026H
  0013c	75 10		 jne	 SHORT $LN22@CosumeOper

; 210  :         {
; 211  :             result =OP_AND;

  0013e	c6 04 24 09	 mov	 BYTE PTR result$[rsp], 9

; 212  :             offset++;

  00142	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  00146	ff c0		 inc	 eax
  00148	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 213  :         }

  0014c	eb 04		 jmp	 SHORT $LN23@CosumeOper
$LN22@CosumeOper:

; 214  :         else {
; 215  :             result =OP_BAND;

  0014e	c6 04 24 08	 mov	 BYTE PTR result$[rsp], 8
$LN23@CosumeOper:

; 216  :         }
; 217  :         break;

  00152	e9 c0 00 00 00	 jmp	 $LN2@CosumeOper
$LN24@CosumeOper:

; 218  :         
; 219  :         case '|':
; 220  :         if (statement[offset+1] =='|')

  00157	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  0015b	ff c0		 inc	 eax
  0015d	48 98		 cdqe
  0015f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  00164	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00168	83 f8 7c	 cmp	 eax, 124		; 0000007cH
  0016b	75 10		 jne	 SHORT $LN25@CosumeOper

; 221  :         {
; 222  :             result =OP_OR;

  0016d	c6 04 24 0b	 mov	 BYTE PTR result$[rsp], 11

; 223  :             offset++;

  00171	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  00175	ff c0		 inc	 eax
  00177	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 224  :         }

  0017b	eb 04		 jmp	 SHORT $LN26@CosumeOper
$LN25@CosumeOper:

; 225  :         else {
; 226  :             result =OP_BOR; 

  0017d	c6 04 24 0a	 mov	 BYTE PTR result$[rsp], 10
$LN26@CosumeOper:

; 227  :         }
; 228  :         break;

  00181	e9 91 00 00 00	 jmp	 $LN2@CosumeOper
$LN27@CosumeOper:

; 229  :         case '=':
; 230  :         if (statement[offset+1] =='=')

  00186	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  0018a	ff c0		 inc	 eax
  0018c	48 98		 cdqe
  0018e	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  00193	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00197	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  0019a	75 10		 jne	 SHORT $LN28@CosumeOper

; 231  :         {
; 232  :             result =OP_CEQ;

  0019c	c6 04 24 10	 mov	 BYTE PTR result$[rsp], 16

; 233  :             offset++;

  001a0	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  001a4	ff c0		 inc	 eax
  001a6	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 234  :         }

  001aa	eb 04		 jmp	 SHORT $LN29@CosumeOper
$LN28@CosumeOper:

; 235  :         else {
; 236  :             result =OP_NONE;

  001ac	c6 04 24 00	 mov	 BYTE PTR result$[rsp], 0
$LN29@CosumeOper:

; 237  :         }
; 238  :         break;

  001b0	eb 65		 jmp	 SHORT $LN2@CosumeOper
$LN30@CosumeOper:

; 239  :         case '!':offset++;

  001b2	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  001b6	ff c0		 inc	 eax
  001b8	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 240  :         if (statement[offset] =='=')

  001bc	48 63 44 24 04	 movsxd	 rax, DWORD PTR offset$[rsp]
  001c1	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  001c6	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001ca	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  001cd	75 06		 jne	 SHORT $LN31@CosumeOper

; 241  :         {
; 242  :             result=OP_CNEQ;

  001cf	c6 04 24 11	 mov	 BYTE PTR result$[rsp], 17

; 243  :         }

  001d3	eb 04		 jmp	 SHORT $LN32@CosumeOper
$LN31@CosumeOper:

; 244  :         else {
; 245  :             result=OP_NONE;

  001d5	c6 04 24 00	 mov	 BYTE PTR result$[rsp], 0
$LN32@CosumeOper:

; 246  :         }
; 247  :         break;

  001d9	eb 3c		 jmp	 SHORT $LN2@CosumeOper
$LN33@CosumeOper:

; 248  :         case ':':
; 249  :         if (statement[offset+1] =='=')

  001db	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  001df	ff c0		 inc	 eax
  001e1	48 98		 cdqe
  001e3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR statement$[rsp]
  001e8	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  001ec	83 f8 3d	 cmp	 eax, 61			; 0000003dH
  001ef	75 10		 jne	 SHORT $LN34@CosumeOper

; 250  :         {
; 251  :             offset++;

  001f1	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  001f5	ff c0		 inc	 eax
  001f7	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax

; 252  :             result =OP_ASG;

  001fb	c6 04 24 13	 mov	 BYTE PTR result$[rsp], 19

; 253  :         }

  001ff	eb 04		 jmp	 SHORT $LN35@CosumeOper
$LN34@CosumeOper:

; 254  :         else {
; 255  :             result =OP_NONE;

  00201	c6 04 24 00	 mov	 BYTE PTR result$[rsp], 0
$LN35@CosumeOper:

; 256  :         }
; 257  :         break;

  00205	eb 10		 jmp	 SHORT $LN2@CosumeOper
$LN36@CosumeOper:

; 258  :         case '(': result=OP_OBRAK;break;

  00207	c6 04 24 15	 mov	 BYTE PTR result$[rsp], 21
  0020b	eb 0a		 jmp	 SHORT $LN2@CosumeOper
$LN37@CosumeOper:

; 259  :         case ')': result=OP_CBRAK;break;

  0020d	c6 04 24 16	 mov	 BYTE PTR result$[rsp], 22
  00211	eb 04		 jmp	 SHORT $LN2@CosumeOper
$LN38@CosumeOper:

; 260  :         case ',': result=OP_COMMA;break;

  00213	c6 04 24 17	 mov	 BYTE PTR result$[rsp], 23
$LN2@CosumeOper:

; 261  :     }
; 262  :     if (result!=OP_NONE)

  00217	0f be 04 24	 movsx	 eax, BYTE PTR result$[rsp]
  0021b	85 c0		 test	 eax, eax
  0021d	74 0a		 je	 SHORT $LN39@CosumeOper

; 263  :     {
; 264  :         offset++;

  0021f	8b 44 24 04	 mov	 eax, DWORD PTR offset$[rsp]
  00223	ff c0		 inc	 eax
  00225	89 44 24 04	 mov	 DWORD PTR offset$[rsp], eax
$LN39@CosumeOper:

; 265  :     }
; 266  :     *offs=offset;

  00229	48 8b 44 24 38	 mov	 rax, QWORD PTR offs$[rsp]
  0022e	8b 4c 24 04	 mov	 ecx, DWORD PTR offset$[rsp]
  00232	89 08		 mov	 DWORD PTR [rax], ecx

; 267  :     return result;

  00234	0f b6 04 24	 movzx	 eax, BYTE PTR result$[rsp]

; 268  : }

  00238	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0023c	c3		 ret	 0
  0023d	0f 1f 00	 npad	 3
$LN42@CosumeOper:
  00240	00 00 00 00	 DD	 $LN30@CosumeOper
  00244	00 00 00 00	 DD	 $LN21@CosumeOper
  00248	00 00 00 00	 DD	 $LN36@CosumeOper
  0024c	00 00 00 00	 DD	 $LN37@CosumeOper
  00250	00 00 00 00	 DD	 $LN10@CosumeOper
  00254	00 00 00 00	 DD	 $LN8@CosumeOper
  00258	00 00 00 00	 DD	 $LN38@CosumeOper
  0025c	00 00 00 00	 DD	 $LN9@CosumeOper
  00260	00 00 00 00	 DD	 $LN11@CosumeOper
  00264	00 00 00 00	 DD	 $LN33@CosumeOper
  00268	00 00 00 00	 DD	 $LN13@CosumeOper
  0026c	00 00 00 00	 DD	 $LN27@CosumeOper
  00270	00 00 00 00	 DD	 $LN17@CosumeOper
  00274	00 00 00 00	 DD	 $LN12@CosumeOper
  00278	00 00 00 00	 DD	 $LN24@CosumeOper
  0027c	00 00 00 00	 DD	 $LN2@CosumeOper
$LN41@CosumeOper:
  00280	00		 DB	 0
  00281	0f		 DB	 15
  00282	0f		 DB	 15
  00283	0f		 DB	 15
  00284	0f		 DB	 15
  00285	01		 DB	 1
  00286	0f		 DB	 15
  00287	02		 DB	 2
  00288	03		 DB	 3
  00289	04		 DB	 4
  0028a	05		 DB	 5
  0028b	06		 DB	 6
  0028c	07		 DB	 7
  0028d	0f		 DB	 15
  0028e	08		 DB	 8
  0028f	0f		 DB	 15
  00290	0f		 DB	 15
  00291	0f		 DB	 15
  00292	0f		 DB	 15
  00293	0f		 DB	 15
  00294	0f		 DB	 15
  00295	0f		 DB	 15
  00296	0f		 DB	 15
  00297	0f		 DB	 15
  00298	0f		 DB	 15
  00299	09		 DB	 9
  0029a	0f		 DB	 15
  0029b	0a		 DB	 10
  0029c	0b		 DB	 11
  0029d	0c		 DB	 12
  0029e	0f		 DB	 15
  0029f	0f		 DB	 15
  002a0	0f		 DB	 15
  002a1	0f		 DB	 15
  002a2	0f		 DB	 15
  002a3	0f		 DB	 15
  002a4	0f		 DB	 15
  002a5	0f		 DB	 15
  002a6	0f		 DB	 15
  002a7	0f		 DB	 15
  002a8	0f		 DB	 15
  002a9	0f		 DB	 15
  002aa	0f		 DB	 15
  002ab	0f		 DB	 15
  002ac	0f		 DB	 15
  002ad	0f		 DB	 15
  002ae	0f		 DB	 15
  002af	0f		 DB	 15
  002b0	0f		 DB	 15
  002b1	0f		 DB	 15
  002b2	0f		 DB	 15
  002b3	0f		 DB	 15
  002b4	0f		 DB	 15
  002b5	0f		 DB	 15
  002b6	0f		 DB	 15
  002b7	0f		 DB	 15
  002b8	0f		 DB	 15
  002b9	0f		 DB	 15
  002ba	0f		 DB	 15
  002bb	0f		 DB	 15
  002bc	0f		 DB	 15
  002bd	0d		 DB	 13
  002be	0f		 DB	 15
  002bf	0f		 DB	 15
  002c0	0f		 DB	 15
  002c1	0f		 DB	 15
  002c2	0f		 DB	 15
  002c3	0f		 DB	 15
  002c4	0f		 DB	 15
  002c5	0f		 DB	 15
  002c6	0f		 DB	 15
  002c7	0f		 DB	 15
  002c8	0f		 DB	 15
  002c9	0f		 DB	 15
  002ca	0f		 DB	 15
  002cb	0f		 DB	 15
  002cc	0f		 DB	 15
  002cd	0f		 DB	 15
  002ce	0f		 DB	 15
  002cf	0f		 DB	 15
  002d0	0f		 DB	 15
  002d1	0f		 DB	 15
  002d2	0f		 DB	 15
  002d3	0f		 DB	 15
  002d4	0f		 DB	 15
  002d5	0f		 DB	 15
  002d6	0f		 DB	 15
  002d7	0f		 DB	 15
  002d8	0f		 DB	 15
  002d9	0f		 DB	 15
  002da	0f		 DB	 15
  002db	0e		 DB	 14
CosumeOperand ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
op$ = 8
OpToString PROC

; 148  : {

  00000	88 4c 24 08	 mov	 BYTE PTR [rsp+8], cl

; 149  :     static char *strsToOps[] =
; 150  :     {
; 151  :         "OP_NONE",
; 152  :         "OP_ADD",
; 153  :         "OP_SUB",
; 154  :         "OP_MUL",
; 155  :         "OP_DIV",
; 156  :         "OP_PWR",
; 157  :         "OP_SR",
; 158  :         "OP_SL",
; 159  :         "OP_BAND",
; 160  :         "OP_AND",
; 161  :         "OP_BOR",
; 162  :         "OP_OR",
; 163  :         "OP_CMT",
; 164  :         "OP_CLT",
; 165  :         "OP_CMTEQ",
; 166  :         "OP_CLTEQ",
; 167  :         "OP_CEQ",
; 168  :         "OP_CNEQ",
; 169  :         "OP_EQ",
; 170  :         "OP_ASG",
; 171  :         "OP_FUNC",
; 172  :         "OP_OBRAK",
; 173  :         "OP_CBRAK"
; 174  :     };
; 175  :     return strsToOps[op];

  00004	48 0f be 44 24
	08		 movsx	 rax, BYTE PTR op$[rsp]
  0000a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?strsToOps@?1??OpToString@@9@9
  00011	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]

; 176  : }

  00015	c3		 ret	 0
OpToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
hashIdx$ = 32
node$ = 40
result$ = 48
lang$ = 80
varName$ = 88
GetVariable PROC

; 129  : {

$LN6:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 130  :     _u32 hashIdx =GetHash(varName);

  0000e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR varName$[rsp]
  00013	e8 00 00 00 00	 call	 GetHash
  00018	89 44 24 20	 mov	 DWORD PTR hashIdx$[rsp], eax

; 131  :     HshNode *node =lang->varTbl[hashIdx];

  0001c	8b 44 24 20	 mov	 eax, DWORD PTR hashIdx$[rsp]
  00020	48 8b 4c 24 50	 mov	 rcx, QWORD PTR lang$[rsp]
  00025	48 8b 04 c1	 mov	 rax, QWORD PTR [rcx+rax*8]
  00029	48 89 44 24 28	 mov	 QWORD PTR node$[rsp], rax

; 132  :     _Variable *result=NULL;

  0002e	48 c7 44 24 30
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0
$LN2@GetVariabl:

; 133  :     
; 134  :     while (node)

  00037	48 83 7c 24 28
	00		 cmp	 QWORD PTR node$[rsp], 0
  0003d	74 35		 je	 SHORT $LN3@GetVariabl

; 135  :     {
; 136  :         if (IsVStringEqual(node->var.name, varName))

  0003f	48 8b 44 24 28	 mov	 rax, QWORD PTR node$[rsp]
  00044	48 8b 54 24 58	 mov	 rdx, QWORD PTR varName$[rsp]
  00049	48 8b c8	 mov	 rcx, rax
  0004c	e8 00 00 00 00	 call	 IsVStringEqual
  00051	85 c0		 test	 eax, eax
  00053	74 0c		 je	 SHORT $LN4@GetVariabl

; 137  :         {
; 138  :             result =&node->var;

  00055	48 8b 44 24 28	 mov	 rax, QWORD PTR node$[rsp]
  0005a	48 89 44 24 30	 mov	 QWORD PTR result$[rsp], rax

; 139  :             break;

  0005f	eb 13		 jmp	 SHORT $LN3@GetVariabl
$LN4@GetVariabl:

; 140  :         }
; 141  :         node =node->next;

  00061	48 8b 44 24 28	 mov	 rax, QWORD PTR node$[rsp]
  00066	48 8b 80 90 01
	00 00		 mov	 rax, QWORD PTR [rax+400]
  0006d	48 89 44 24 28	 mov	 QWORD PTR node$[rsp], rax

; 142  :     }

  00072	eb c3		 jmp	 SHORT $LN2@GetVariabl
$LN3@GetVariabl:

; 143  :     return result;

  00074	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]

; 144  : }

  00079	48 83 c4 48	 add	 rsp, 72			; 00000048H
  0007d	c3		 ret	 0
GetVariable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
hashIdx$ = 32
phshNode$1 = 40
newNode$2 = 48
newNode$3 = 56
lang$ = 96
variable$ = 104
StoreVariable PROC

; 99   : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 100  :     _u32 hashIdx =GetHash(variable.name);

  00010	48 8b 44 24 68	 mov	 rax, QWORD PTR variable$[rsp]
  00015	48 8b c8	 mov	 rcx, rax
  00018	e8 00 00 00 00	 call	 GetHash
  0001d	89 44 24 20	 mov	 DWORD PTR hashIdx$[rsp], eax

; 101  :     
; 102  :     if (lang->varTbl[hashIdx])

  00021	8b 44 24 20	 mov	 eax, DWORD PTR hashIdx$[rsp]
  00025	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  0002a	48 83 3c c1 00	 cmp	 QWORD PTR [rcx+rax*8], 0
  0002f	0f 84 a8 00 00
	00		 je	 $LN4@StoreVaria

; 103  :     {
; 104  :         HshNode **phshNode =&lang->varTbl[hashIdx];

  00035	8b 44 24 20	 mov	 eax, DWORD PTR hashIdx$[rsp]
  00039	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  0003e	48 8d 04 c1	 lea	 rax, QWORD PTR [rcx+rax*8]
  00042	48 89 44 24 28	 mov	 QWORD PTR phshNode$1[rsp], rax
$LN2@StoreVaria:

; 105  :         while (*phshNode)

  00047	48 8b 44 24 28	 mov	 rax, QWORD PTR phshNode$1[rsp]
  0004c	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  00050	74 5b		 je	 SHORT $LN3@StoreVaria

; 106  :         {
; 107  :             if (IsVStringEqual((*phshNode)->var.name, variable.name))

  00052	48 8b 44 24 68	 mov	 rax, QWORD PTR variable$[rsp]
  00057	48 8b 4c 24 28	 mov	 rcx, QWORD PTR phshNode$1[rsp]
  0005c	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0005f	48 8b d0	 mov	 rdx, rax
  00062	e8 00 00 00 00	 call	 IsVStringEqual
  00067	85 c0		 test	 eax, eax
  00069	74 2d		 je	 SHORT $LN6@StoreVaria

; 108  :             {
; 109  :                 (*phshNode)->var.data =variable.data;

  0006b	48 8b 44 24 28	 mov	 rax, QWORD PTR phshNode$1[rsp]
  00070	48 8b 00	 mov	 rax, QWORD PTR [rax]
  00073	48 8b 4c 24 68	 mov	 rcx, QWORD PTR variable$[rsp]
  00078	48 8d b8 08 01
	00 00		 lea	 rdi, QWORD PTR [rax+264]
  0007f	48 8d b1 08 01
	00 00		 lea	 rsi, QWORD PTR [rcx+264]
  00086	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0008b	f3 a4		 rep movsb

; 110  :                 phshNode =NULL;

  0008d	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR phshNode$1[rsp], 0

; 111  :                 return;

  00096	eb 78		 jmp	 SHORT $LN1@StoreVaria
$LN6@StoreVaria:

; 112  :             }
; 113  :             phshNode = &(*phshNode)->next;

  00098	48 8b 44 24 28	 mov	 rax, QWORD PTR phshNode$1[rsp]
  0009d	48 8b 00	 mov	 rax, QWORD PTR [rax]
  000a0	48 05 90 01 00
	00		 add	 rax, 400		; 00000190H
  000a6	48 89 44 24 28	 mov	 QWORD PTR phshNode$1[rsp], rax

; 114  :         }

  000ab	eb 9a		 jmp	 SHORT $LN2@StoreVaria
$LN3@StoreVaria:

; 115  :         HshNode *newNode =NewHshNode(lang);

  000ad	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  000b2	e8 00 00 00 00	 call	 NewHshNode
  000b7	48 89 44 24 30	 mov	 QWORD PTR newNode$2[rsp], rax

; 116  :         CopyVariable(&newNode->var, &variable);

  000bc	48 8b 44 24 30	 mov	 rax, QWORD PTR newNode$2[rsp]
  000c1	48 8b 54 24 68	 mov	 rdx, QWORD PTR variable$[rsp]
  000c6	48 8b c8	 mov	 rcx, rax
  000c9	e8 00 00 00 00	 call	 CopyVariable

; 117  :         *phshNode =newNode;

  000ce	48 8b 44 24 28	 mov	 rax, QWORD PTR phshNode$1[rsp]
  000d3	48 8b 4c 24 30	 mov	 rcx, QWORD PTR newNode$2[rsp]
  000d8	48 89 08	 mov	 QWORD PTR [rax], rcx

; 118  :     }

  000db	eb 33		 jmp	 SHORT $LN5@StoreVaria
$LN4@StoreVaria:

; 119  :     else
; 120  :     {
; 121  :         HshNode *newNode =NewHshNode(lang);

  000dd	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  000e2	e8 00 00 00 00	 call	 NewHshNode
  000e7	48 89 44 24 38	 mov	 QWORD PTR newNode$3[rsp], rax

; 122  :         CopyVariable(&newNode->var, &variable);

  000ec	48 8b 44 24 38	 mov	 rax, QWORD PTR newNode$3[rsp]
  000f1	48 8b 54 24 68	 mov	 rdx, QWORD PTR variable$[rsp]
  000f6	48 8b c8	 mov	 rcx, rax
  000f9	e8 00 00 00 00	 call	 CopyVariable

; 123  :         lang->varTbl[hashIdx] =newNode;

  000fe	8b 44 24 20	 mov	 eax, DWORD PTR hashIdx$[rsp]
  00102	48 8b 4c 24 60	 mov	 rcx, QWORD PTR lang$[rsp]
  00107	48 8b 54 24 38	 mov	 rdx, QWORD PTR newNode$3[rsp]
  0010c	48 89 14 c1	 mov	 QWORD PTR [rcx+rax*8], rdx
$LN5@StoreVaria:
$LN1@StoreVaria:

; 124  :     }
; 125  : }

  00110	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00114	5f		 pop	 rdi
  00115	5e		 pop	 rsi
  00116	c3		 ret	 0
StoreVariable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
dest$ = 64
src$ = 72
CopyVariable PROC

; 92   : {

$LN3:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 93   :     CopyVString(dest->name, src->name);

  00010	48 8b 44 24 48	 mov	 rax, QWORD PTR src$[rsp]
  00015	48 8b 4c 24 40	 mov	 rcx, QWORD PTR dest$[rsp]
  0001a	48 8b d0	 mov	 rdx, rax
  0001d	e8 00 00 00 00	 call	 CopyVString

; 94   :     dest->data =src->data;

  00022	48 8b 44 24 40	 mov	 rax, QWORD PTR dest$[rsp]
  00027	48 8b 4c 24 48	 mov	 rcx, QWORD PTR src$[rsp]
  0002c	48 8d b8 08 01
	00 00		 lea	 rdi, QWORD PTR [rax+264]
  00033	48 8d b1 08 01
	00 00		 lea	 rsi, QWORD PTR [rcx+264]
  0003a	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  0003f	f3 a4		 rep movsb

; 95   : }

  00041	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00045	5f		 pop	 rdi
  00046	5e		 pop	 rsi
  00047	c3		 ret	 0
CopyVariable ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
tv67 = 32
dest$ = 80
src$ = 88
CopyVar	PROC

; 77   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 78   :     dest->vtype =src->vtype;

  00010	48 8b 44 24 50	 mov	 rax, QWORD PTR dest$[rsp]
  00015	48 8b 4c 24 58	 mov	 rcx, QWORD PTR src$[rsp]
  0001a	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0001c	89 08		 mov	 DWORD PTR [rax], ecx

; 79   :     switch (src->vtype)

  0001e	48 8b 44 24 58	 mov	 rax, QWORD PTR src$[rsp]
  00023	8b 00		 mov	 eax, DWORD PTR [rax]
  00025	89 44 24 20	 mov	 DWORD PTR tv67[rsp], eax
  00029	83 7c 24 20 00	 cmp	 DWORD PTR tv67[rsp], 0
  0002e	74 24		 je	 SHORT $LN5@CopyVar
  00030	83 7c 24 20 01	 cmp	 DWORD PTR tv67[rsp], 1
  00035	74 02		 je	 SHORT $LN4@CopyVar
  00037	eb 35		 jmp	 SHORT $LN2@CopyVar
$LN4@CopyVar:

; 80   :     {
; 81   :         case VT_CONST:
; 82   :         dest->_const =src->_const;

  00039	48 8b 44 24 50	 mov	 rax, QWORD PTR dest$[rsp]
  0003e	48 8b 4c 24 58	 mov	 rcx, QWORD PTR src$[rsp]
  00043	48 8d 78 08	 lea	 rdi, QWORD PTR [rax+8]
  00047	48 8d 71 08	 lea	 rsi, QWORD PTR [rcx+8]
  0004b	b9 88 00 00 00	 mov	 ecx, 136		; 00000088H
  00050	f3 a4		 rep movsb

; 83   :         break;

  00052	eb 1a		 jmp	 SHORT $LN2@CopyVar
$LN5@CopyVar:

; 84   :         case VT_VAR:
; 85   :         CopyVString(dest->varName, src->varName);

  00054	48 8b 44 24 58	 mov	 rax, QWORD PTR src$[rsp]
  00059	48 83 c0 08	 add	 rax, 8
  0005d	48 8b 4c 24 50	 mov	 rcx, QWORD PTR dest$[rsp]
  00062	48 83 c1 08	 add	 rcx, 8
  00066	48 8b d0	 mov	 rdx, rax
  00069	e8 00 00 00 00	 call	 CopyVString
$LN2@CopyVar:

; 86   :         break;
; 87   :     }
; 88   : }

  0006e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00072	5f		 pop	 rdi
  00073	5e		 pop	 rsi
  00074	c3		 ret	 0
CopyVar	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
tv68 = 0
dest$ = 32
src$ = 40
CopyVString PROC

; 71   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24
$LN2@CopyVStrin:

; 72   :     while (*dest++ =*src++);

  0000e	48 8b 44 24 20	 mov	 rax, QWORD PTR dest$[rsp]
  00013	48 8b 4c 24 28	 mov	 rcx, QWORD PTR src$[rsp]
  00018	0f b6 09	 movzx	 ecx, BYTE PTR [rcx]
  0001b	88 08		 mov	 BYTE PTR [rax], cl
  0001d	48 8b 44 24 20	 mov	 rax, QWORD PTR dest$[rsp]
  00022	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00025	89 04 24	 mov	 DWORD PTR tv68[rsp], eax
  00028	48 8b 44 24 20	 mov	 rax, QWORD PTR dest$[rsp]
  0002d	48 ff c0	 inc	 rax
  00030	48 89 44 24 20	 mov	 QWORD PTR dest$[rsp], rax
  00035	48 8b 44 24 28	 mov	 rax, QWORD PTR src$[rsp]
  0003a	48 ff c0	 inc	 rax
  0003d	48 89 44 24 28	 mov	 QWORD PTR src$[rsp], rax
  00042	83 3c 24 00	 cmp	 DWORD PTR tv68[rsp], 0
  00046	74 02		 je	 SHORT $LN3@CopyVStrin
  00048	eb c4		 jmp	 SHORT $LN2@CopyVStrin
$LN3@CopyVStrin:

; 73   : }

  0004a	48 83 c4 18	 add	 rsp, 24
  0004e	c3		 ret	 0
CopyVString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
count$ = 0
tv93 = 4
result$ = 8
str0$ = 32
str1$ = 40
IsVStringEqual PROC

; 56   : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 57   :     _u32 count=0;

  0000e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
$LN2@IsVStringE:

; 58   :     while (str0[count]
; 59   :            && str1[count]
; 60   :            && str0[count] ==str1[count])

  00015	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00018	48 8b 4c 24 20	 mov	 rcx, QWORD PTR str0$[rsp]
  0001d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00021	85 c0		 test	 eax, eax
  00023	74 36		 je	 SHORT $LN3@IsVStringE
  00025	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00028	48 8b 4c 24 28	 mov	 rcx, QWORD PTR str1$[rsp]
  0002d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00031	85 c0		 test	 eax, eax
  00033	74 26		 je	 SHORT $LN3@IsVStringE
  00035	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR str0$[rsp]
  0003d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00041	8b 0c 24	 mov	 ecx, DWORD PTR count$[rsp]
  00044	48 8b 54 24 28	 mov	 rdx, QWORD PTR str1$[rsp]
  00049	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  0004d	3b c1		 cmp	 eax, ecx
  0004f	75 0a		 jne	 SHORT $LN3@IsVStringE

; 61   :     {
; 62   :         count++;

  00051	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00054	ff c0		 inc	 eax
  00056	89 04 24	 mov	 DWORD PTR count$[rsp], eax

; 63   :     }

  00059	eb ba		 jmp	 SHORT $LN2@IsVStringE
$LN3@IsVStringE:

; 64   :     
; 65   :     _bool result =(str0[count]==str1[count]);

  0005b	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR str0$[rsp]
  00063	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00067	8b 0c 24	 mov	 ecx, DWORD PTR count$[rsp]
  0006a	48 8b 54 24 28	 mov	 rdx, QWORD PTR str1$[rsp]
  0006f	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00073	3b c1		 cmp	 eax, ecx
  00075	75 0a		 jne	 SHORT $LN5@IsVStringE
  00077	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
  0007f	eb 08		 jmp	 SHORT $LN6@IsVStringE
$LN5@IsVStringE:
  00081	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN6@IsVStringE:
  00089	8b 44 24 04	 mov	 eax, DWORD PTR tv93[rsp]
  0008d	89 44 24 08	 mov	 DWORD PTR result$[rsp], eax

; 66   :     return result;

  00091	8b 44 24 08	 mov	 eax, DWORD PTR result$[rsp]

; 67   : }

  00095	48 83 c4 18	 add	 rsp, 24
  00099	c3		 ret	 0
IsVStringEqual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
parent$ = 8
child$ = 16
AddSynTreeChild PROC

; 49   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 50   :     child->next =parent->children;

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR child$[rsp]
  0000f	48 8b 4c 24 08	 mov	 rcx, QWORD PTR parent$[rsp]
  00014	48 8b 49 10	 mov	 rcx, QWORD PTR [rcx+16]
  00018	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 51   :     parent->children =child;

  0001c	48 8b 44 24 08	 mov	 rax, QWORD PTR parent$[rsp]
  00021	48 8b 4c 24 10	 mov	 rcx, QWORD PTR child$[rsp]
  00026	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 52   : }

  0002a	c3		 ret	 0
AddSynTreeChild ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
tv72 = 0
lang$ = 32
NewHshNode PROC

; 43   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 44   :     return &lang->nodes[lang->allocCount++];

  00009	48 8b 44 24 20	 mov	 rax, QWORD PTR lang$[rsp]
  0000e	48 63 80 c8 22
	00 00		 movsxd	 rax, DWORD PTR [rax+8904]
  00015	48 69 c0 98 01
	00 00		 imul	 rax, rax, 408		; 00000198H
  0001c	48 8b 4c 24 20	 mov	 rcx, QWORD PTR lang$[rsp]
  00021	48 8d 84 01 d0
	22 00 00	 lea	 rax, QWORD PTR [rcx+rax+8912]
  00029	48 89 04 24	 mov	 QWORD PTR tv72[rsp], rax
  0002d	48 8b 44 24 20	 mov	 rax, QWORD PTR lang$[rsp]
  00032	8b 80 c8 22 00
	00		 mov	 eax, DWORD PTR [rax+8904]
  00038	ff c0		 inc	 eax
  0003a	48 8b 4c 24 20	 mov	 rcx, QWORD PTR lang$[rsp]
  0003f	89 81 c8 22 00
	00		 mov	 DWORD PTR [rcx+8904], eax
  00045	48 8b 04 24	 mov	 rax, QWORD PTR tv72[rsp]

; 45   : }

  00049	48 83 c4 18	 add	 rsp, 24
  0004d	c3		 ret	 0
NewHshNode ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
offs$ = 0
hash$ = 4
name$ = 32
GetHash	PROC

; 30   : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 18	 sub	 rsp, 24

; 31   :     _u32 offs=0;

  00009	c7 04 24 00 00
	00 00		 mov	 DWORD PTR offs$[rsp], 0

; 32   :     _u32 hash=0;

  00010	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR hash$[rsp], 0
$LN2@GetHash:

; 33   :     while (offs < MAX_VAR_NAME_LEN
; 34   :            && name[offs])

  00018	81 3c 24 00 01
	00 00		 cmp	 DWORD PTR offs$[rsp], 256 ; 00000100H
  0001f	73 36		 jae	 SHORT $LN3@GetHash
  00021	8b 04 24	 mov	 eax, DWORD PTR offs$[rsp]
  00024	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00029	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0002d	85 c0		 test	 eax, eax
  0002f	74 26		 je	 SHORT $LN3@GetHash

; 35   :     {
; 36   :         hash =hash<<2 +name[offs++];

  00031	8b 04 24	 mov	 eax, DWORD PTR offs$[rsp]
  00034	48 8b 4c 24 20	 mov	 rcx, QWORD PTR name$[rsp]
  00039	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  0003d	83 c0 02	 add	 eax, 2
  00040	0f b6 c8	 movzx	 ecx, al
  00043	8b 44 24 04	 mov	 eax, DWORD PTR hash$[rsp]
  00047	d3 e0		 shl	 eax, cl
  00049	89 44 24 04	 mov	 DWORD PTR hash$[rsp], eax
  0004d	8b 04 24	 mov	 eax, DWORD PTR offs$[rsp]
  00050	ff c0		 inc	 eax
  00052	89 04 24	 mov	 DWORD PTR offs$[rsp], eax

; 37   :     }

  00055	eb c1		 jmp	 SHORT $LN2@GetHash
$LN3@GetHash:

; 38   :     return hash;

  00057	8b 44 24 04	 mov	 eax, DWORD PTR hash$[rsp]

; 39   : }

  0005b	48 83 c4 18	 add	 rsp, 24
  0005f	c3		 ret	 0
GetHash	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
lang$ = 48
UnInitLang PROC

; 24   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 25   :     VirtualFree(lang, 0, MEM_FREE);

  00009	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  0000f	33 d2		 xor	 edx, edx
  00011	48 8b 4c 24 30	 mov	 rcx, QWORD PTR lang$[rsp]
  00016	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree

; 26   : }

  0001c	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00020	c3		 ret	 0
UnInitLang ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2.c
_TEXT	SEGMENT
lang$ = 32
InitLang PROC

; 15   : {

$LN3:
  00000	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 16   :     Lang *lang =(Lang *)VirtualAlloc(NULL, sizeof(Lang), MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);

  00004	41 b9 04 00 00
	00		 mov	 r9d, 4
  0000a	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  00010	ba d0 66 0f 00	 mov	 edx, 1009360		; 000f66d0H
  00015	33 c9		 xor	 ecx, ecx
  00017	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  0001d	48 89 44 24 20	 mov	 QWORD PTR lang$[rsp], rax

; 17   :     
; 18   :     lang->allocCount =0;

  00022	48 8b 44 24 20	 mov	 rax, QWORD PTR lang$[rsp]
  00027	c7 80 c8 22 00
	00 00 00 00 00	 mov	 DWORD PTR [rax+8904], 0

; 19   :     return lang;

  00031	48 8b 44 24 20	 mov	 rax, QWORD PTR lang$[rsp]

; 20   : }

  00036	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003a	c3		 ret	 0
InitLang ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_signatures.c
_TEXT	SEGMENT
i$1 = 0
j$2 = 4
isFound$ = 8
func$ = 16
op$ = 48
type0$ = 56
type1$ = 64
LookupOp PROC

; 287  : {

$LN13:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	89 4c 24 08	 mov	 DWORD PTR [rsp+8], ecx
  0000d	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 288  :     CalcFunction func =NULL;

  00011	48 c7 44 24 10
	00 00 00 00	 mov	 QWORD PTR func$[rsp], 0

; 289  :     _bool isFound =0;

  0001a	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR isFound$[rsp], 0

; 290  :     
; 291  :     for (int i=0;

  00022	c7 04 24 00 00
	00 00		 mov	 DWORD PTR i$1[rsp], 0
  00029	eb 08		 jmp	 SHORT $LN4@LookupOp
$LN2@LookupOp:

; 293  :          i++)

  0002b	8b 04 24	 mov	 eax, DWORD PTR i$1[rsp]
  0002e	ff c0		 inc	 eax
  00030	89 04 24	 mov	 DWORD PTR i$1[rsp], eax
$LN4@LookupOp:

; 292  :          i<(sizeof(_opTbl)/sizeof(Ops));

  00033	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00037	48 83 f8 11	 cmp	 rax, 17
  0003b	0f 83 e5 00 00
	00		 jae	 $LN3@LookupOp

; 294  :     {
; 295  :         if (op ==_opTbl[i].op)

  00041	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00045	48 6b c0 18	 imul	 rax, rax, 24
  00049	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_opTbl
  00050	8b 04 01	 mov	 eax, DWORD PTR [rcx+rax]
  00053	39 44 24 30	 cmp	 DWORD PTR op$[rsp], eax
  00057	0f 85 bb 00 00
	00		 jne	 $LN8@LookupOp

; 296  :         {
; 297  :             for (int j=0;

  0005d	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR j$2[rsp], 0
  00065	eb 0a		 jmp	 SHORT $LN7@LookupOp
$LN5@LookupOp:

; 299  :                  j++)

  00067	8b 44 24 04	 mov	 eax, DWORD PTR j$2[rsp]
  0006b	ff c0		 inc	 eax
  0006d	89 44 24 04	 mov	 DWORD PTR j$2[rsp], eax
$LN7@LookupOp:

; 298  :                  j<_opTbl[i].size;

  00071	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00075	48 6b c0 18	 imul	 rax, rax, 24
  00079	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_opTbl
  00080	8b 44 01 10	 mov	 eax, DWORD PTR [rcx+rax+16]
  00084	39 44 24 04	 cmp	 DWORD PTR j$2[rsp], eax
  00088	0f 8d 81 00 00
	00		 jge	 $LN6@LookupOp

; 300  :             {
; 301  :                 if (type0 ==_opTbl[i].signatureTbl[j].type0
; 302  :                     && type1 ==_opTbl[i].signatureTbl[j].type1)

  0008e	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  00092	48 6b c0 18	 imul	 rax, rax, 24
  00096	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_opTbl
  0009d	48 63 54 24 04	 movsxd	 rdx, DWORD PTR j$2[rsp]
  000a2	48 6b d2 10	 imul	 rdx, rdx, 16
  000a6	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  000ab	8b 04 10	 mov	 eax, DWORD PTR [rax+rdx]
  000ae	39 44 24 38	 cmp	 DWORD PTR type0$[rsp], eax
  000b2	75 56		 jne	 SHORT $LN9@LookupOp
  000b4	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  000b8	48 6b c0 18	 imul	 rax, rax, 24
  000bc	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_opTbl
  000c3	48 63 54 24 04	 movsxd	 rdx, DWORD PTR j$2[rsp]
  000c8	48 6b d2 10	 imul	 rdx, rdx, 16
  000cc	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  000d1	8b 44 10 04	 mov	 eax, DWORD PTR [rax+rdx+4]
  000d5	39 44 24 40	 cmp	 DWORD PTR type1$[rsp], eax
  000d9	75 2f		 jne	 SHORT $LN9@LookupOp

; 303  :                 {
; 304  :                     func =_opTbl[i].signatureTbl[j].function;

  000db	48 63 04 24	 movsxd	 rax, DWORD PTR i$1[rsp]
  000df	48 6b c0 18	 imul	 rax, rax, 24
  000e3	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_opTbl
  000ea	48 63 54 24 04	 movsxd	 rdx, DWORD PTR j$2[rsp]
  000ef	48 6b d2 10	 imul	 rdx, rdx, 16
  000f3	48 8b 44 01 08	 mov	 rax, QWORD PTR [rcx+rax+8]
  000f8	48 8b 44 10 08	 mov	 rax, QWORD PTR [rax+rdx+8]
  000fd	48 89 44 24 10	 mov	 QWORD PTR func$[rsp], rax

; 305  :                     isFound =1;

  00102	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR isFound$[rsp], 1
$LN9@LookupOp:

; 306  :                 }
; 307  :             }

  0010a	e9 58 ff ff ff	 jmp	 $LN5@LookupOp
$LN6@LookupOp:

; 308  :             if (isFound)

  0010f	83 7c 24 08 00	 cmp	 DWORD PTR isFound$[rsp], 0
  00114	74 02		 je	 SHORT $LN10@LookupOp

; 309  :             {
; 310  :                 break;

  00116	eb 0e		 jmp	 SHORT $LN3@LookupOp
$LN10@LookupOp:
$LN8@LookupOp:

; 311  :             }
; 312  :         }
; 313  :         if (isFound)

  00118	83 7c 24 08 00	 cmp	 DWORD PTR isFound$[rsp], 0
  0011d	74 02		 je	 SHORT $LN11@LookupOp

; 314  :         {
; 315  :             break;

  0011f	eb 05		 jmp	 SHORT $LN3@LookupOp
$LN11@LookupOp:

; 316  :         }
; 317  :     }

  00121	e9 05 ff ff ff	 jmp	 $LN2@LookupOp
$LN3@LookupOp:

; 318  :     return func;

  00126	48 8b 44 24 10	 mov	 rax, QWORD PTR func$[rsp]

; 319  : }

  0012b	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0012f	c3		 ret	 0
LookupOp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_real_real PROC

; 1791 : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1792 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1793 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1794 :     result._const.bool =t0->real !=t1->real;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2e 41 08	 ucomisd xmm0, QWORD PTR [rcx+8]
  00060	7a 02		 jp	 SHORT $LN5@cneq_real_
  00062	74 09		 je	 SHORT $LN3@cneq_real_
$LN5@cneq_real_:
  00064	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  0006b	eb 07		 jmp	 SHORT $LN4@cneq_real_
$LN3@cneq_real_:
  0006d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cneq_real_:
  00074	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00077	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1795 :     return result;

  0007b	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00080	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00088	48 8b f0	 mov	 rsi, rax
  0008b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00090	f3 a4		 rep movsb
  00092	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1796 : }

  0009a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000a1	5f		 pop	 rdi
  000a2	5e		 pop	 rsi
  000a3	c3		 ret	 0
_cneq_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_f64_f64 PROC

; 1782 : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1783 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1784 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1785 :     result._const.bool =t0->f64 !=t1->f64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2e 41 08	 ucomisd xmm0, QWORD PTR [rcx+8]
  00060	7a 02		 jp	 SHORT $LN5@cneq_f64_f
  00062	74 09		 je	 SHORT $LN3@cneq_f64_f
$LN5@cneq_f64_f:
  00064	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  0006b	eb 07		 jmp	 SHORT $LN4@cneq_f64_f
$LN3@cneq_f64_f:
  0006d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cneq_f64_f:
  00074	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00077	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1786 :     return result;

  0007b	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00080	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00088	48 8b f0	 mov	 rsi, rax
  0008b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00090	f3 a4		 rep movsb
  00092	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1787 : }

  0009a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000a1	5f		 pop	 rdi
  000a2	5e		 pop	 rsi
  000a3	c3		 ret	 0
_cneq_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_f32_f32 PROC

; 1773 : {

$LN6:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1774 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1775 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1776 :     result._const.bool =t0->f32 !=t1->f32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005b	0f 2e 41 08	 ucomiss xmm0, DWORD PTR [rcx+8]
  0005f	7a 02		 jp	 SHORT $LN5@cneq_f32_f
  00061	74 09		 je	 SHORT $LN3@cneq_f32_f
$LN5@cneq_f32_f:
  00063	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  0006a	eb 07		 jmp	 SHORT $LN4@cneq_f32_f
$LN3@cneq_f32_f:
  0006c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cneq_f32_f:
  00073	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00076	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1777 :     return result;

  0007a	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00087	48 8b f0	 mov	 rsi, rax
  0008a	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008f	f3 a4		 rep movsb
  00091	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1778 : }

  00099	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000a0	5f		 pop	 rdi
  000a1	5e		 pop	 rsi
  000a2	c3		 ret	 0
_cneq_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_i64_i64 PROC

; 1764 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1765 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1766 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1767 :     result._const.bool =t0->i64 !=t1->i64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	74 09		 je	 SHORT $LN3@cneq_i64_i
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@cneq_i64_i
$LN3@cneq_i64_i:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cneq_i64_i:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1768 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1769 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_cneq_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_i32_i32 PROC

; 1755 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1756 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1757 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1758 :     result._const.bool =t0->i32 !=t1->i32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	74 09		 je	 SHORT $LN3@cneq_i32_i
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@cneq_i32_i
$LN3@cneq_i32_i:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cneq_i32_i:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1759 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1760 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_cneq_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_i16_i16 PROC

; 1746 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1747 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1748 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1749 :     result._const.bool =t0->i16 !=t1->i16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	74 09		 je	 SHORT $LN3@cneq_i16_i
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cneq_i16_i
$LN3@cneq_i16_i:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cneq_i16_i:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1750 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1751 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cneq_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_i8_i8 PROC

; 1737 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1738 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1739 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1740 :     result._const.bool =t0->i8 !=t1->i8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	74 09		 je	 SHORT $LN3@cneq_i8_i8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cneq_i8_i8
$LN3@cneq_i8_i8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cneq_i8_i8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1741 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1742 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cneq_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_u64_u64 PROC

; 1728 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1729 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1730 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1731 :     result._const.bool =t0->u64 !=t1->u64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	74 09		 je	 SHORT $LN3@cneq_u64_u
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@cneq_u64_u
$LN3@cneq_u64_u:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cneq_u64_u:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1732 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1733 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_cneq_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_u32_u32 PROC

; 1719 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1720 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1721 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1722 :     result._const.bool =t0->u32 !=t1->u32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	74 09		 je	 SHORT $LN3@cneq_u32_u
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@cneq_u32_u
$LN3@cneq_u32_u:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cneq_u32_u:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1723 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1724 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_cneq_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_u16_u16 PROC

; 1710 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1711 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1712 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1713 :     result._const.bool =t0->u16 !=t1->u16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	74 09		 je	 SHORT $LN3@cneq_u16_u
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cneq_u16_u
$LN3@cneq_u16_u:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cneq_u16_u:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1714 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1715 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cneq_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cneq_u8_u8 PROC

; 1701 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1702 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1703 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1704 :     result._const.bool =t0->u8 !=t1->u8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	74 09		 je	 SHORT $LN3@cneq_u8_u8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cneq_u8_u8
$LN3@cneq_u8_u8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cneq_u8_u8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1705 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1706 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cneq_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_real_real PROC

; 1690 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1691 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1692 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1693 :     result._const.bool =t0->real ==t1->real;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2e 41 08	 ucomisd xmm0, QWORD PTR [rcx+8]
  00060	7a 0b		 jp	 SHORT $LN3@ceq_real_r
  00062	75 09		 jne	 SHORT $LN3@ceq_real_r
  00064	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  0006b	eb 07		 jmp	 SHORT $LN4@ceq_real_r
$LN3@ceq_real_r:
  0006d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@ceq_real_r:
  00074	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00077	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1694 :     return result;

  0007b	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00080	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00088	48 8b f0	 mov	 rsi, rax
  0008b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00090	f3 a4		 rep movsb
  00092	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1695 : }

  0009a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000a1	5f		 pop	 rdi
  000a2	5e		 pop	 rsi
  000a3	c3		 ret	 0
_ceq_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_f64_f64 PROC

; 1681 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1682 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1683 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1684 :     result._const.bool =t0->f64 ==t1->f64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2e 41 08	 ucomisd xmm0, QWORD PTR [rcx+8]
  00060	7a 0b		 jp	 SHORT $LN3@ceq_f64_f6
  00062	75 09		 jne	 SHORT $LN3@ceq_f64_f6
  00064	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  0006b	eb 07		 jmp	 SHORT $LN4@ceq_f64_f6
$LN3@ceq_f64_f6:
  0006d	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@ceq_f64_f6:
  00074	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00077	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1685 :     return result;

  0007b	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00080	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00088	48 8b f0	 mov	 rsi, rax
  0008b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00090	f3 a4		 rep movsb
  00092	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1686 : }

  0009a	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000a1	5f		 pop	 rdi
  000a2	5e		 pop	 rsi
  000a3	c3		 ret	 0
_ceq_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_f32_f32 PROC

; 1672 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1673 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1674 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1675 :     result._const.bool =t0->f32 ==t1->f32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005b	0f 2e 41 08	 ucomiss xmm0, DWORD PTR [rcx+8]
  0005f	7a 0b		 jp	 SHORT $LN3@ceq_f32_f3
  00061	75 09		 jne	 SHORT $LN3@ceq_f32_f3
  00063	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  0006a	eb 07		 jmp	 SHORT $LN4@ceq_f32_f3
$LN3@ceq_f32_f3:
  0006c	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@ceq_f32_f3:
  00073	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00076	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1676 :     return result;

  0007a	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00087	48 8b f0	 mov	 rsi, rax
  0008a	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008f	f3 a4		 rep movsb
  00091	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1677 : }

  00099	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  000a0	5f		 pop	 rdi
  000a1	5e		 pop	 rsi
  000a2	c3		 ret	 0
_ceq_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_i64_i64 PROC

; 1663 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1664 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1665 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1666 :     result._const.bool =t0->i64 ==t1->i64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	75 09		 jne	 SHORT $LN3@ceq_i64_i6
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@ceq_i64_i6
$LN3@ceq_i64_i6:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@ceq_i64_i6:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1667 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1668 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_ceq_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_i32_i32 PROC

; 1654 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1655 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1656 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1657 :     result._const.bool =t0->i32 ==t1->i32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	75 09		 jne	 SHORT $LN3@ceq_i32_i3
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@ceq_i32_i3
$LN3@ceq_i32_i3:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@ceq_i32_i3:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1658 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1659 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_ceq_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_i16_i16 PROC

; 1645 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1646 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1647 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1648 :     result._const.bool =t0->i16 ==t1->i16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	75 09		 jne	 SHORT $LN3@ceq_i16_i1
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@ceq_i16_i1
$LN3@ceq_i16_i1:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@ceq_i16_i1:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1649 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1650 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_ceq_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_i8_i8 PROC

; 1636 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1637 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1638 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1639 :     result._const.bool =t0->i8 ==t1->i8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	75 09		 jne	 SHORT $LN3@ceq_i8_i8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@ceq_i8_i8
$LN3@ceq_i8_i8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@ceq_i8_i8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1640 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1641 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_ceq_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_u64_u64 PROC

; 1627 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1628 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1629 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1630 :     result._const.bool =t0->u64 ==t1->u64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	75 09		 jne	 SHORT $LN3@ceq_u64_u6
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@ceq_u64_u6
$LN3@ceq_u64_u6:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@ceq_u64_u6:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1631 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1632 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_ceq_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_u32_u32 PROC

; 1618 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1619 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1620 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1621 :     result._const.bool =t0->u32 ==t1->u32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	75 09		 jne	 SHORT $LN3@ceq_u32_u3
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@ceq_u32_u3
$LN3@ceq_u32_u3:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@ceq_u32_u3:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1622 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1623 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_ceq_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_u16_u16 PROC

; 1609 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1610 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1611 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1612 :     result._const.bool =t0->u16 ==t1->u16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	75 09		 jne	 SHORT $LN3@ceq_u16_u1
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@ceq_u16_u1
$LN3@ceq_u16_u1:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@ceq_u16_u1:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1613 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1614 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_ceq_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_ceq_u8_u8 PROC

; 1600 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1601 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1602 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1603 :     result._const.bool =t0->u8 ==t1->u8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	75 09		 jne	 SHORT $LN3@ceq_u8_u8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@ceq_u8_u8
$LN3@ceq_u8_u8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@ceq_u8_u8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1604 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1605 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_ceq_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_real_real PROC

; 1589 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1590 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1591 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1592 :     result._const.bool =t0->real <=t1->real;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	72 09		 jb	 SHORT $LN3@clteq_real
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clteq_real
$LN3@clteq_real:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clteq_real:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1593 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1594 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clteq_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_f64_f64 PROC

; 1580 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1581 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1582 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1583 :     result._const.bool =t0->f64 <=t1->f64;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	72 09		 jb	 SHORT $LN3@clteq_f64_
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clteq_f64_
$LN3@clteq_f64_:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clteq_f64_:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1584 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1585 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clteq_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_f32_f32 PROC

; 1571 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1572 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1573 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1574 :     result._const.bool =t0->f32 <=t1->f32;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00056	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005b	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [rcx+8]
  0005f	72 09		 jb	 SHORT $LN3@clteq_f32_
  00061	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00068	eb 07		 jmp	 SHORT $LN4@clteq_f32_
$LN3@clteq_f32_:
  0006a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clteq_f32_:
  00071	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00074	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1575 :     return result;

  00078	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00085	48 8b f0	 mov	 rsi, rax
  00088	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008d	f3 a4		 rep movsb
  0008f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1576 : }

  00097	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009e	5f		 pop	 rdi
  0009f	5e		 pop	 rsi
  000a0	c3		 ret	 0
_clteq_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_i64_i64 PROC

; 1562 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1563 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1564 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1565 :     result._const.bool =t0->i64 <=t1->i64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	7f 09		 jg	 SHORT $LN3@clteq_i64_
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@clteq_i64_
$LN3@clteq_i64_:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clteq_i64_:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1566 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1567 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_clteq_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_i32_i32 PROC

; 1553 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1554 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1555 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1556 :     result._const.bool =t0->i32 <=t1->i32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	7f 09		 jg	 SHORT $LN3@clteq_i32_
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@clteq_i32_
$LN3@clteq_i32_:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clteq_i32_:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1557 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1558 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_clteq_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_i16_i16 PROC

; 1544 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1545 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1546 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1547 :     result._const.bool =t0->i16 <=t1->i16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7f 09		 jg	 SHORT $LN3@clteq_i16_
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clteq_i16_
$LN3@clteq_i16_:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clteq_i16_:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1548 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1549 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clteq_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_i8_i8 PROC

; 1535 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1536 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1537 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1538 :     result._const.bool =t0->i8 <=t1->i8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7f 09		 jg	 SHORT $LN3@clteq_i8_i
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clteq_i8_i
$LN3@clteq_i8_i:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clteq_i8_i:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1539 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1540 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clteq_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_u64_u64 PROC

; 1526 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1527 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1528 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1529 :     result._const.bool =t0->u64 <=t1->u64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	77 09		 ja	 SHORT $LN3@clteq_u64_
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@clteq_u64_
$LN3@clteq_u64_:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clteq_u64_:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1530 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1531 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_clteq_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_u32_u32 PROC

; 1517 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1518 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1519 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1520 :     result._const.bool =t0->u32 <=t1->u32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	77 09		 ja	 SHORT $LN3@clteq_u32_
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@clteq_u32_
$LN3@clteq_u32_:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clteq_u32_:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1521 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1522 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_clteq_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_u16_u16 PROC

; 1508 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1509 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1510 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1511 :     result._const.bool =t0->u16 <=t1->u16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7f 09		 jg	 SHORT $LN3@clteq_u16_
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clteq_u16_
$LN3@clteq_u16_:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clteq_u16_:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1512 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1513 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clteq_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clteq_u8_u8 PROC

; 1499 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1500 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1501 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1502 :     result._const.bool =t0->u8 <=t1->u8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7f 09		 jg	 SHORT $LN3@clteq_u8_u
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clteq_u8_u
$LN3@clteq_u8_u:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clteq_u8_u:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1503 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1504 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clteq_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_real_real PROC

; 1488 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1489 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1490 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1491 :     result._const.bool =t0->real >=t1->real;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	72 09		 jb	 SHORT $LN3@cmteq_real
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmteq_real
$LN3@cmteq_real:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmteq_real:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1492 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1493 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmteq_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_f64_f64 PROC

; 1479 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1480 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1481 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1482 :     result._const.bool =t0->f64 >=t1->f64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	72 09		 jb	 SHORT $LN3@cmteq_f64_
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmteq_f64_
$LN3@cmteq_f64_:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmteq_f64_:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1483 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1484 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmteq_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_f32_f32 PROC

; 1470 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1471 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1472 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1473 :     result._const.bool =t0->f32 >=t1->f32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005b	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [rcx+8]
  0005f	72 09		 jb	 SHORT $LN3@cmteq_f32_
  00061	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00068	eb 07		 jmp	 SHORT $LN4@cmteq_f32_
$LN3@cmteq_f32_:
  0006a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmteq_f32_:
  00071	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00074	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1474 :     return result;

  00078	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00085	48 8b f0	 mov	 rsi, rax
  00088	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008d	f3 a4		 rep movsb
  0008f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1475 : }

  00097	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009e	5f		 pop	 rdi
  0009f	5e		 pop	 rsi
  000a0	c3		 ret	 0
_cmteq_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_i64_i64 PROC

; 1461 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1462 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1463 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1464 :     result._const.bool =t0->i64 >=t1->i64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	7c 09		 jl	 SHORT $LN3@cmteq_i64_
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@cmteq_i64_
$LN3@cmteq_i64_:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmteq_i64_:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1465 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1466 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_cmteq_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_i32_i32 PROC

; 1452 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1453 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1454 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1455 :     result._const.bool =t0->i32 >=t1->i32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	7c 09		 jl	 SHORT $LN3@cmteq_i32_
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@cmteq_i32_
$LN3@cmteq_i32_:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmteq_i32_:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1456 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1457 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_cmteq_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_i16_i16 PROC

; 1443 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1444 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1445 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1446 :     result._const.bool =t0->i16 >=t1->i16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7c 09		 jl	 SHORT $LN3@cmteq_i16_
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmteq_i16_
$LN3@cmteq_i16_:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmteq_i16_:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1447 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1448 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmteq_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_i8_i8 PROC

; 1434 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1435 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1436 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1437 :     result._const.bool =t0->i8 >=t1->i8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7c 09		 jl	 SHORT $LN3@cmteq_i8_i
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmteq_i8_i
$LN3@cmteq_i8_i:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmteq_i8_i:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1438 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1439 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmteq_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_u64_u64 PROC

; 1425 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1426 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1427 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1428 :     result._const.bool =t0->u64 >=t1->u64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	72 09		 jb	 SHORT $LN3@cmteq_u64_
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@cmteq_u64_
$LN3@cmteq_u64_:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmteq_u64_:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1429 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1430 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_cmteq_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_u32_u32 PROC

; 1416 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1417 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1418 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1419 :     result._const.bool =t0->u32 >=t1->u32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	72 09		 jb	 SHORT $LN3@cmteq_u32_
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@cmteq_u32_
$LN3@cmteq_u32_:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmteq_u32_:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1420 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1421 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_cmteq_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_u16_u16 PROC

; 1407 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1408 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1409 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1410 :     result._const.bool =t0->u16 >=t1->u16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7c 09		 jl	 SHORT $LN3@cmteq_u16_
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmteq_u16_
$LN3@cmteq_u16_:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmteq_u16_:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1411 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1412 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmteq_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmteq_u8_u8 PROC

; 1398 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1399 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1400 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1401 :     result._const.bool =t0->u8 >=t1->u8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7c 09		 jl	 SHORT $LN3@cmteq_u8_u
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmteq_u8_u
$LN3@cmteq_u8_u:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmteq_u8_u:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1402 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1403 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmteq_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_real_real PROC

; 1387 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1388 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1389 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1390 :     result._const.bool =t0->real <t1->real;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	76 09		 jbe	 SHORT $LN3@clt_real_r
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clt_real_r
$LN3@clt_real_r:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clt_real_r:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1391 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1392 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clt_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_f64_f64 PROC

; 1378 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1379 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1380 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1381 :     result._const.bool =t0->f64 <t1->f64;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	76 09		 jbe	 SHORT $LN3@clt_f64_f6
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clt_f64_f6
$LN3@clt_f64_f6:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clt_f64_f6:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1382 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1383 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clt_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_f32_f32 PROC

; 1369 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1370 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1371 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1372 :     result._const.bool =t0->f32 <t1->f32;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00056	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005b	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [rcx+8]
  0005f	76 09		 jbe	 SHORT $LN3@clt_f32_f3
  00061	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00068	eb 07		 jmp	 SHORT $LN4@clt_f32_f3
$LN3@clt_f32_f3:
  0006a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clt_f32_f3:
  00071	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00074	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1373 :     return result;

  00078	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00085	48 8b f0	 mov	 rsi, rax
  00088	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008d	f3 a4		 rep movsb
  0008f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1374 : }

  00097	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009e	5f		 pop	 rdi
  0009f	5e		 pop	 rsi
  000a0	c3		 ret	 0
_clt_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_i64_i64 PROC

; 1360 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1361 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1362 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1363 :     result._const.bool =t0->i64 <t1->i64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	7d 09		 jge	 SHORT $LN3@clt_i64_i6
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@clt_i64_i6
$LN3@clt_i64_i6:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clt_i64_i6:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1364 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1365 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_clt_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_i32_i32 PROC

; 1351 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1352 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1353 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1354 :     result._const.bool =t0->i32 <t1->i32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	7d 09		 jge	 SHORT $LN3@clt_i32_i3
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@clt_i32_i3
$LN3@clt_i32_i3:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clt_i32_i3:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1355 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1356 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_clt_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_i16_i16 PROC

; 1342 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1343 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1344 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1345 :     result._const.bool =t0->i16 <t1->i16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7d 09		 jge	 SHORT $LN3@clt_i16_i1
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clt_i16_i1
$LN3@clt_i16_i1:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clt_i16_i1:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1346 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1347 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clt_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_i8_i8 PROC

; 1333 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1334 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1335 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1336 :     result._const.bool =t0->i8 <t1->i8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7d 09		 jge	 SHORT $LN3@clt_i8_i8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clt_i8_i8
$LN3@clt_i8_i8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clt_i8_i8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1337 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1338 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clt_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_u64_u64 PROC

; 1324 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1325 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1326 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1327 :     result._const.bool =t0->u64 <t1->u64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	73 09		 jae	 SHORT $LN3@clt_u64_u6
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@clt_u64_u6
$LN3@clt_u64_u6:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clt_u64_u6:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1328 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1329 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_clt_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_u32_u32 PROC

; 1315 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1316 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1317 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1318 :     result._const.bool =t0->u32 <t1->u32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	73 09		 jae	 SHORT $LN3@clt_u32_u3
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@clt_u32_u3
$LN3@clt_u32_u3:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@clt_u32_u3:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1319 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1320 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_clt_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_u16_u16 PROC

; 1306 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1307 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1308 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1309 :     result._const.bool =t0->u16 <t1->u16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7d 09		 jge	 SHORT $LN3@clt_u16_u1
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clt_u16_u1
$LN3@clt_u16_u1:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clt_u16_u1:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1310 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1311 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clt_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_clt_u8_u8 PROC

; 1297 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1298 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1299 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1300 :     result._const.bool =t0->u8 <t1->u8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7d 09		 jge	 SHORT $LN3@clt_u8_u8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@clt_u8_u8
$LN3@clt_u8_u8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@clt_u8_u8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1301 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1302 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_clt_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_real_real PROC

; 1286 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1287 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1288 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1289 :     result._const.bool =t0->real >t1->real;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	76 09		 jbe	 SHORT $LN3@cmt_real_r
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmt_real_r
$LN3@cmt_real_r:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmt_real_r:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1290 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1291 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmt_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_f64_f64 PROC

; 1277 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1278 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1279 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1280 :     result._const.bool =t0->f64 >t1->f64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005b	66 0f 2f 41 08	 comisd	 xmm0, QWORD PTR [rcx+8]
  00060	76 09		 jbe	 SHORT $LN3@cmt_f64_f6
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmt_f64_f6
$LN3@cmt_f64_f6:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmt_f64_f6:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1281 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1282 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmt_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_f32_f32 PROC

; 1268 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1269 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1270 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1271 :     result._const.bool =t0->f32 >t1->f32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005b	0f 2f 41 08	 comiss	 xmm0, DWORD PTR [rcx+8]
  0005f	76 09		 jbe	 SHORT $LN3@cmt_f32_f3
  00061	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00068	eb 07		 jmp	 SHORT $LN4@cmt_f32_f3
$LN3@cmt_f32_f3:
  0006a	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmt_f32_f3:
  00071	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00074	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1272 :     return result;

  00078	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00085	48 8b f0	 mov	 rsi, rax
  00088	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008d	f3 a4		 rep movsb
  0008f	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1273 : }

  00097	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009e	5f		 pop	 rdi
  0009f	5e		 pop	 rsi
  000a0	c3		 ret	 0
_cmt_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_i64_i64 PROC

; 1259 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1260 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1261 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1262 :     result._const.bool =t0->i64 >t1->i64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	7e 09		 jle	 SHORT $LN3@cmt_i64_i6
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@cmt_i64_i6
$LN3@cmt_i64_i6:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmt_i64_i6:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1263 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1264 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_cmt_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_i32_i32 PROC

; 1250 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1251 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1252 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1253 :     result._const.bool =t0->i32 >t1->i32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	7e 09		 jle	 SHORT $LN3@cmt_i32_i3
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@cmt_i32_i3
$LN3@cmt_i32_i3:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmt_i32_i3:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1254 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1255 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_cmt_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_i16_i16 PROC

; 1241 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1242 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1243 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1244 :     result._const.bool =t0->i16 >t1->i16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7e 09		 jle	 SHORT $LN3@cmt_i16_i1
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmt_i16_i1
$LN3@cmt_i16_i1:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmt_i16_i1:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1245 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1246 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmt_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_i8_i8 PROC

; 1232 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1233 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1234 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1235 :     result._const.bool =t0->i8 >t1->i8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7e 09		 jle	 SHORT $LN3@cmt_i8_i8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmt_i8_i8
$LN3@cmt_i8_i8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmt_i8_i8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1236 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1237 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmt_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_u64_u64 PROC

; 1223 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1224 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1225 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1226 :     result._const.bool =t0->u64 >t1->u64;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  0005a	48 39 48 08	 cmp	 QWORD PTR [rax+8], rcx
  0005e	76 09		 jbe	 SHORT $LN3@cmt_u64_u6
  00060	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00067	eb 07		 jmp	 SHORT $LN4@cmt_u64_u6
$LN3@cmt_u64_u6:
  00069	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmt_u64_u6:
  00070	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00073	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1227 :     return result;

  00077	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00084	48 8b f0	 mov	 rsi, rax
  00087	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008c	f3 a4		 rep movsb
  0008e	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1228 : }

  00096	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009d	5f		 pop	 rdi
  0009e	5e		 pop	 rsi
  0009f	c3		 ret	 0
_cmt_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv71 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_u32_u32 PROC

; 1214 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1215 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1216 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1217 :     result._const.bool =t0->u32 >t1->u32;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00056	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00059	39 48 08	 cmp	 DWORD PTR [rax+8], ecx
  0005c	76 09		 jbe	 SHORT $LN3@cmt_u32_u3
  0005e	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv71[rsp], 1
  00065	eb 07		 jmp	 SHORT $LN4@cmt_u32_u3
$LN3@cmt_u32_u3:
  00067	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv71[rsp], 0
$LN4@cmt_u32_u3:
  0006e	8b 04 24	 mov	 eax, DWORD PTR tv71[rsp]
  00071	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1218 :     return result;

  00075	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00082	48 8b f0	 mov	 rsi, rax
  00085	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008a	f3 a4		 rep movsb
  0008c	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1219 : }

  00094	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009b	5f		 pop	 rdi
  0009c	5e		 pop	 rsi
  0009d	c3		 ret	 0
_cmt_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_u16_u16 PROC

; 1205 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1206 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1207 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1208 :     result._const.bool =t0->u16 >t1->u16;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7e 09		 jle	 SHORT $LN3@cmt_u16_u1
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmt_u16_u1
$LN3@cmt_u16_u1:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmt_u16_u1:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1209 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1210 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmt_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_cmt_u8_u8 PROC

; 1196 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1197 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1198 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1199 :     result._const.bool =t0->u8 >t1->u8;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00052	48 8b 8c 24 d0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005e	3b c1		 cmp	 eax, ecx
  00060	7e 09		 jle	 SHORT $LN3@cmt_u8_u8
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv73[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@cmt_u8_u8
$LN3@cmt_u8_u8:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv73[rsp], 0
$LN4@cmt_u8_u8:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv73[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1200 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1201 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_cmt_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv72 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_or_bool_bool PROC

; 1185 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1186 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1187 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1188 :     result._const.bool =t0->bool || t1->bool;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00052	75 17		 jne	 SHORT $LN3@or_bool_bo
  00054	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0005c	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00060	75 09		 jne	 SHORT $LN3@or_bool_bo
  00062	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv72[rsp], 0
  00069	eb 07		 jmp	 SHORT $LN4@or_bool_bo
$LN3@or_bool_bo:
  0006b	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv72[rsp], 1
$LN4@or_bool_bo:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv72[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1189 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1190 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_or_bool_bool ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_i64_i64 PROC

; 1174 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1175 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1176 :     result._const.type =TI64;

  0003d	c7 44 24 08 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 1177 :     result._const.i64 =t0->i64 |t1->i64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 0b c1	 or	 rax, rcx
  00060	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 1178 :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1179 : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_bor_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_i32_i32 PROC

; 1165 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1166 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1167 :     result._const.type =TI32;

  0003d	c7 44 24 08 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 1168 :     result._const.i32 =t0->i32 |t1->i32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00058	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0005b	0b c1		 or	 eax, ecx
  0005d	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 1169 :     return result;

  00061	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00065	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006d	48 8b f0	 mov	 rsi, rax
  00070	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00075	f3 a4		 rep movsb
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1170 : }

  0007f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00086	5f		 pop	 rdi
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
_bor_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_i16_i16 PROC

; 1156 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1157 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1158 :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 1159 :     result._const.i16 =t0->i16 |t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	0b c1		 or	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 1160 :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1161 : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_bor_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_i8_i8 PROC

; 1147 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1148 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1149 :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 1150 :     result._const.i8 =t0->i8 |t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	0b c1		 or	 eax, ecx
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 1151 :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1152 : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_bor_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_u64_u64 PROC

; 1138 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1139 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1140 :     result._const.type =TU64;

  0003d	c7 44 24 08 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 1141 :     result._const.u64 =t0->u64 |t1->u64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 0b c1	 or	 rax, rcx
  00060	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 1142 :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1143 : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_bor_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_u32_u32 PROC

; 1129 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1130 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1131 :     result._const.type =TU32;

  0003d	c7 44 24 08 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 1132 :     result._const.u32 =t0->u32 |t1->u32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00058	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0005b	0b c1		 or	 eax, ecx
  0005d	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 1133 :     return result;

  00061	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00065	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006d	48 8b f0	 mov	 rsi, rax
  00070	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00075	f3 a4		 rep movsb
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1134 : }

  0007f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00086	5f		 pop	 rdi
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
_bor_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_u16_u16 PROC

; 1120 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1121 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1122 :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 1123 :     result._const.u16 =t0->u16 |t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	0b c1		 or	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 1124 :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1125 : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_bor_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_bor_u8_u8 PROC

; 1111 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1112 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1113 :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 1114 :     result._const.u8 =t0->u8 |t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	0b c1		 or	 eax, ecx
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 1115 :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1116 : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_bor_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv72 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_and_bool_bool PROC

; 1100 : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1101 :     CalcResult result={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1102 :     result._const.type =TBOOL;

  0003e	c7 44 24 18 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 1103 :     result._const.bool =t0->bool &&t1->bool;

  00046	48 8b 84 24 c8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00052	74 17		 je	 SHORT $LN3@and_bool_b
  00054	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0005c	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  00060	74 09		 je	 SHORT $LN3@and_bool_b
  00062	c7 04 24 01 00
	00 00		 mov	 DWORD PTR tv72[rsp], 1
  00069	eb 07		 jmp	 SHORT $LN4@and_bool_b
$LN3@and_bool_b:
  0006b	c7 04 24 00 00
	00 00		 mov	 DWORD PTR tv72[rsp], 0
$LN4@and_bool_b:
  00072	8b 04 24	 mov	 eax, DWORD PTR tv72[rsp]
  00075	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1104 :     return result;

  00079	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  0007e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00086	48 8b f0	 mov	 rsi, rax
  00089	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0008e	f3 a4		 rep movsb
  00090	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1105 : }

  00098	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  0009f	5f		 pop	 rdi
  000a0	5e		 pop	 rsi
  000a1	c3		 ret	 0
_and_bool_bool ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_i64_i64 PROC

; 1089 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1090 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1091 :     result._const.type =TI64;

  0003d	c7 44 24 08 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 1092 :     result._const.i64 =t0->i64 &t1->i64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 23 c1	 and	 rax, rcx
  00060	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 1093 :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1094 : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_band_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_i32_i32 PROC

; 1080 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1081 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1082 :     result._const.type =TI32;

  0003d	c7 44 24 08 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 1083 :     result._const.i32 =t0->i32 &t1->i32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00058	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0005b	23 c1		 and	 eax, ecx
  0005d	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 1084 :     return result;

  00061	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00065	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006d	48 8b f0	 mov	 rsi, rax
  00070	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00075	f3 a4		 rep movsb
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1085 : }

  0007f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00086	5f		 pop	 rdi
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
_band_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_i16_i16 PROC

; 1071 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1072 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1073 :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 1074 :     result._const.i16 =t0->i16 &t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	23 c1		 and	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 1075 :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1076 : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_band_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_i8_i8 PROC

; 1062 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1063 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1064 :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 1065 :     result._const.i8 =t0->i8 &t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	23 c1		 and	 eax, ecx
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 1066 :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1067 : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_band_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_u64_u64 PROC

; 1053 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1054 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1055 :     result._const.type =TU64;

  0003d	c7 44 24 08 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 1056 :     result._const.u64 =t0->u64 &t1->u64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 23 c1	 and	 rax, rcx
  00060	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 1057 :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1058 : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_band_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_u32_u32 PROC

; 1044 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1045 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1046 :     result._const.type =TU32;

  0003d	c7 44 24 08 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 1047 :     result._const.u32 =t0->u32 &t1->u32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00058	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0005b	23 c1		 and	 eax, ecx
  0005d	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 1048 :     return result;

  00061	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00065	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006d	48 8b f0	 mov	 rsi, rax
  00070	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00075	f3 a4		 rep movsb
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1049 : }

  0007f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00086	5f		 pop	 rdi
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
_band_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_u16_u16 PROC

; 1035 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1036 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1037 :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 1038 :     result._const.u16 =t0->u16 &t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	23 c1		 and	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 1039 :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1040 : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_band_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_band_u8_u8 PROC

; 1026 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 1027 :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 1028 :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 1029 :     result._const.u8 =t0->u8 &t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	23 c1		 and	 eax, ecx
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 1030 :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1031 : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_band_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sl_i64_i64 PROC

; 1015 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1016 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1017 :     result._const.type =TI64;

  0003e	c7 44 24 18 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 1018 :     result._const.i64 =t0->i64 >>t1->i64;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00052	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  0005a	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005e	0f b6 c8	 movzx	 ecx, al
  00061	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00065	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00069	48 d3 f8	 sar	 rax, cl
  0006c	48 89 44 24 20	 mov	 QWORD PTR result$[rsp+16], rax

; 1019 :     return result;

  00071	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00076	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007e	48 8b f0	 mov	 rsi, rax
  00081	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00086	f3 a4		 rep movsb
  00088	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1020 : }

  00090	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00097	5f		 pop	 rdi
  00098	5e		 pop	 rsi
  00099	c3		 ret	 0
_sl_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sl_i32_i32 PROC

; 1006 : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 1007 :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 1008 :     result._const.type =TI32;

  0003e	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 1009 :     result._const.i32 =t0->i32 >>t1->i32;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00051	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00059	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00064	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00067	d3 f8		 sar	 eax, cl
  00069	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 1010 :     return result;

  0006d	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00072	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007a	48 8b f0	 mov	 rsi, rax
  0007d	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00082	f3 a4		 rep movsb
  00084	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1011 : }

  0008c	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00093	5f		 pop	 rdi
  00094	5e		 pop	 rsi
  00095	c3		 ret	 0
_sl_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sl_i16_i16 PROC

; 997  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 998  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 999  :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 1000 :     result._const.i16 =t0->i16 >>t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	d3 f8		 sar	 eax, cl
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 1001 :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 1002 : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_sl_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sl_i8_i8 PROC

; 988  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 989  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 990  :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 991  :     result._const.i8 =t0->i8 >>t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	d3 f8		 sar	 eax, cl
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 992  :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 993  : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_sl_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sl_u64_u64 PROC

; 979  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 980  :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 981  :     result._const.type =TU64;

  0003e	c7 44 24 18 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 982  :     result._const.u64 =t0->u64 >>t1->u64;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00052	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  0005a	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005e	0f b6 c8	 movzx	 ecx, al
  00061	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00065	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00069	48 d3 e8	 shr	 rax, cl
  0006c	48 89 44 24 20	 mov	 QWORD PTR result$[rsp+16], rax

; 983  :     return result;

  00071	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00076	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007e	48 8b f0	 mov	 rsi, rax
  00081	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00086	f3 a4		 rep movsb
  00088	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 984  : }

  00090	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00097	5f		 pop	 rdi
  00098	5e		 pop	 rsi
  00099	c3		 ret	 0
_sl_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sl_u32_u32 PROC

; 970  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 971  :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 972  :     result._const.type =TU32;

  0003e	c7 44 24 18 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 973  :     result._const.u32 =t0->u32 >>t1->u32;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00051	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00059	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00064	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00067	d3 e8		 shr	 eax, cl
  00069	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 974  :     return result;

  0006d	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00072	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007a	48 8b f0	 mov	 rsi, rax
  0007d	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00082	f3 a4		 rep movsb
  00084	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 975  : }

  0008c	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00093	5f		 pop	 rdi
  00094	5e		 pop	 rsi
  00095	c3		 ret	 0
_sl_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sl_u16_u16 PROC

; 961  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 962  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 963  :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 964  :     result._const.u16 =t0->u16 >>t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	d3 f8		 sar	 eax, cl
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 965  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 966  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_sl_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sl_u8_u8 PROC

; 952  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 953  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 954  :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 955  :     result._const.u8 =t0->u8 >>t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	d3 f8		 sar	 eax, cl
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 956  :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 957  : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_sl_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sr_i64_i64 PROC

; 941  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 942  :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 943  :     result._const.type =TI64;

  0003e	c7 44 24 18 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 944  :     result._const.i64 =t0->i64 <<t1->i64;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00052	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  0005a	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005e	0f b6 c8	 movzx	 ecx, al
  00061	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00065	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00069	48 d3 e0	 shl	 rax, cl
  0006c	48 89 44 24 20	 mov	 QWORD PTR result$[rsp+16], rax

; 945  :     return result;

  00071	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00076	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007e	48 8b f0	 mov	 rsi, rax
  00081	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00086	f3 a4		 rep movsb
  00088	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 946  : }

  00090	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00097	5f		 pop	 rdi
  00098	5e		 pop	 rsi
  00099	c3		 ret	 0
_sr_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sr_i32_i32 PROC

; 932  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 933  :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 934  :     result._const.type =TI32;

  0003e	c7 44 24 18 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 935  :     result._const.i32 =t0->i32 <<t1->i32;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00051	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00059	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00064	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00067	d3 e0		 shl	 eax, cl
  00069	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 936  :     return result;

  0006d	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00072	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007a	48 8b f0	 mov	 rsi, rax
  0007d	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00082	f3 a4		 rep movsb
  00084	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 937  : }

  0008c	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00093	5f		 pop	 rdi
  00094	5e		 pop	 rsi
  00095	c3		 ret	 0
_sr_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sr_i16_i16 PROC

; 923  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 924  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 925  :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 926  :     result._const.i16 =t0->i16 <<t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	d3 e0		 shl	 eax, cl
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 927  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 928  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_sr_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sr_i8_i8 PROC

; 914  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 915  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 916  :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 917  :     result._const.i8 =t0->i8 <<t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	d3 e0		 shl	 eax, cl
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 918  :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 919  : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_sr_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sr_u64_u64 PROC

; 905  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 906  :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 907  :     result._const.type =TU64;

  0003e	c7 44 24 18 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 908  :     result._const.u64 =t0->u64 <<t1->u64;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00052	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  0005a	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005e	0f b6 c8	 movzx	 ecx, al
  00061	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00065	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00069	48 d3 e0	 shl	 rax, cl
  0006c	48 89 44 24 20	 mov	 QWORD PTR result$[rsp+16], rax

; 909  :     return result;

  00071	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00076	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007e	48 8b f0	 mov	 rsi, rax
  00081	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00086	f3 a4		 rep movsb
  00088	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 910  : }

  00090	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00097	5f		 pop	 rdi
  00098	5e		 pop	 rsi
  00099	c3		 ret	 0
_sr_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv78 = 0
result$ = 16
__$ReturnAddress$ = 192
t0$ = 200
t1$ = 208
_sr_u32_u32 PROC

; 896  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 897  :     CalcResult result ={.success=1};

  00018	c7 44 24 10 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 18 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 20 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 21	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 898  :     result._const.type =TU32;

  0003e	c7 44 24 18 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 899  :     result._const.u32 =t0->u32 <<t1->u32;

  00046	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00051	48 8b 8c 24 c8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00059	48 89 0c 24	 mov	 QWORD PTR tv78[rsp], rcx
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	48 8b 04 24	 mov	 rax, QWORD PTR tv78[rsp]
  00064	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00067	d3 e0		 shl	 eax, cl
  00069	89 44 24 20	 mov	 DWORD PTR result$[rsp+16], eax

; 900  :     return result;

  0006d	48 8d 44 24 10	 lea	 rax, QWORD PTR result$[rsp]
  00072	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007a	48 8b f0	 mov	 rsi, rax
  0007d	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00082	f3 a4		 rep movsb
  00084	48 8b 84 24 c0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 901  : }

  0008c	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00093	5f		 pop	 rdi
  00094	5e		 pop	 rsi
  00095	c3		 ret	 0
_sr_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sr_u16_u16 PROC

; 887  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 888  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 889  :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 890  :     result._const.u16 =t0->u16 <<t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	d3 e0		 shl	 eax, cl
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 891  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 892  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_sr_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sr_u8_u8 PROC

; 878  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 879  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 880  :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 881  :     result._const.u8 =t0->u8 <<t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	d3 e0		 shl	 eax, cl
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 882  :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 883  : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_sr_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
t1$ = 224
_pwr_real_real PROC

; 866  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 867  :     CalcResult result ={.success=1};

  00018	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 868  :     result._const.type =TREAL;

  0003e	c7 44 24 28 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 869  :     result._const.real =pow(t0->real, t1->real);

  00046	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [rax+8]
  00053	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005b	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  00060	e8 00 00 00 00	 call	 pow
  00065	f2 0f 11 44 24
	30		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 870  :     return result;

  0006b	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  00070	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00080	f3 a4		 rep movsb
  00082	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 871  : }

  0008a	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00091	5f		 pop	 rdi
  00092	5e		 pop	 rsi
  00093	c3		 ret	 0
_pwr_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
t1$ = 224
_pwr_f64_f64 PROC

; 857  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 858  :     CalcResult result ={.success=1};

  00018	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 859  :     result._const.type =TF64;

  0003e	c7 44 24 28 0a
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 10

; 860  :     result._const.f64 =pow(t0->f64 ,t1->f64);

  00046	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	f2 0f 10 48 08	 movsd	 xmm1, QWORD PTR [rax+8]
  00053	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005b	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  00060	e8 00 00 00 00	 call	 pow
  00065	f2 0f 11 44 24
	30		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 861  :     return result;

  0006b	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  00070	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00080	f3 a4		 rep movsb
  00082	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 862  : }

  0008a	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00091	5f		 pop	 rdi
  00092	5e		 pop	 rsi
  00093	c3		 ret	 0
_pwr_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
t1$ = 224
_pwr_f32_f32 PROC

; 848  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 849  :     CalcResult result ={.success=1};

  00018	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 850  :     result._const.type =TF32;

  0003e	c7 44 24 28 09
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 9

; 851  :     result._const.f32 =powf(t0->f32 ,t1->f32);

  00046	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	f3 0f 10 48 08	 movss	 xmm1, DWORD PTR [rax+8]
  00053	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005b	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  00060	e8 00 00 00 00	 call	 powf
  00065	f3 0f 11 44 24
	30		 movss	 DWORD PTR result$[rsp+16], xmm0

; 852  :     return result;

  0006b	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  00070	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00078	48 8b f0	 mov	 rsi, rax
  0007b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00080	f3 a4		 rep movsb
  00082	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 853  : }

  0008a	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00091	5f		 pop	 rdi
  00092	5e		 pop	 rsi
  00093	c3		 ret	 0
_pwr_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_i64_i64 PROC

; 839  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 840  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 841  :     result._const.type =TI64;

  0003e	c7 44 24 38 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 842  :     result._const.i64 =pow((double)t0->i64 ,(double)t1->i64);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	f2 48 0f 2a 40
	08		 cvtsi2sd xmm0, QWORD PTR [rax+8]
  00054	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005c	f2 48 0f 2a 48
	08		 cvtsi2sd xmm1, QWORD PTR [rax+8]
  00062	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv73[rsp], xmm1
  00068	0f 28 c8	 movaps	 xmm1, xmm0
  0006b	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv73[rsp]
  00071	e8 00 00 00 00	 call	 pow
  00076	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  0007b	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+16], rax

; 843  :     return result;

  00080	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00085	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0008d	48 8b f0	 mov	 rsi, rax
  00090	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00095	f3 a4		 rep movsb
  00097	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 844  : }

  0009f	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a6	5f		 pop	 rdi
  000a7	5e		 pop	 rsi
  000a8	c3		 ret	 0
_pwr_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_i32_i32 PROC

; 830  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 831  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 832  :     result._const.type =TI32;

  0003e	c7 44 24 38 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 833  :     result._const.i32 =pow((double)t0->i32 ,(double)t1->i32);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	f2 0f 2a 40 08	 cvtsi2sd xmm0, DWORD PTR [rax+8]
  00053	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005b	f2 0f 2a 48 08	 cvtsi2sd xmm1, DWORD PTR [rax+8]
  00060	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv73[rsp], xmm1
  00066	0f 28 c8	 movaps	 xmm1, xmm0
  00069	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv73[rsp]
  0006f	e8 00 00 00 00	 call	 pow
  00074	f2 0f 2c c0	 cvttsd2si eax, xmm0
  00078	89 44 24 40	 mov	 DWORD PTR result$[rsp+16], eax

; 834  :     return result;

  0007c	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00081	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00089	48 8b f0	 mov	 rsi, rax
  0008c	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00091	f3 a4		 rep movsb
  00093	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 835  : }

  0009b	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a2	5f		 pop	 rdi
  000a3	5e		 pop	 rsi
  000a4	c3		 ret	 0
_pwr_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv75 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_i16_i16 PROC

; 821  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 822  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 823  :     result._const.type =TI16;

  0003e	c7 44 24 38 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 824  :     result._const.i16 =pow((double)t0->i16, (double)t1->i16);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005e	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00062	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  00066	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv75[rsp], xmm1
  0006c	0f 28 c8	 movaps	 xmm1, xmm0
  0006f	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv75[rsp]
  00075	e8 00 00 00 00	 call	 pow
  0007a	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0007e	66 89 44 24 40	 mov	 WORD PTR result$[rsp+16], ax

; 825  :     return result;

  00083	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00088	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00090	48 8b f0	 mov	 rsi, rax
  00093	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00098	f3 a4		 rep movsb
  0009a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 826  : }

  000a2	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a9	5f		 pop	 rdi
  000aa	5e		 pop	 rsi
  000ab	c3		 ret	 0
_pwr_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv75 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_i8_i8 PROC

; 812  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 813  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 814  :     result._const.type =TI8;

  0003e	c7 44 24 38 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 815  :     result._const.i8 =pow((double)t0->i8, (double)t1->i8);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005e	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00062	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  00066	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv75[rsp], xmm1
  0006c	0f 28 c8	 movaps	 xmm1, xmm0
  0006f	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv75[rsp]
  00075	e8 00 00 00 00	 call	 pow
  0007a	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0007e	88 44 24 40	 mov	 BYTE PTR result$[rsp+16], al

; 816  :     return result;

  00082	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00087	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0008f	48 8b f0	 mov	 rsi, rax
  00092	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00097	f3 a4		 rep movsb
  00099	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 817  : }

  000a1	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a8	5f		 pop	 rdi
  000a9	5e		 pop	 rsi
  000aa	c3		 ret	 0
_pwr_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_u64_u64 PROC

; 803  : {

$LN8:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 804  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 805  :     result._const.type =TU64;

  0003e	c7 44 24 38 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 806  :     result._const.u64 =pow((double)t0->u64,(double)t1->u64);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00052	48 85 c0	 test	 rax, rax
  00055	7c 07		 jl	 SHORT $LN6@pwr_u64_u6
  00057	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  0005c	eb 19		 jmp	 SHORT $LN7@pwr_u64_u6
$LN6@pwr_u64_u6:
  0005e	48 8b c8	 mov	 rcx, rax
  00061	48 d1 e9	 shr	 rcx, 1
  00064	48 83 e0 01	 and	 rax, 1
  00068	48 0b c8	 or	 rcx, rax
  0006b	f2 48 0f 2a c9	 cvtsi2sd xmm1, rcx
  00070	f2 0f 58 c9	 addsd	 xmm1, xmm1
  00074	0f 28 c1	 movaps	 xmm0, xmm1
$LN7@pwr_u64_u6:
  00077	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0007f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00083	48 85 c0	 test	 rax, rax
  00086	7c 0d		 jl	 SHORT $LN4@pwr_u64_u6
  00088	f2 48 0f 2a c8	 cvtsi2sd xmm1, rax
  0008d	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv73[rsp], xmm1
  00093	eb 1f		 jmp	 SHORT $LN5@pwr_u64_u6
$LN4@pwr_u64_u6:
  00095	48 8b c8	 mov	 rcx, rax
  00098	48 d1 e9	 shr	 rcx, 1
  0009b	48 83 e0 01	 and	 rax, 1
  0009f	48 0b c8	 or	 rcx, rax
  000a2	f2 48 0f 2a d1	 cvtsi2sd xmm2, rcx
  000a7	f2 0f 58 d2	 addsd	 xmm2, xmm2
  000ab	0f 28 ca	 movaps	 xmm1, xmm2
  000ae	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv73[rsp], xmm1
$LN5@pwr_u64_u6:
  000b4	0f 28 c8	 movaps	 xmm1, xmm0
  000b7	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv73[rsp]
  000bd	e8 00 00 00 00	 call	 pow
  000c2	33 c0		 xor	 eax, eax
  000c4	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@43e0000000000000
  000cc	72 1f		 jb	 SHORT $LN3@pwr_u64_u6
  000ce	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@43e0000000000000
  000d6	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@43e0000000000000
  000de	73 0d		 jae	 SHORT $LN3@pwr_u64_u6
  000e0	48 b9 00 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775808 ; 8000000000000000H
  000ea	48 03 c1	 add	 rax, rcx
$LN3@pwr_u64_u6:
  000ed	f2 48 0f 2c c8	 cvttsd2si rcx, xmm0
  000f2	48 03 c8	 add	 rcx, rax
  000f5	48 8b c1	 mov	 rax, rcx
  000f8	48 89 44 24 40	 mov	 QWORD PTR result$[rsp+16], rax

; 807  :     return result;

  000fd	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00102	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0010a	48 8b f0	 mov	 rsi, rax
  0010d	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00112	f3 a4		 rep movsb
  00114	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 808  : }

  0011c	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  00123	5f		 pop	 rdi
  00124	5e		 pop	 rsi
  00125	c3		 ret	 0
_pwr_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv73 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_u32_u32 PROC

; 794  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 795  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 796  :     result._const.type =TU32;

  0003e	c7 44 24 38 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 797  :     result._const.u32 =pow((double)t0->u32, (double)t1->u32);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00051	f2 48 0f 2a c0	 cvtsi2sd xmm0, rax
  00056	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005e	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00061	f2 48 0f 2a c8	 cvtsi2sd xmm1, rax
  00066	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv73[rsp], xmm1
  0006c	0f 28 c8	 movaps	 xmm1, xmm0
  0006f	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv73[rsp]
  00075	e8 00 00 00 00	 call	 pow
  0007a	f2 48 0f 2c c0	 cvttsd2si rax, xmm0
  0007f	89 44 24 40	 mov	 DWORD PTR result$[rsp+16], eax

; 798  :     return result;

  00083	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00088	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00090	48 8b f0	 mov	 rsi, rax
  00093	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00098	f3 a4		 rep movsb
  0009a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 799  : }

  000a2	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a9	5f		 pop	 rdi
  000aa	5e		 pop	 rsi
  000ab	c3		 ret	 0
_pwr_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv75 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_u16_u16 PROC

; 785  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 786  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 787  :     result._const.type =TU16;

  0003e	c7 44 24 38 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 788  :     result._const.u16 =pow((double)t0->u16 ,(double)t1->u16);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005e	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00062	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  00066	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv75[rsp], xmm1
  0006c	0f 28 c8	 movaps	 xmm1, xmm0
  0006f	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv75[rsp]
  00075	e8 00 00 00 00	 call	 pow
  0007a	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0007e	66 89 44 24 40	 mov	 WORD PTR result$[rsp+16], ax

; 789  :     return result;

  00083	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00088	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00090	48 8b f0	 mov	 rsi, rax
  00093	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00098	f3 a4		 rep movsb
  0009a	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 790  : }

  000a2	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a9	5f		 pop	 rdi
  000aa	5e		 pop	 rsi
  000ab	c3		 ret	 0
_pwr_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
tv75 = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
t1$ = 240
_pwr_u8_u8 PROC

; 776  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 777  :     CalcResult result ={.success=1};

  00018	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00020	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00028	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002d	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00032	48 8b f8	 mov	 rdi, rax
  00035	33 c0		 xor	 eax, eax
  00037	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003c	f3 aa		 rep stosb

; 778  :     result._const.type =TU8;

  0003e	c7 44 24 38 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 779  :     result._const.u8 =pow((double)t0->u8, (double)t1->u8);

  00046	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR t1$[rsp]
  0004e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00052	f2 0f 2a c0	 cvtsi2sd xmm0, eax
  00056	48 8b 84 24 e8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005e	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00062	f2 0f 2a c8	 cvtsi2sd xmm1, eax
  00066	f2 0f 11 4c 24
	20		 movsd	 QWORD PTR tv75[rsp], xmm1
  0006c	0f 28 c8	 movaps	 xmm1, xmm0
  0006f	f2 0f 10 44 24
	20		 movsd	 xmm0, QWORD PTR tv75[rsp]
  00075	e8 00 00 00 00	 call	 pow
  0007a	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0007e	88 44 24 40	 mov	 BYTE PTR result$[rsp+16], al

; 780  :     return result;

  00082	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  00087	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0008f	48 8b f0	 mov	 rsi, rax
  00092	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00097	f3 a4		 rep movsb
  00099	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 781  : }

  000a1	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000a8	5f		 pop	 rdi
  000a9	5e		 pop	 rsi
  000aa	c3		 ret	 0
_pwr_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_real_real PROC

; 765  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 766  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 767  :     result._const.type =TREAL;

  0003d	c7 44 24 08 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 768  :     result._const.real =t0->real /t1->real;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 5e 41 08	 divsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 769  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 770  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_div_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_f64_f64 PROC

; 756  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 757  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 758  :     result._const.type =TF64;

  0003d	c7 44 24 08 0a
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 10

; 759  :     result._const.f64 =t0->f64 /t1->f64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 5e 41 08	 divsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 760  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 761  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_div_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_f32_f32 PROC

; 747  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 748  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 749  :     result._const.type =TF32;

  0003d	c7 44 24 08 09
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 9

; 750  :     result._const.f32 =t0->f32 /t1->f32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005a	f3 0f 5e 41 08	 divss	 xmm0, DWORD PTR [rcx+8]
  0005f	f3 0f 11 44 24
	10		 movss	 DWORD PTR result$[rsp+16], xmm0

; 751  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 752  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_div_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_i64_i64 PROC

; 738  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 739  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 740  :     result._const.type =TI64;

  0003d	c7 44 24 08 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 741  :     result._const.i64 =t0->i64 /t1->i64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00051	48 99		 cdq
  00053	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005b	48 f7 79 08	 idiv	 QWORD PTR [rcx+8]
  0005f	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 742  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 743  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_div_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_i32_i32 PROC

; 729  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 730  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 731  :     result._const.type =TI32;

  0003d	c7 44 24 08 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 732  :     result._const.i32 =t0->i32 /t1->i32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00050	99		 cdq
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	f7 79 08	 idiv	 DWORD PTR [rcx+8]
  0005c	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 733  :     return result;

  00060	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00064	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006c	48 8b f0	 mov	 rsi, rax
  0006f	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00074	f3 a4		 rep movsb
  00076	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 734  : }

  0007e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00085	5f		 pop	 rdi
  00086	5e		 pop	 rsi
  00087	c3		 ret	 0
_div_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_i16_i16 PROC

; 720  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 721  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 722  :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 723  :     result._const.i16 =t0->i16 /t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	99		 cdq
  0005e	f7 f9		 idiv	 ecx
  00060	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 724  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 725  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_div_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_i8_i8 PROC

; 711  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 712  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 713  :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 714  :     result._const.i8 =t0->i8 /t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	99		 cdq
  0005e	f7 f9		 idiv	 ecx
  00060	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 715  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 716  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_div_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_u64_u64 PROC

; 702  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 703  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 704  :     result._const.type =TU64;

  0003d	c7 44 24 08 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 705  :     result._const.u64 =t0->u64 /t1->u64;

  00045	33 d2		 xor	 edx, edx
  00047	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004f	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00053	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005b	48 f7 71 08	 div	 QWORD PTR [rcx+8]
  0005f	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 706  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 707  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_div_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_u32_u32 PROC

; 693  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 694  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 695  :     result._const.type =TU32;

  0003d	c7 44 24 08 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 696  :     result._const.u32 =t0->u32 /t1->u32;

  00045	33 d2		 xor	 edx, edx
  00047	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004f	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00052	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  0005a	f7 71 08	 div	 DWORD PTR [rcx+8]
  0005d	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 697  :     return result;

  00061	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00065	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006d	48 8b f0	 mov	 rsi, rax
  00070	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00075	f3 a4		 rep movsb
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 698  : }

  0007f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00086	5f		 pop	 rdi
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
_div_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_u16_u16 PROC

; 684  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 685  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 686  :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 687  :     result._const.u16 =t0->u16 /t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	99		 cdq
  0005e	f7 f9		 idiv	 ecx
  00060	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 688  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 689  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_div_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_div_u8_u8 PROC

; 675  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 676  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 677  :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 678  :     result._const.u8 =t0->u8 /t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	99		 cdq
  0005e	f7 f9		 idiv	 ecx
  00060	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 679  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 680  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_div_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_mat4_mat4 PROC

; 595  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 596  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 597  :     
; 598  :     result._const.type =TMAT4;

  0003d	c7 44 24 08 12
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 18

; 599  :     result._const.matrix[0] =t0->matrix[0] *t1->matrix[0]

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 04	 imul	 rax, rax, 4
  0007c	b9 08 00 00 00	 mov	 ecx, 8
  00081	48 6b c9 01	 imul	 rcx, rcx, 1
  00085	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0008d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00095	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0009b	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  000a1	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000a5	b8 08 00 00 00	 mov	 eax, 8
  000aa	48 6b c0 08	 imul	 rax, rax, 8
  000ae	b9 08 00 00 00	 mov	 ecx, 8
  000b3	48 6b c9 02	 imul	 rcx, rcx, 2
  000b7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000bf	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000c7	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  000cd	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  000d3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000d7	b8 08 00 00 00	 mov	 eax, 8
  000dc	48 6b c0 0c	 imul	 rax, rax, 12
  000e0	b9 08 00 00 00	 mov	 ecx, 8
  000e5	48 6b c9 03	 imul	 rcx, rcx, 3
  000e9	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000f1	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000f9	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  000ff	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00105	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00109	b8 08 00 00 00	 mov	 eax, 8
  0010e	48 6b c0 00	 imul	 rax, rax, 0
  00112	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 600  :         +t0->matrix[4] *t1->matrix[1]
; 601  :         +t0->matrix[8] *t1->matrix[2]
; 602  :         +t0->matrix[12] *t1->matrix[3];
; 603  :     result._const.matrix[4] =t0->matrix[0] *t1->matrix[4]

  00118	b8 08 00 00 00	 mov	 eax, 8
  0011d	48 6b c0 00	 imul	 rax, rax, 0
  00121	b9 08 00 00 00	 mov	 ecx, 8
  00126	48 6b c9 04	 imul	 rcx, rcx, 4
  0012a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00132	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0013a	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00140	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00146	b8 08 00 00 00	 mov	 eax, 8
  0014b	48 6b c0 04	 imul	 rax, rax, 4
  0014f	b9 08 00 00 00	 mov	 ecx, 8
  00154	48 6b c9 05	 imul	 rcx, rcx, 5
  00158	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00160	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00168	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0016e	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00174	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 08	 imul	 rax, rax, 8
  00181	b9 08 00 00 00	 mov	 ecx, 8
  00186	48 6b c9 06	 imul	 rcx, rcx, 6
  0018a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00192	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0019a	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  001a0	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  001a6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001aa	b8 08 00 00 00	 mov	 eax, 8
  001af	48 6b c0 0c	 imul	 rax, rax, 12
  001b3	b9 08 00 00 00	 mov	 ecx, 8
  001b8	48 6b c9 07	 imul	 rcx, rcx, 7
  001bc	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001c4	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001cc	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  001d2	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  001d8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001dc	b8 08 00 00 00	 mov	 eax, 8
  001e1	48 6b c0 04	 imul	 rax, rax, 4
  001e5	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 604  :         +t0->matrix[4] *t1->matrix[5]
; 605  :         +t0->matrix[8] *t1->matrix[6]
; 606  :         +t0->matrix[12] *t1->matrix[7];
; 607  :     result._const.matrix[8] =t0->matrix[0] *t1->matrix[8]

  001eb	b8 08 00 00 00	 mov	 eax, 8
  001f0	48 6b c0 00	 imul	 rax, rax, 0
  001f4	b9 08 00 00 00	 mov	 ecx, 8
  001f9	48 6b c9 08	 imul	 rcx, rcx, 8
  001fd	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00205	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0020d	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00213	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00219	b8 08 00 00 00	 mov	 eax, 8
  0021e	48 6b c0 04	 imul	 rax, rax, 4
  00222	b9 08 00 00 00	 mov	 ecx, 8
  00227	48 6b c9 09	 imul	 rcx, rcx, 9
  0022b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00233	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0023b	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00241	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00247	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0024b	b8 08 00 00 00	 mov	 eax, 8
  00250	48 6b c0 08	 imul	 rax, rax, 8
  00254	b9 08 00 00 00	 mov	 ecx, 8
  00259	48 6b c9 0a	 imul	 rcx, rcx, 10
  0025d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00265	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0026d	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00273	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00279	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0027d	b8 08 00 00 00	 mov	 eax, 8
  00282	48 6b c0 0c	 imul	 rax, rax, 12
  00286	b9 08 00 00 00	 mov	 ecx, 8
  0028b	48 6b c9 0b	 imul	 rcx, rcx, 11
  0028f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00297	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0029f	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  002a5	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  002ab	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002af	b8 08 00 00 00	 mov	 eax, 8
  002b4	48 6b c0 08	 imul	 rax, rax, 8
  002b8	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 608  :         +t0->matrix[4] *t1->matrix[9]
; 609  :         +t0->matrix[8] *t1->matrix[10]
; 610  :         +t0->matrix[12] *t1->matrix[11];
; 611  :     result._const.matrix[12] =t0->matrix[0] *t1->matrix[12]

  002be	b8 08 00 00 00	 mov	 eax, 8
  002c3	48 6b c0 00	 imul	 rax, rax, 0
  002c7	b9 08 00 00 00	 mov	 ecx, 8
  002cc	48 6b c9 0c	 imul	 rcx, rcx, 12
  002d0	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  002d8	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  002e0	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  002e6	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  002ec	b8 08 00 00 00	 mov	 eax, 8
  002f1	48 6b c0 04	 imul	 rax, rax, 4
  002f5	b9 08 00 00 00	 mov	 ecx, 8
  002fa	48 6b c9 0d	 imul	 rcx, rcx, 13
  002fe	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00306	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0030e	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00314	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0031a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0031e	b8 08 00 00 00	 mov	 eax, 8
  00323	48 6b c0 08	 imul	 rax, rax, 8
  00327	b9 08 00 00 00	 mov	 ecx, 8
  0032c	48 6b c9 0e	 imul	 rcx, rcx, 14
  00330	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00338	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00340	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00346	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0034c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00350	b8 08 00 00 00	 mov	 eax, 8
  00355	48 6b c0 0c	 imul	 rax, rax, 12
  00359	b9 08 00 00 00	 mov	 ecx, 8
  0035e	48 6b c9 0f	 imul	 rcx, rcx, 15
  00362	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0036a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00372	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00378	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0037e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00382	b8 08 00 00 00	 mov	 eax, 8
  00387	48 6b c0 0c	 imul	 rax, rax, 12
  0038b	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 612  :         +t0->matrix[4] *t1->matrix[13]
; 613  :         +t0->matrix[8] *t1->matrix[14]
; 614  :         +t0->matrix[12] *t1->matrix[15];
; 615  :     
; 616  :     result._const.matrix[1] =t0->matrix[1] *t1->matrix[0]

  00391	b8 08 00 00 00	 mov	 eax, 8
  00396	48 6b c0 01	 imul	 rax, rax, 1
  0039a	b9 08 00 00 00	 mov	 ecx, 8
  0039f	48 6b c9 00	 imul	 rcx, rcx, 0
  003a3	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  003ab	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003b3	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  003b9	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  003bf	b8 08 00 00 00	 mov	 eax, 8
  003c4	48 6b c0 05	 imul	 rax, rax, 5
  003c8	b9 08 00 00 00	 mov	 ecx, 8
  003cd	48 6b c9 01	 imul	 rcx, rcx, 1
  003d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  003d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003e1	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  003e7	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  003ed	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003f1	b8 08 00 00 00	 mov	 eax, 8
  003f6	48 6b c0 09	 imul	 rax, rax, 9
  003fa	b9 08 00 00 00	 mov	 ecx, 8
  003ff	48 6b c9 02	 imul	 rcx, rcx, 2
  00403	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0040b	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00413	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00419	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0041f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00423	b8 08 00 00 00	 mov	 eax, 8
  00428	48 6b c0 0d	 imul	 rax, rax, 13
  0042c	b9 08 00 00 00	 mov	 ecx, 8
  00431	48 6b c9 03	 imul	 rcx, rcx, 3
  00435	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0043d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00445	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0044b	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00451	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00455	b8 08 00 00 00	 mov	 eax, 8
  0045a	48 6b c0 01	 imul	 rax, rax, 1
  0045e	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 617  :         +t0->matrix[5] *t1->matrix[1]
; 618  :         +t0->matrix[9] *t1->matrix[2]
; 619  :         +t0->matrix[13] *t1->matrix[3];
; 620  :     result._const.matrix[5] =t0->matrix[1] *t1->matrix[4]

  00464	b8 08 00 00 00	 mov	 eax, 8
  00469	48 6b c0 01	 imul	 rax, rax, 1
  0046d	b9 08 00 00 00	 mov	 ecx, 8
  00472	48 6b c9 04	 imul	 rcx, rcx, 4
  00476	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0047e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00486	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0048c	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00492	b8 08 00 00 00	 mov	 eax, 8
  00497	48 6b c0 05	 imul	 rax, rax, 5
  0049b	b9 08 00 00 00	 mov	 ecx, 8
  004a0	48 6b c9 05	 imul	 rcx, rcx, 5
  004a4	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  004ac	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  004b4	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  004ba	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  004c0	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004c4	b8 08 00 00 00	 mov	 eax, 8
  004c9	48 6b c0 09	 imul	 rax, rax, 9
  004cd	b9 08 00 00 00	 mov	 ecx, 8
  004d2	48 6b c9 06	 imul	 rcx, rcx, 6
  004d6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  004de	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  004e6	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  004ec	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  004f2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  004f6	b8 08 00 00 00	 mov	 eax, 8
  004fb	48 6b c0 0d	 imul	 rax, rax, 13
  004ff	b9 08 00 00 00	 mov	 ecx, 8
  00504	48 6b c9 07	 imul	 rcx, rcx, 7
  00508	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00510	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00518	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0051e	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00524	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00528	b8 08 00 00 00	 mov	 eax, 8
  0052d	48 6b c0 05	 imul	 rax, rax, 5
  00531	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 621  :         +t0->matrix[5] *t1->matrix[5]
; 622  :         +t0->matrix[9] *t1->matrix[6]
; 623  :         +t0->matrix[13] *t1->matrix[7];
; 624  :     result._const.matrix[9] =t0->matrix[1] *t1->matrix[8]

  00537	b8 08 00 00 00	 mov	 eax, 8
  0053c	48 6b c0 01	 imul	 rax, rax, 1
  00540	b9 08 00 00 00	 mov	 ecx, 8
  00545	48 6b c9 08	 imul	 rcx, rcx, 8
  00549	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00551	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00559	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0055f	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00565	b8 08 00 00 00	 mov	 eax, 8
  0056a	48 6b c0 05	 imul	 rax, rax, 5
  0056e	b9 08 00 00 00	 mov	 ecx, 8
  00573	48 6b c9 09	 imul	 rcx, rcx, 9
  00577	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0057f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00587	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0058d	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00593	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00597	b8 08 00 00 00	 mov	 eax, 8
  0059c	48 6b c0 09	 imul	 rax, rax, 9
  005a0	b9 08 00 00 00	 mov	 ecx, 8
  005a5	48 6b c9 0a	 imul	 rcx, rcx, 10
  005a9	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  005b1	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  005b9	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  005bf	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  005c5	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005c9	b8 08 00 00 00	 mov	 eax, 8
  005ce	48 6b c0 0d	 imul	 rax, rax, 13
  005d2	b9 08 00 00 00	 mov	 ecx, 8
  005d7	48 6b c9 0b	 imul	 rcx, rcx, 11
  005db	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  005e3	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  005eb	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  005f1	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  005f7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005fb	b8 08 00 00 00	 mov	 eax, 8
  00600	48 6b c0 09	 imul	 rax, rax, 9
  00604	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 625  :         +t0->matrix[5] *t1->matrix[9]
; 626  :         +t0->matrix[9] *t1->matrix[10]
; 627  :         +t0->matrix[13] *t1->matrix[11];
; 628  :     result._const.matrix[13] =t0->matrix[1] *t1->matrix[12]

  0060a	b8 08 00 00 00	 mov	 eax, 8
  0060f	48 6b c0 01	 imul	 rax, rax, 1
  00613	b9 08 00 00 00	 mov	 ecx, 8
  00618	48 6b c9 0c	 imul	 rcx, rcx, 12
  0061c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00624	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0062c	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00632	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00638	b8 08 00 00 00	 mov	 eax, 8
  0063d	48 6b c0 05	 imul	 rax, rax, 5
  00641	b9 08 00 00 00	 mov	 ecx, 8
  00646	48 6b c9 0d	 imul	 rcx, rcx, 13
  0064a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00652	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0065a	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00660	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00666	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0066a	b8 08 00 00 00	 mov	 eax, 8
  0066f	48 6b c0 09	 imul	 rax, rax, 9
  00673	b9 08 00 00 00	 mov	 ecx, 8
  00678	48 6b c9 0e	 imul	 rcx, rcx, 14
  0067c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00684	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0068c	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00692	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00698	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0069c	b8 08 00 00 00	 mov	 eax, 8
  006a1	48 6b c0 0d	 imul	 rax, rax, 13
  006a5	b9 08 00 00 00	 mov	 ecx, 8
  006aa	48 6b c9 0f	 imul	 rcx, rcx, 15
  006ae	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  006b6	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  006be	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  006c4	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  006ca	f2 0f 58 c1	 addsd	 xmm0, xmm1
  006ce	b8 08 00 00 00	 mov	 eax, 8
  006d3	48 6b c0 0d	 imul	 rax, rax, 13
  006d7	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 629  :         +t0->matrix[5] *t1->matrix[13]
; 630  :         +t0->matrix[9] *t1->matrix[14]
; 631  :         +t0->matrix[13] *t1->matrix[15];
; 632  :     
; 633  :     result._const.matrix[2] =t0->matrix[2] *t1->matrix[0]

  006dd	b8 08 00 00 00	 mov	 eax, 8
  006e2	48 6b c0 02	 imul	 rax, rax, 2
  006e6	b9 08 00 00 00	 mov	 ecx, 8
  006eb	48 6b c9 00	 imul	 rcx, rcx, 0
  006ef	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  006f7	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  006ff	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00705	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0070b	b8 08 00 00 00	 mov	 eax, 8
  00710	48 6b c0 06	 imul	 rax, rax, 6
  00714	b9 08 00 00 00	 mov	 ecx, 8
  00719	48 6b c9 01	 imul	 rcx, rcx, 1
  0071d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00725	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0072d	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00733	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00739	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0073d	b8 08 00 00 00	 mov	 eax, 8
  00742	48 6b c0 0a	 imul	 rax, rax, 10
  00746	b9 08 00 00 00	 mov	 ecx, 8
  0074b	48 6b c9 02	 imul	 rcx, rcx, 2
  0074f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00757	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0075f	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00765	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0076b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0076f	b8 08 00 00 00	 mov	 eax, 8
  00774	48 6b c0 0e	 imul	 rax, rax, 14
  00778	b9 08 00 00 00	 mov	 ecx, 8
  0077d	48 6b c9 03	 imul	 rcx, rcx, 3
  00781	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00789	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00791	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00797	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0079d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  007a1	b8 08 00 00 00	 mov	 eax, 8
  007a6	48 6b c0 02	 imul	 rax, rax, 2
  007aa	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 634  :         +t0->matrix[6] *t1->matrix[1]
; 635  :         +t0->matrix[10] *t1->matrix[2]
; 636  :         +t0->matrix[14] *t1->matrix[3];
; 637  :     result._const.matrix[6] =t0->matrix[2] *t1->matrix[4]

  007b0	b8 08 00 00 00	 mov	 eax, 8
  007b5	48 6b c0 02	 imul	 rax, rax, 2
  007b9	b9 08 00 00 00	 mov	 ecx, 8
  007be	48 6b c9 04	 imul	 rcx, rcx, 4
  007c2	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  007ca	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  007d2	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  007d8	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  007de	b8 08 00 00 00	 mov	 eax, 8
  007e3	48 6b c0 06	 imul	 rax, rax, 6
  007e7	b9 08 00 00 00	 mov	 ecx, 8
  007ec	48 6b c9 05	 imul	 rcx, rcx, 5
  007f0	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  007f8	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00800	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00806	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0080c	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00810	b8 08 00 00 00	 mov	 eax, 8
  00815	48 6b c0 0a	 imul	 rax, rax, 10
  00819	b9 08 00 00 00	 mov	 ecx, 8
  0081e	48 6b c9 06	 imul	 rcx, rcx, 6
  00822	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0082a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00832	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00838	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0083e	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00842	b8 08 00 00 00	 mov	 eax, 8
  00847	48 6b c0 0e	 imul	 rax, rax, 14
  0084b	b9 08 00 00 00	 mov	 ecx, 8
  00850	48 6b c9 07	 imul	 rcx, rcx, 7
  00854	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0085c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00864	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0086a	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00870	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00874	b8 08 00 00 00	 mov	 eax, 8
  00879	48 6b c0 06	 imul	 rax, rax, 6
  0087d	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 638  :         +t0->matrix[6] *t1->matrix[5]
; 639  :         +t0->matrix[10] *t1->matrix[6]
; 640  :         +t0->matrix[14] *t1->matrix[7];
; 641  :     result._const.matrix[10] =t0->matrix[2] *t1->matrix[8]

  00883	b8 08 00 00 00	 mov	 eax, 8
  00888	48 6b c0 02	 imul	 rax, rax, 2
  0088c	b9 08 00 00 00	 mov	 ecx, 8
  00891	48 6b c9 08	 imul	 rcx, rcx, 8
  00895	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0089d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  008a5	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  008ab	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  008b1	b8 08 00 00 00	 mov	 eax, 8
  008b6	48 6b c0 06	 imul	 rax, rax, 6
  008ba	b9 08 00 00 00	 mov	 ecx, 8
  008bf	48 6b c9 09	 imul	 rcx, rcx, 9
  008c3	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  008cb	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  008d3	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  008d9	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  008df	f2 0f 58 c1	 addsd	 xmm0, xmm1
  008e3	b8 08 00 00 00	 mov	 eax, 8
  008e8	48 6b c0 0a	 imul	 rax, rax, 10
  008ec	b9 08 00 00 00	 mov	 ecx, 8
  008f1	48 6b c9 0a	 imul	 rcx, rcx, 10
  008f5	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  008fd	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00905	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0090b	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00911	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00915	b8 08 00 00 00	 mov	 eax, 8
  0091a	48 6b c0 0e	 imul	 rax, rax, 14
  0091e	b9 08 00 00 00	 mov	 ecx, 8
  00923	48 6b c9 0b	 imul	 rcx, rcx, 11
  00927	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0092f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00937	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0093d	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00943	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00947	b8 08 00 00 00	 mov	 eax, 8
  0094c	48 6b c0 0a	 imul	 rax, rax, 10
  00950	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 642  :         +t0->matrix[6] *t1->matrix[9]
; 643  :         +t0->matrix[10] *t1->matrix[10]
; 644  :         +t0->matrix[14] *t1->matrix[11];
; 645  :     result._const.matrix[14] =t0->matrix[2] *t1->matrix[12]

  00956	b8 08 00 00 00	 mov	 eax, 8
  0095b	48 6b c0 02	 imul	 rax, rax, 2
  0095f	b9 08 00 00 00	 mov	 ecx, 8
  00964	48 6b c9 0c	 imul	 rcx, rcx, 12
  00968	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00970	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00978	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0097e	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00984	b8 08 00 00 00	 mov	 eax, 8
  00989	48 6b c0 06	 imul	 rax, rax, 6
  0098d	b9 08 00 00 00	 mov	 ecx, 8
  00992	48 6b c9 0d	 imul	 rcx, rcx, 13
  00996	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0099e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  009a6	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  009ac	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  009b2	f2 0f 58 c1	 addsd	 xmm0, xmm1
  009b6	b8 08 00 00 00	 mov	 eax, 8
  009bb	48 6b c0 0a	 imul	 rax, rax, 10
  009bf	b9 08 00 00 00	 mov	 ecx, 8
  009c4	48 6b c9 0e	 imul	 rcx, rcx, 14
  009c8	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  009d0	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  009d8	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  009de	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  009e4	f2 0f 58 c1	 addsd	 xmm0, xmm1
  009e8	b8 08 00 00 00	 mov	 eax, 8
  009ed	48 6b c0 0e	 imul	 rax, rax, 14
  009f1	b9 08 00 00 00	 mov	 ecx, 8
  009f6	48 6b c9 0f	 imul	 rcx, rcx, 15
  009fa	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00a02	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00a0a	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00a10	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00a16	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a1a	b8 08 00 00 00	 mov	 eax, 8
  00a1f	48 6b c0 0e	 imul	 rax, rax, 14
  00a23	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 646  :         +t0->matrix[6] *t1->matrix[13]
; 647  :         +t0->matrix[10] *t1->matrix[14]
; 648  :         +t0->matrix[14] *t1->matrix[15];
; 649  :     
; 650  :     result._const.matrix[3] =t0->matrix[3] *t1->matrix[0]

  00a29	b8 08 00 00 00	 mov	 eax, 8
  00a2e	48 6b c0 03	 imul	 rax, rax, 3
  00a32	b9 08 00 00 00	 mov	 ecx, 8
  00a37	48 6b c9 00	 imul	 rcx, rcx, 0
  00a3b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00a43	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00a4b	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00a51	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00a57	b8 08 00 00 00	 mov	 eax, 8
  00a5c	48 6b c0 07	 imul	 rax, rax, 7
  00a60	b9 08 00 00 00	 mov	 ecx, 8
  00a65	48 6b c9 01	 imul	 rcx, rcx, 1
  00a69	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00a71	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00a79	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00a7f	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00a85	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00a89	b8 08 00 00 00	 mov	 eax, 8
  00a8e	48 6b c0 0b	 imul	 rax, rax, 11
  00a92	b9 08 00 00 00	 mov	 ecx, 8
  00a97	48 6b c9 02	 imul	 rcx, rcx, 2
  00a9b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00aa3	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00aab	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00ab1	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00ab7	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00abb	b8 08 00 00 00	 mov	 eax, 8
  00ac0	48 6b c0 0f	 imul	 rax, rax, 15
  00ac4	b9 08 00 00 00	 mov	 ecx, 8
  00ac9	48 6b c9 03	 imul	 rcx, rcx, 3
  00acd	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00ad5	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00add	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00ae3	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00ae9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00aed	b8 08 00 00 00	 mov	 eax, 8
  00af2	48 6b c0 03	 imul	 rax, rax, 3
  00af6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 651  :         +t0->matrix[7] *t1->matrix[1]
; 652  :         +t0->matrix[11] *t1->matrix[2]
; 653  :         +t0->matrix[15] *t1->matrix[3];
; 654  :     result._const.matrix[3] =t0->matrix[13] *t1->matrix[4]

  00afc	b8 08 00 00 00	 mov	 eax, 8
  00b01	48 6b c0 0d	 imul	 rax, rax, 13
  00b05	b9 08 00 00 00	 mov	 ecx, 8
  00b0a	48 6b c9 04	 imul	 rcx, rcx, 4
  00b0e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00b16	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00b1e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00b24	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00b2a	b8 08 00 00 00	 mov	 eax, 8
  00b2f	48 6b c0 07	 imul	 rax, rax, 7
  00b33	b9 08 00 00 00	 mov	 ecx, 8
  00b38	48 6b c9 05	 imul	 rcx, rcx, 5
  00b3c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00b44	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00b4c	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00b52	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00b58	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b5c	b8 08 00 00 00	 mov	 eax, 8
  00b61	48 6b c0 0b	 imul	 rax, rax, 11
  00b65	b9 08 00 00 00	 mov	 ecx, 8
  00b6a	48 6b c9 06	 imul	 rcx, rcx, 6
  00b6e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00b76	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00b7e	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00b84	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00b8a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00b8e	b8 08 00 00 00	 mov	 eax, 8
  00b93	48 6b c0 0f	 imul	 rax, rax, 15
  00b97	b9 08 00 00 00	 mov	 ecx, 8
  00b9c	48 6b c9 07	 imul	 rcx, rcx, 7
  00ba0	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00ba8	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00bb0	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00bb6	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00bbc	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00bc0	b8 08 00 00 00	 mov	 eax, 8
  00bc5	48 6b c0 03	 imul	 rax, rax, 3
  00bc9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 655  :         +t0->matrix[7] *t1->matrix[5]
; 656  :         +t0->matrix[11] *t1->matrix[6]
; 657  :         +t0->matrix[15] *t1->matrix[7];
; 658  :     result._const.matrix[3] =t0->matrix[14] *t1->matrix[8]

  00bcf	b8 08 00 00 00	 mov	 eax, 8
  00bd4	48 6b c0 0e	 imul	 rax, rax, 14
  00bd8	b9 08 00 00 00	 mov	 ecx, 8
  00bdd	48 6b c9 08	 imul	 rcx, rcx, 8
  00be1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00be9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00bf1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00bf7	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00bfd	b8 08 00 00 00	 mov	 eax, 8
  00c02	48 6b c0 07	 imul	 rax, rax, 7
  00c06	b9 08 00 00 00	 mov	 ecx, 8
  00c0b	48 6b c9 09	 imul	 rcx, rcx, 9
  00c0f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00c17	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00c1f	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00c25	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00c2b	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00c2f	b8 08 00 00 00	 mov	 eax, 8
  00c34	48 6b c0 0b	 imul	 rax, rax, 11
  00c38	b9 08 00 00 00	 mov	 ecx, 8
  00c3d	48 6b c9 0a	 imul	 rcx, rcx, 10
  00c41	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00c49	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00c51	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00c57	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00c5d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00c61	b8 08 00 00 00	 mov	 eax, 8
  00c66	48 6b c0 0f	 imul	 rax, rax, 15
  00c6a	b9 08 00 00 00	 mov	 ecx, 8
  00c6f	48 6b c9 0b	 imul	 rcx, rcx, 11
  00c73	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00c7b	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00c83	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00c89	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00c8f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00c93	b8 08 00 00 00	 mov	 eax, 8
  00c98	48 6b c0 03	 imul	 rax, rax, 3
  00c9c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 659  :         +t0->matrix[7] *t1->matrix[9]
; 660  :         +t0->matrix[11] *t1->matrix[10]
; 661  :         +t0->matrix[15] *t1->matrix[11];
; 662  :     result._const.matrix[3] =t0->matrix[15] *t1->matrix[12]

  00ca2	b8 08 00 00 00	 mov	 eax, 8
  00ca7	48 6b c0 0f	 imul	 rax, rax, 15
  00cab	b9 08 00 00 00	 mov	 ecx, 8
  00cb0	48 6b c9 0c	 imul	 rcx, rcx, 12
  00cb4	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00cbc	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00cc4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00cca	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00cd0	b8 08 00 00 00	 mov	 eax, 8
  00cd5	48 6b c0 07	 imul	 rax, rax, 7
  00cd9	b9 08 00 00 00	 mov	 ecx, 8
  00cde	48 6b c9 0d	 imul	 rcx, rcx, 13
  00ce2	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00cea	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00cf2	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00cf8	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00cfe	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00d02	b8 08 00 00 00	 mov	 eax, 8
  00d07	48 6b c0 0b	 imul	 rax, rax, 11
  00d0b	b9 08 00 00 00	 mov	 ecx, 8
  00d10	48 6b c9 0e	 imul	 rcx, rcx, 14
  00d14	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00d1c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00d24	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00d2a	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00d30	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00d34	b8 08 00 00 00	 mov	 eax, 8
  00d39	48 6b c0 0f	 imul	 rax, rax, 15
  00d3d	b9 08 00 00 00	 mov	 ecx, 8
  00d42	48 6b c9 0f	 imul	 rcx, rcx, 15
  00d46	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00d4e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00d56	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00d5c	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00d62	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00d66	b8 08 00 00 00	 mov	 eax, 8
  00d6b	48 6b c0 03	 imul	 rax, rax, 3
  00d6f	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 663  :         +t0->matrix[7] *t1->matrix[13]
; 664  :         +t0->matrix[11] *t1->matrix[14]
; 665  :         +t0->matrix[15] *t1->matrix[15];
; 666  :     
; 667  :     return result;

  00d75	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00d79	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00d81	48 8b f0	 mov	 rsi, rax
  00d84	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00d89	f3 a4		 rep movsb
  00d8b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 668  : }

  00d93	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00d9a	5f		 pop	 rdi
  00d9b	5e		 pop	 rsi
  00d9c	c3		 ret	 0
_mul_mat4_mat4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_mat3_mat3 PROC

; 556  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 557  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 558  :     
; 559  :     result._const.type =TMAT3;

  0003d	c7 44 24 08 11
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 17

; 560  :     result._const.matrix[0] =t0->matrix[0] *t1->matrix[0]

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 03	 imul	 rax, rax, 3
  0007c	b9 08 00 00 00	 mov	 ecx, 8
  00081	48 6b c9 01	 imul	 rcx, rcx, 1
  00085	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0008d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00095	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0009b	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  000a1	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000a5	b8 08 00 00 00	 mov	 eax, 8
  000aa	48 6b c0 06	 imul	 rax, rax, 6
  000ae	b9 08 00 00 00	 mov	 ecx, 8
  000b3	48 6b c9 02	 imul	 rcx, rcx, 2
  000b7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000bf	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000c7	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  000cd	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  000d3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000d7	b8 08 00 00 00	 mov	 eax, 8
  000dc	48 6b c0 00	 imul	 rax, rax, 0
  000e0	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 561  :         +t0->matrix[3] *t1->matrix[1]
; 562  :         +t0->matrix[6] *t1->matrix[2];
; 563  :     result._const.matrix[3] =t0->matrix[0] *t1->matrix[3]

  000e6	b8 08 00 00 00	 mov	 eax, 8
  000eb	48 6b c0 00	 imul	 rax, rax, 0
  000ef	b9 08 00 00 00	 mov	 ecx, 8
  000f4	48 6b c9 03	 imul	 rcx, rcx, 3
  000f8	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00100	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00108	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0010e	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00114	b8 08 00 00 00	 mov	 eax, 8
  00119	48 6b c0 03	 imul	 rax, rax, 3
  0011d	b9 08 00 00 00	 mov	 ecx, 8
  00122	48 6b c9 04	 imul	 rcx, rcx, 4
  00126	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0012e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00136	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0013c	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00142	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00146	b8 08 00 00 00	 mov	 eax, 8
  0014b	48 6b c0 06	 imul	 rax, rax, 6
  0014f	b9 08 00 00 00	 mov	 ecx, 8
  00154	48 6b c9 05	 imul	 rcx, rcx, 5
  00158	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00160	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00168	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0016e	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00174	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00178	b8 08 00 00 00	 mov	 eax, 8
  0017d	48 6b c0 03	 imul	 rax, rax, 3
  00181	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 564  :         +t0->matrix[3] *t1->matrix[4]
; 565  :         +t0->matrix[6] *t1->matrix[5];
; 566  :     result._const.matrix[6] =t0->matrix[0] *t1->matrix[6]

  00187	b8 08 00 00 00	 mov	 eax, 8
  0018c	48 6b c0 00	 imul	 rax, rax, 0
  00190	b9 08 00 00 00	 mov	 ecx, 8
  00195	48 6b c9 06	 imul	 rcx, rcx, 6
  00199	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001a1	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001a9	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  001af	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001b5	b8 08 00 00 00	 mov	 eax, 8
  001ba	48 6b c0 03	 imul	 rax, rax, 3
  001be	b9 08 00 00 00	 mov	 ecx, 8
  001c3	48 6b c9 07	 imul	 rcx, rcx, 7
  001c7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001cf	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001d7	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  001dd	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  001e3	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001e7	b8 08 00 00 00	 mov	 eax, 8
  001ec	48 6b c0 06	 imul	 rax, rax, 6
  001f0	b9 08 00 00 00	 mov	 ecx, 8
  001f5	48 6b c9 08	 imul	 rcx, rcx, 8
  001f9	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00201	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00209	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0020f	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00215	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00219	b8 08 00 00 00	 mov	 eax, 8
  0021e	48 6b c0 06	 imul	 rax, rax, 6
  00222	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 567  :         +t0->matrix[3] *t1->matrix[7]
; 568  :         +t0->matrix[6] *t1->matrix[8];
; 569  :     
; 570  :     result._const.matrix[1] =t0->matrix[1] *t1->matrix[0]

  00228	b8 08 00 00 00	 mov	 eax, 8
  0022d	48 6b c0 01	 imul	 rax, rax, 1
  00231	b9 08 00 00 00	 mov	 ecx, 8
  00236	48 6b c9 00	 imul	 rcx, rcx, 0
  0023a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00242	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0024a	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00250	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00256	b8 08 00 00 00	 mov	 eax, 8
  0025b	48 6b c0 04	 imul	 rax, rax, 4
  0025f	b9 08 00 00 00	 mov	 ecx, 8
  00264	48 6b c9 01	 imul	 rcx, rcx, 1
  00268	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00270	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00278	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0027e	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00284	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00288	b8 08 00 00 00	 mov	 eax, 8
  0028d	48 6b c0 07	 imul	 rax, rax, 7
  00291	b9 08 00 00 00	 mov	 ecx, 8
  00296	48 6b c9 02	 imul	 rcx, rcx, 2
  0029a	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  002a2	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  002aa	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  002b0	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  002b6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  002ba	b8 08 00 00 00	 mov	 eax, 8
  002bf	48 6b c0 01	 imul	 rax, rax, 1
  002c3	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 571  :         +t0->matrix[4] *t1->matrix[1]
; 572  :         +t0->matrix[7] *t1->matrix[2];
; 573  :     result._const.matrix[4] =t0->matrix[1] *t1->matrix[3]

  002c9	b8 08 00 00 00	 mov	 eax, 8
  002ce	48 6b c0 01	 imul	 rax, rax, 1
  002d2	b9 08 00 00 00	 mov	 ecx, 8
  002d7	48 6b c9 03	 imul	 rcx, rcx, 3
  002db	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  002e3	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  002eb	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  002f1	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  002f7	b8 08 00 00 00	 mov	 eax, 8
  002fc	48 6b c0 04	 imul	 rax, rax, 4
  00300	b9 08 00 00 00	 mov	 ecx, 8
  00305	48 6b c9 04	 imul	 rcx, rcx, 4
  00309	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00311	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00319	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0031f	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00325	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00329	b8 08 00 00 00	 mov	 eax, 8
  0032e	48 6b c0 07	 imul	 rax, rax, 7
  00332	b9 08 00 00 00	 mov	 ecx, 8
  00337	48 6b c9 05	 imul	 rcx, rcx, 5
  0033b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00343	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0034b	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00351	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00357	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0035b	b8 08 00 00 00	 mov	 eax, 8
  00360	48 6b c0 04	 imul	 rax, rax, 4
  00364	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 574  :         +t0->matrix[4] *t1->matrix[4]
; 575  :         +t0->matrix[7] *t1->matrix[5];
; 576  :     result._const.matrix[7] =t0->matrix[1] *t1->matrix[6]

  0036a	b8 08 00 00 00	 mov	 eax, 8
  0036f	48 6b c0 01	 imul	 rax, rax, 1
  00373	b9 08 00 00 00	 mov	 ecx, 8
  00378	48 6b c9 06	 imul	 rcx, rcx, 6
  0037c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00384	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0038c	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00392	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00398	b8 08 00 00 00	 mov	 eax, 8
  0039d	48 6b c0 04	 imul	 rax, rax, 4
  003a1	b9 08 00 00 00	 mov	 ecx, 8
  003a6	48 6b c9 07	 imul	 rcx, rcx, 7
  003aa	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  003b2	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003ba	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  003c0	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  003c6	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003ca	b8 08 00 00 00	 mov	 eax, 8
  003cf	48 6b c0 07	 imul	 rax, rax, 7
  003d3	b9 08 00 00 00	 mov	 ecx, 8
  003d8	48 6b c9 08	 imul	 rcx, rcx, 8
  003dc	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  003e4	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003ec	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  003f2	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  003f8	f2 0f 58 c1	 addsd	 xmm0, xmm1
  003fc	b8 08 00 00 00	 mov	 eax, 8
  00401	48 6b c0 07	 imul	 rax, rax, 7
  00405	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 577  :         +t0->matrix[4] *t1->matrix[7]
; 578  :         +t0->matrix[7] *t1->matrix[8];
; 579  :     
; 580  :     result._const.matrix[2] =t0->matrix[2] *t1->matrix[0]

  0040b	b8 08 00 00 00	 mov	 eax, 8
  00410	48 6b c0 02	 imul	 rax, rax, 2
  00414	b9 08 00 00 00	 mov	 ecx, 8
  00419	48 6b c9 00	 imul	 rcx, rcx, 0
  0041d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00425	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0042d	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00433	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00439	b8 08 00 00 00	 mov	 eax, 8
  0043e	48 6b c0 05	 imul	 rax, rax, 5
  00442	b9 08 00 00 00	 mov	 ecx, 8
  00447	48 6b c9 01	 imul	 rcx, rcx, 1
  0044b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00453	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0045b	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00461	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00467	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0046b	b8 08 00 00 00	 mov	 eax, 8
  00470	48 6b c0 08	 imul	 rax, rax, 8
  00474	b9 08 00 00 00	 mov	 ecx, 8
  00479	48 6b c9 02	 imul	 rcx, rcx, 2
  0047d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00485	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0048d	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00493	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00499	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0049d	b8 08 00 00 00	 mov	 eax, 8
  004a2	48 6b c0 02	 imul	 rax, rax, 2
  004a6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 581  :         +t0->matrix[5] *t1->matrix[1]
; 582  :         +t0->matrix[8] *t1->matrix[2];
; 583  :     result._const.matrix[5] =t0->matrix[2] *t1->matrix[3]

  004ac	b8 08 00 00 00	 mov	 eax, 8
  004b1	48 6b c0 02	 imul	 rax, rax, 2
  004b5	b9 08 00 00 00	 mov	 ecx, 8
  004ba	48 6b c9 03	 imul	 rcx, rcx, 3
  004be	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  004c6	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  004ce	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  004d4	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  004da	b8 08 00 00 00	 mov	 eax, 8
  004df	48 6b c0 05	 imul	 rax, rax, 5
  004e3	b9 08 00 00 00	 mov	 ecx, 8
  004e8	48 6b c9 04	 imul	 rcx, rcx, 4
  004ec	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  004f4	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  004fc	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00502	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00508	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0050c	b8 08 00 00 00	 mov	 eax, 8
  00511	48 6b c0 08	 imul	 rax, rax, 8
  00515	b9 08 00 00 00	 mov	 ecx, 8
  0051a	48 6b c9 05	 imul	 rcx, rcx, 5
  0051e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00526	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0052e	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00534	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0053a	f2 0f 58 c1	 addsd	 xmm0, xmm1
  0053e	b8 08 00 00 00	 mov	 eax, 8
  00543	48 6b c0 05	 imul	 rax, rax, 5
  00547	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 584  :         +t0->matrix[5] *t1->matrix[4]
; 585  :         +t0->matrix[8] *t1->matrix[5];
; 586  :     result._const.matrix[8] =t0->matrix[2] *t1->matrix[6]

  0054d	b8 08 00 00 00	 mov	 eax, 8
  00552	48 6b c0 02	 imul	 rax, rax, 2
  00556	b9 08 00 00 00	 mov	 ecx, 8
  0055b	48 6b c9 06	 imul	 rcx, rcx, 6
  0055f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00567	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0056f	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00575	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0057b	b8 08 00 00 00	 mov	 eax, 8
  00580	48 6b c0 05	 imul	 rax, rax, 5
  00584	b9 08 00 00 00	 mov	 ecx, 8
  00589	48 6b c9 07	 imul	 rcx, rcx, 7
  0058d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00595	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0059d	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  005a3	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  005a9	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005ad	b8 08 00 00 00	 mov	 eax, 8
  005b2	48 6b c0 08	 imul	 rax, rax, 8
  005b6	b9 08 00 00 00	 mov	 ecx, 8
  005bb	48 6b c9 08	 imul	 rcx, rcx, 8
  005bf	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  005c7	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  005cf	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  005d5	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  005db	f2 0f 58 c1	 addsd	 xmm0, xmm1
  005df	b8 08 00 00 00	 mov	 eax, 8
  005e4	48 6b c0 08	 imul	 rax, rax, 8
  005e8	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 587  :         +t0->matrix[5] *t1->matrix[7]
; 588  :         +t0->matrix[8] *t1->matrix[8];
; 589  :     
; 590  :     return result;

  005ee	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  005f2	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  005fa	48 8b f0	 mov	 rsi, rax
  005fd	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00602	f3 a4		 rep movsb
  00604	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 591  : }

  0060c	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00613	5f		 pop	 rdi
  00614	5e		 pop	 rsi
  00615	c3		 ret	 0
_mul_mat3_mat3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_mat2_mat2 PROC

; 541  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 542  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 543  :     
; 544  :     result._const.type =TMAT2;

  0003d	c7 44 24 08 10
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 16

; 545  :     result._const.matrix[0] = t0->matrix[0] *t1->matrix[0] + t0->matrix[2] *t1->matrix[1];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 02	 imul	 rax, rax, 2
  0007c	b9 08 00 00 00	 mov	 ecx, 8
  00081	48 6b c9 01	 imul	 rcx, rcx, 1
  00085	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0008d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00095	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0009b	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  000a1	f2 0f 58 c1	 addsd	 xmm0, xmm1
  000a5	b8 08 00 00 00	 mov	 eax, 8
  000aa	48 6b c0 00	 imul	 rax, rax, 0
  000ae	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 546  :     result._const.matrix[2] = t0->matrix[0] *t1->matrix[2] + t0->matrix[2] *t1->matrix[3];

  000b4	b8 08 00 00 00	 mov	 eax, 8
  000b9	48 6b c0 00	 imul	 rax, rax, 0
  000bd	b9 08 00 00 00	 mov	 ecx, 8
  000c2	48 6b c9 02	 imul	 rcx, rcx, 2
  000c6	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000ce	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000d6	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000dc	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000e2	b8 08 00 00 00	 mov	 eax, 8
  000e7	48 6b c0 02	 imul	 rax, rax, 2
  000eb	b9 08 00 00 00	 mov	 ecx, 8
  000f0	48 6b c9 03	 imul	 rcx, rcx, 3
  000f4	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000fc	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00104	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  0010a	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  00110	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00114	b8 08 00 00 00	 mov	 eax, 8
  00119	48 6b c0 02	 imul	 rax, rax, 2
  0011d	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 547  :     
; 548  :     result._const.matrix[1] = t0->matrix[1] *t1->matrix[0] + t0->matrix[3] *t1->matrix[1];

  00123	b8 08 00 00 00	 mov	 eax, 8
  00128	48 6b c0 01	 imul	 rax, rax, 1
  0012c	b9 08 00 00 00	 mov	 ecx, 8
  00131	48 6b c9 00	 imul	 rcx, rcx, 0
  00135	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0013d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00145	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0014b	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00151	b8 08 00 00 00	 mov	 eax, 8
  00156	48 6b c0 03	 imul	 rax, rax, 3
  0015a	b9 08 00 00 00	 mov	 ecx, 8
  0015f	48 6b c9 01	 imul	 rcx, rcx, 1
  00163	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0016b	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00173	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  00179	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  0017f	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00183	b8 08 00 00 00	 mov	 eax, 8
  00188	48 6b c0 01	 imul	 rax, rax, 1
  0018c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 549  :     result._const.matrix[3] = t0->matrix[1] *t1->matrix[2] + t0->matrix[3] *t1->matrix[3];

  00192	b8 08 00 00 00	 mov	 eax, 8
  00197	48 6b c0 01	 imul	 rax, rax, 1
  0019b	b9 08 00 00 00	 mov	 ecx, 8
  001a0	48 6b c9 02	 imul	 rcx, rcx, 2
  001a4	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001ac	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001b4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  001ba	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001c0	b8 08 00 00 00	 mov	 eax, 8
  001c5	48 6b c0 03	 imul	 rax, rax, 3
  001c9	b9 08 00 00 00	 mov	 ecx, 8
  001ce	48 6b c9 03	 imul	 rcx, rcx, 3
  001d2	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001da	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001e2	f2 0f 10 4c 02
	08		 movsd	 xmm1, QWORD PTR [rdx+rax+8]
  001e8	f2 0f 59 4c 0f
	08		 mulsd	 xmm1, QWORD PTR [rdi+rcx+8]
  001ee	f2 0f 58 c1	 addsd	 xmm0, xmm1
  001f2	b8 08 00 00 00	 mov	 eax, 8
  001f7	48 6b c0 03	 imul	 rax, rax, 3
  001fb	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 550  :     
; 551  :     return result;

  00201	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00205	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0020d	48 8b f0	 mov	 rsi, rax
  00210	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00215	f3 a4		 rep movsb
  00217	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 552  : }

  0021f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00226	5f		 pop	 rdi
  00227	5e		 pop	 rsi
  00228	c3		 ret	 0
_mul_mat2_mat2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_vec4_vec4 PROC

; 527  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 528  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 529  :     
; 530  :     result._const.type =TVEC4;

  0003d	c7 44 24 08 0f
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 15

; 531  :     result._const.matrix[0] =t0->matrix[0] *t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 532  :     result._const.matrix[1] =t0->matrix[1] *t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 533  :     result._const.matrix[2] =t0->matrix[2] *t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 534  :     result._const.matrix[3] =t0->matrix[3] *t1->matrix[3];

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 03	 imul	 rax, rax, 3
  00105	b9 08 00 00 00	 mov	 ecx, 8
  0010a	48 6b c9 03	 imul	 rcx, rcx, 3
  0010e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00116	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0011e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00124	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 03	 imul	 rax, rax, 3
  00133	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 535  :     
; 536  :     return result;

  00139	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0013d	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00145	48 8b f0	 mov	 rsi, rax
  00148	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0014d	f3 a4		 rep movsb
  0014f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 537  : }

  00157	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0015e	5f		 pop	 rdi
  0015f	5e		 pop	 rsi
  00160	c3		 ret	 0
_mul_vec4_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_vec3_vec3 PROC

; 514  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 515  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 516  :     
; 517  :     result._const.type =TVEC3;

  0003d	c7 44 24 08 0e
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 14

; 518  :     result._const.matrix[0] =t0->matrix[0] *t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 519  :     result._const.matrix[1] =t0->matrix[1] *t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 520  :     result._const.matrix[2] =t0->matrix[2] *t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 521  :     
; 522  :     return result;

  000fc	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00100	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00110	f3 a4		 rep movsb
  00112	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 523  : }

  0011a	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00121	5f		 pop	 rdi
  00122	5e		 pop	 rsi
  00123	c3		 ret	 0
_mul_vec3_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_vec2_vec2 PROC

; 502  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 503  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 504  :     
; 505  :     result._const.type =TVEC2;

  0003d	c7 44 24 08 0d
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 13

; 506  :     result._const.matrix[0] =t0->matrix[0] *t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 507  :     result._const.matrix[1] =t0->matrix[1] *t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 59 44 0f
	08		 mulsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 508  :     
; 509  :     return result;

  000bf	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  000c3	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000cb	48 8b f0	 mov	 rsi, rax
  000ce	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000d3	f3 a4		 rep movsb
  000d5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 510  : }

  000dd	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000e4	5f		 pop	 rdi
  000e5	5e		 pop	 rsi
  000e6	c3		 ret	 0
_mul_vec2_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_real_real PROC

; 493  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 494  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 495  :     result._const.type =TREAL;

  0003d	c7 44 24 08 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 496  :     result._const.real =t0->real*t1->real;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 497  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 498  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_mul_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_f64_f64 PROC

; 484  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 485  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 486  :     result._const.type =TF64;

  0003d	c7 44 24 08 0a
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 10

; 487  :     result._const.f64 =t0->f64 *t1->f64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 59 41 08	 mulsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 488  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 489  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_mul_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_f32_f32 PROC

; 475  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 476  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 477  :     result._const.type =TF32;

  0003d	c7 44 24 08 09
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 9

; 478  :     result._const.f32 =t0->f32 *t1->f32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005a	f3 0f 59 41 08	 mulss	 xmm0, DWORD PTR [rcx+8]
  0005f	f3 0f 11 44 24
	10		 movss	 DWORD PTR result$[rsp+16], xmm0

; 479  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 480  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_mul_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_i64_i64 PROC

; 466  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 467  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 468  :     result._const.type =TI64;

  0003d	c7 44 24 08 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 469  :     result._const.i64 =t0->i64 *t1->i64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00059	48 0f af 41 08	 imul	 rax, QWORD PTR [rcx+8]
  0005e	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 470  :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 471  : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_mul_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_i32_i32 PROC

; 457  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 458  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 459  :     result._const.type =TI32;

  0003d	c7 44 24 08 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 460  :     result._const.i32 =t0->i32 *t1->i32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00058	0f af 41 08	 imul	 eax, DWORD PTR [rcx+8]
  0005c	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 461  :     return result;

  00060	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00064	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006c	48 8b f0	 mov	 rsi, rax
  0006f	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00074	f3 a4		 rep movsb
  00076	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 462  : }

  0007e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00085	5f		 pop	 rdi
  00086	5e		 pop	 rsi
  00087	c3		 ret	 0
_mul_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_i16_i16 PROC

; 448  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 449  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 450  :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 451  :     result._const.i16 =t0->i16 *t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	0f af c1	 imul	 eax, ecx
  00060	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 452  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 453  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_mul_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_i8_i8 PROC

; 439  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 440  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 441  :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 442  :     result._const.i8 =t0->i8 *t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	0f af c1	 imul	 eax, ecx
  00060	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 443  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 444  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_mul_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_u64_u64 PROC

; 430  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 431  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 432  :     result._const.type =TU64;

  0003d	c7 44 24 08 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 433  :     result._const.u64 =t0->u64 *t1->u64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00059	48 0f af 41 08	 imul	 rax, QWORD PTR [rcx+8]
  0005e	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 434  :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 435  : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_mul_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_u32_u32 PROC

; 421  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 422  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 423  :     result._const.type =TU32;

  0003d	c7 44 24 08 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 424  :     result._const.u32 =t0->u32 *t1->u32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00058	0f af 41 08	 imul	 eax, DWORD PTR [rcx+8]
  0005c	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 425  :     return result;

  00060	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00064	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006c	48 8b f0	 mov	 rsi, rax
  0006f	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00074	f3 a4		 rep movsb
  00076	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 426  : }

  0007e	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00085	5f		 pop	 rdi
  00086	5e		 pop	 rsi
  00087	c3		 ret	 0
_mul_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_u16_u16 PROC

; 412  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 413  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 414  :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 415  :     result._const.u16 =t0->u16 *t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	0f af c1	 imul	 eax, ecx
  00060	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 416  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 417  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_mul_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_mul_u8_u8 PROC

; 403  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 404  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 405  :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 406  :     result._const.u8 =t0->u8 *t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	0f af c1	 imul	 eax, ecx
  00060	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 407  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 408  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_mul_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_mat4_mat4 PROC

; 374  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 375  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 376  :     
; 377  :     result._const.type =TMAT4;

  0003d	c7 44 24 08 12
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 18

; 378  :     result._const.matrix[0] =t0->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00065	f2 0f 11 44 0c
	10		 movsd	 QWORD PTR result$[rsp+rcx+16], xmm0

; 379  :     result._const.matrix[0] =t0->matrix[0] -t1->matrix[0];

  0006b	b8 08 00 00 00	 mov	 eax, 8
  00070	48 6b c0 00	 imul	 rax, rax, 0
  00074	b9 08 00 00 00	 mov	 ecx, 8
  00079	48 6b c9 00	 imul	 rcx, rcx, 0
  0007d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00085	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0008d	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00093	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 380  :     result._const.matrix[1] =t0->matrix[1] -t1->matrix[1];

  000a8	b8 08 00 00 00	 mov	 eax, 8
  000ad	48 6b c0 01	 imul	 rax, rax, 1
  000b1	b9 08 00 00 00	 mov	 ecx, 8
  000b6	48 6b c9 01	 imul	 rcx, rcx, 1
  000ba	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000c2	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000ca	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000d0	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000d6	b8 08 00 00 00	 mov	 eax, 8
  000db	48 6b c0 01	 imul	 rax, rax, 1
  000df	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 381  :     result._const.matrix[2] =t0->matrix[2] -t1->matrix[2];

  000e5	b8 08 00 00 00	 mov	 eax, 8
  000ea	48 6b c0 02	 imul	 rax, rax, 2
  000ee	b9 08 00 00 00	 mov	 ecx, 8
  000f3	48 6b c9 02	 imul	 rcx, rcx, 2
  000f7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000ff	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00107	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0010d	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00113	b8 08 00 00 00	 mov	 eax, 8
  00118	48 6b c0 02	 imul	 rax, rax, 2
  0011c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 382  :     result._const.matrix[3] =t0->matrix[3] -t1->matrix[3];

  00122	b8 08 00 00 00	 mov	 eax, 8
  00127	48 6b c0 03	 imul	 rax, rax, 3
  0012b	b9 08 00 00 00	 mov	 ecx, 8
  00130	48 6b c9 03	 imul	 rcx, rcx, 3
  00134	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0013c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00144	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0014a	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00150	b8 08 00 00 00	 mov	 eax, 8
  00155	48 6b c0 03	 imul	 rax, rax, 3
  00159	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 383  :     result._const.matrix[4] =t0->matrix[4] -t1->matrix[4];

  0015f	b8 08 00 00 00	 mov	 eax, 8
  00164	48 6b c0 04	 imul	 rax, rax, 4
  00168	b9 08 00 00 00	 mov	 ecx, 8
  0016d	48 6b c9 04	 imul	 rcx, rcx, 4
  00171	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00179	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00181	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00187	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0018d	b8 08 00 00 00	 mov	 eax, 8
  00192	48 6b c0 04	 imul	 rax, rax, 4
  00196	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 384  :     result._const.matrix[5] =t0->matrix[5] -t1->matrix[5];

  0019c	b8 08 00 00 00	 mov	 eax, 8
  001a1	48 6b c0 05	 imul	 rax, rax, 5
  001a5	b9 08 00 00 00	 mov	 ecx, 8
  001aa	48 6b c9 05	 imul	 rcx, rcx, 5
  001ae	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001b6	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001be	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  001c4	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001ca	b8 08 00 00 00	 mov	 eax, 8
  001cf	48 6b c0 05	 imul	 rax, rax, 5
  001d3	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 385  :     result._const.matrix[6] =t0->matrix[6] -t1->matrix[6];

  001d9	b8 08 00 00 00	 mov	 eax, 8
  001de	48 6b c0 06	 imul	 rax, rax, 6
  001e2	b9 08 00 00 00	 mov	 ecx, 8
  001e7	48 6b c9 06	 imul	 rcx, rcx, 6
  001eb	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001f3	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001fb	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00201	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00207	b8 08 00 00 00	 mov	 eax, 8
  0020c	48 6b c0 06	 imul	 rax, rax, 6
  00210	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 386  :     result._const.matrix[7] =t0->matrix[7] -t1->matrix[7];

  00216	b8 08 00 00 00	 mov	 eax, 8
  0021b	48 6b c0 07	 imul	 rax, rax, 7
  0021f	b9 08 00 00 00	 mov	 ecx, 8
  00224	48 6b c9 07	 imul	 rcx, rcx, 7
  00228	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00230	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00238	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0023e	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00244	b8 08 00 00 00	 mov	 eax, 8
  00249	48 6b c0 07	 imul	 rax, rax, 7
  0024d	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 387  :     result._const.matrix[8] =t0->matrix[8] -t1->matrix[8];

  00253	b8 08 00 00 00	 mov	 eax, 8
  00258	48 6b c0 08	 imul	 rax, rax, 8
  0025c	b9 08 00 00 00	 mov	 ecx, 8
  00261	48 6b c9 08	 imul	 rcx, rcx, 8
  00265	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0026d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00275	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0027b	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00281	b8 08 00 00 00	 mov	 eax, 8
  00286	48 6b c0 08	 imul	 rax, rax, 8
  0028a	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 388  :     result._const.matrix[9] =t0->matrix[9] -t1->matrix[9];

  00290	b8 08 00 00 00	 mov	 eax, 8
  00295	48 6b c0 09	 imul	 rax, rax, 9
  00299	b9 08 00 00 00	 mov	 ecx, 8
  0029e	48 6b c9 09	 imul	 rcx, rcx, 9
  002a2	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  002aa	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  002b2	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  002b8	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  002be	b8 08 00 00 00	 mov	 eax, 8
  002c3	48 6b c0 09	 imul	 rax, rax, 9
  002c7	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 389  :     result._const.matrix[10] =t0->matrix[10] -t1->matrix[10];

  002cd	b8 08 00 00 00	 mov	 eax, 8
  002d2	48 6b c0 0a	 imul	 rax, rax, 10
  002d6	b9 08 00 00 00	 mov	 ecx, 8
  002db	48 6b c9 0a	 imul	 rcx, rcx, 10
  002df	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  002e7	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  002ef	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  002f5	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  002fb	b8 08 00 00 00	 mov	 eax, 8
  00300	48 6b c0 0a	 imul	 rax, rax, 10
  00304	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 390  :     result._const.matrix[11] =t0->matrix[11] -t1->matrix[11];

  0030a	b8 08 00 00 00	 mov	 eax, 8
  0030f	48 6b c0 0b	 imul	 rax, rax, 11
  00313	b9 08 00 00 00	 mov	 ecx, 8
  00318	48 6b c9 0b	 imul	 rcx, rcx, 11
  0031c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00324	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0032c	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00332	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00338	b8 08 00 00 00	 mov	 eax, 8
  0033d	48 6b c0 0b	 imul	 rax, rax, 11
  00341	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 391  :     result._const.matrix[12] =t0->matrix[12] -t1->matrix[12];

  00347	b8 08 00 00 00	 mov	 eax, 8
  0034c	48 6b c0 0c	 imul	 rax, rax, 12
  00350	b9 08 00 00 00	 mov	 ecx, 8
  00355	48 6b c9 0c	 imul	 rcx, rcx, 12
  00359	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00361	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00369	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0036f	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00375	b8 08 00 00 00	 mov	 eax, 8
  0037a	48 6b c0 0c	 imul	 rax, rax, 12
  0037e	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 392  :     result._const.matrix[13] =t0->matrix[13] -t1->matrix[13];

  00384	b8 08 00 00 00	 mov	 eax, 8
  00389	48 6b c0 0d	 imul	 rax, rax, 13
  0038d	b9 08 00 00 00	 mov	 ecx, 8
  00392	48 6b c9 0d	 imul	 rcx, rcx, 13
  00396	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0039e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003a6	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  003ac	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  003b2	b8 08 00 00 00	 mov	 eax, 8
  003b7	48 6b c0 0d	 imul	 rax, rax, 13
  003bb	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 393  :     result._const.matrix[14] =t0->matrix[14] -t1->matrix[14];

  003c1	b8 08 00 00 00	 mov	 eax, 8
  003c6	48 6b c0 0e	 imul	 rax, rax, 14
  003ca	b9 08 00 00 00	 mov	 ecx, 8
  003cf	48 6b c9 0e	 imul	 rcx, rcx, 14
  003d3	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  003db	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003e3	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  003e9	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  003ef	b8 08 00 00 00	 mov	 eax, 8
  003f4	48 6b c0 0e	 imul	 rax, rax, 14
  003f8	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 394  :     result._const.matrix[15] =t0->matrix[15] -t1->matrix[15];

  003fe	b8 08 00 00 00	 mov	 eax, 8
  00403	48 6b c0 0f	 imul	 rax, rax, 15
  00407	b9 08 00 00 00	 mov	 ecx, 8
  0040c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00410	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00418	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00420	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00426	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0042c	b8 08 00 00 00	 mov	 eax, 8
  00431	48 6b c0 0f	 imul	 rax, rax, 15
  00435	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 395  :     
; 396  :     return result;

  0043b	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0043f	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00447	48 8b f0	 mov	 rsi, rax
  0044a	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0044f	f3 a4		 rep movsb
  00451	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 397  : }

  00459	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00460	5f		 pop	 rdi
  00461	5e		 pop	 rsi
  00462	c3		 ret	 0
_sub_mat4_mat4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_mat3_mat3 PROC

; 355  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 356  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 357  :     
; 358  :     result._const.type =TMAT3;

  0003d	c7 44 24 08 11
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 17

; 359  :     result._const.matrix[0] =t0->matrix[0] -t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 360  :     result._const.matrix[1] =t0->matrix[1] -t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 361  :     result._const.matrix[2] =t0->matrix[2] -t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 362  :     result._const.matrix[3] =t0->matrix[3] -t1->matrix[3];

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 03	 imul	 rax, rax, 3
  00105	b9 08 00 00 00	 mov	 ecx, 8
  0010a	48 6b c9 03	 imul	 rcx, rcx, 3
  0010e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00116	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0011e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00124	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 03	 imul	 rax, rax, 3
  00133	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 363  :     result._const.matrix[4] =t0->matrix[4] -t1->matrix[4];

  00139	b8 08 00 00 00	 mov	 eax, 8
  0013e	48 6b c0 04	 imul	 rax, rax, 4
  00142	b9 08 00 00 00	 mov	 ecx, 8
  00147	48 6b c9 04	 imul	 rcx, rcx, 4
  0014b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00153	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0015b	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00161	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 04	 imul	 rax, rax, 4
  00170	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 364  :     result._const.matrix[5] =t0->matrix[5] -t1->matrix[5];

  00176	b8 08 00 00 00	 mov	 eax, 8
  0017b	48 6b c0 05	 imul	 rax, rax, 5
  0017f	b9 08 00 00 00	 mov	 ecx, 8
  00184	48 6b c9 05	 imul	 rcx, rcx, 5
  00188	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00190	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00198	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0019e	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001a4	b8 08 00 00 00	 mov	 eax, 8
  001a9	48 6b c0 05	 imul	 rax, rax, 5
  001ad	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 365  :     result._const.matrix[6] =t0->matrix[6] -t1->matrix[6];

  001b3	b8 08 00 00 00	 mov	 eax, 8
  001b8	48 6b c0 06	 imul	 rax, rax, 6
  001bc	b9 08 00 00 00	 mov	 ecx, 8
  001c1	48 6b c9 06	 imul	 rcx, rcx, 6
  001c5	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001cd	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001d5	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  001db	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001e1	b8 08 00 00 00	 mov	 eax, 8
  001e6	48 6b c0 06	 imul	 rax, rax, 6
  001ea	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 366  :     result._const.matrix[7] =t0->matrix[7] -t1->matrix[7];

  001f0	b8 08 00 00 00	 mov	 eax, 8
  001f5	48 6b c0 07	 imul	 rax, rax, 7
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 07	 imul	 rcx, rcx, 7
  00202	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0020a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00212	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00218	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0021e	b8 08 00 00 00	 mov	 eax, 8
  00223	48 6b c0 07	 imul	 rax, rax, 7
  00227	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 367  :     result._const.matrix[8] =t0->matrix[8] -t1->matrix[8];

  0022d	b8 08 00 00 00	 mov	 eax, 8
  00232	48 6b c0 08	 imul	 rax, rax, 8
  00236	b9 08 00 00 00	 mov	 ecx, 8
  0023b	48 6b c9 08	 imul	 rcx, rcx, 8
  0023f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00247	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0024f	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00255	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0025b	b8 08 00 00 00	 mov	 eax, 8
  00260	48 6b c0 08	 imul	 rax, rax, 8
  00264	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 368  :     
; 369  :     return result;

  0026a	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0026e	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00276	48 8b f0	 mov	 rsi, rax
  00279	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0027e	f3 a4		 rep movsb
  00280	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 370  : }

  00288	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0028f	5f		 pop	 rdi
  00290	5e		 pop	 rsi
  00291	c3		 ret	 0
_sub_mat3_mat3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_mat2_mat2 PROC

; 341  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 342  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 343  :     
; 344  :     result._const.type =TMAT2;

  0003d	c7 44 24 08 10
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 16

; 345  :     result._const.matrix[0] = t0->matrix[0] -t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 346  :     result._const.matrix[1] = t0->matrix[1] -t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 347  :     result._const.matrix[2] = t0->matrix[2] -t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 348  :     result._const.matrix[3] = t0->matrix[3] -t1->matrix[3];

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 03	 imul	 rax, rax, 3
  00105	b9 08 00 00 00	 mov	 ecx, 8
  0010a	48 6b c9 03	 imul	 rcx, rcx, 3
  0010e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00116	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0011e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00124	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 03	 imul	 rax, rax, 3
  00133	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 349  :     
; 350  :     return result;

  00139	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0013d	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00145	48 8b f0	 mov	 rsi, rax
  00148	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0014d	f3 a4		 rep movsb
  0014f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 351  : }

  00157	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0015e	5f		 pop	 rdi
  0015f	5e		 pop	 rsi
  00160	c3		 ret	 0
_sub_mat2_mat2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_vec4_vec4 PROC

; 327  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 328  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 329  :     
; 330  :     result._const.type =TVEC4;

  0003d	c7 44 24 08 0f
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 15

; 331  :     result._const.matrix[0] =t0->matrix[0] -t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 332  :     result._const.matrix[1] =t0->matrix[1] -t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 333  :     result._const.matrix[2] =t0->matrix[2] -t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 334  :     result._const.matrix[3] =t0->matrix[3] -t1->matrix[3];

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 03	 imul	 rax, rax, 3
  00105	b9 08 00 00 00	 mov	 ecx, 8
  0010a	48 6b c9 03	 imul	 rcx, rcx, 3
  0010e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00116	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0011e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00124	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 03	 imul	 rax, rax, 3
  00133	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 335  :     
; 336  :     return result;

  00139	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0013d	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00145	48 8b f0	 mov	 rsi, rax
  00148	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0014d	f3 a4		 rep movsb
  0014f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 337  : }

  00157	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0015e	5f		 pop	 rdi
  0015f	5e		 pop	 rsi
  00160	c3		 ret	 0
_sub_vec4_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_vec3_vec3 PROC

; 314  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 315  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 316  :     
; 317  :     result._const.type =TVEC3;

  0003d	c7 44 24 08 0e
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 14

; 318  :     result._const.matrix[0] =t0->matrix[0] -t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 319  :     result._const.matrix[1] =t0->matrix[1] -t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 320  :     result._const.matrix[2] =t0->matrix[2] -t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 321  :     
; 322  :     return result;

  000fc	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00100	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00110	f3 a4		 rep movsb
  00112	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 323  : }

  0011a	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00121	5f		 pop	 rdi
  00122	5e		 pop	 rsi
  00123	c3		 ret	 0
_sub_vec3_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_vec2_vec2 PROC

; 302  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 303  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 304  :     
; 305  :     result._const.type =TVEC2;

  0003d	c7 44 24 08 0d
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 13

; 306  :     result._const.matrix[0] =t0->matrix[0] -t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 307  :     result._const.matrix[1] =t0->matrix[1] -t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 5c 44 0f
	08		 subsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 308  :     
; 309  :     return result;

  000bf	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  000c3	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000cb	48 8b f0	 mov	 rsi, rax
  000ce	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000d3	f3 a4		 rep movsb
  000d5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 310  : }

  000dd	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000e4	5f		 pop	 rdi
  000e5	5e		 pop	 rsi
  000e6	c3		 ret	 0
_sub_vec2_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_real_real PROC

; 293  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 294  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 295  :     result._const.type =TREAL;

  0003d	c7 44 24 08 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 296  :     result._const.real =t0->real -t1->real;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 5c 41 08	 subsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 297  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 298  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_sub_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_f64_f64 PROC

; 284  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 285  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 286  :     result._const.type =TF64;

  0003d	c7 44 24 08 0a
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 10

; 287  :     result._const.f64 =t0->f64 -t1->f64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 5c 41 08	 subsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 288  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 289  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_sub_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_f32_f32 PROC

; 275  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 276  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 277  :     result._const.type =TF32;

  0003d	c7 44 24 08 09
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 9

; 278  :     result._const.f32 =t0->f32 -t1->f32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005a	f3 0f 5c 41 08	 subss	 xmm0, DWORD PTR [rcx+8]
  0005f	f3 0f 11 44 24
	10		 movss	 DWORD PTR result$[rsp+16], xmm0

; 279  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 280  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_sub_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_i64_i64 PROC

; 266  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 267  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 268  :     result._const.type =TI64;

  0003d	c7 44 24 08 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 269  :     result._const.i64 =t0->i64 -t1->i64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 2b c1	 sub	 rax, rcx
  00060	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 270  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 271  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_sub_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_i32_i32 PROC

; 257  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 258  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 259  :     result._const.type =TI32;

  0003d	c7 44 24 08 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 260  :     result._const.i32 =t0->i32 -t1->i32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00058	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0005b	2b c1		 sub	 eax, ecx
  0005d	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 261  :     return result;

  00061	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00065	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006d	48 8b f0	 mov	 rsi, rax
  00070	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00075	f3 a4		 rep movsb
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 262  : }

  0007f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00086	5f		 pop	 rdi
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
_sub_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_i16_i16 PROC

; 248  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 249  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 250  :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 251  :     result._const.i16 =t0->i16 -t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	2b c1		 sub	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 252  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 253  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_sub_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_i8_i8 PROC

; 239  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 240  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 241  :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 242  :     result._const.i8 =t0->i8 -t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	2b c1		 sub	 eax, ecx
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 243  :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 244  : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_sub_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_u64_u64 PROC

; 230  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 231  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 232  :     result._const.type =TU64;

  0003d	c7 44 24 08 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 233  :     result._const.u64 =t0->u64 -t1->u64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00059	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0005d	48 2b c1	 sub	 rax, rcx
  00060	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 234  :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 235  : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_sub_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_u32_u32 PROC

; 221  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 222  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 223  :     result._const.type =TU32;

  0003d	c7 44 24 08 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 224  :     result._const.u32 =t0->u32 -t1->u32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	8b 49 08	 mov	 ecx, DWORD PTR [rcx+8]
  00058	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  0005b	2b c1		 sub	 eax, ecx
  0005d	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 225  :     return result;

  00061	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00065	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006d	48 8b f0	 mov	 rsi, rax
  00070	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00075	f3 a4		 rep movsb
  00077	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 226  : }

  0007f	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00086	5f		 pop	 rdi
  00087	5e		 pop	 rsi
  00088	c3		 ret	 0
_sub_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_u16_u16 PROC

; 212  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 213  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 214  :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 215  :     result._const.u16 =t0->u16 -t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	2b c1		 sub	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 216  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 217  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_sub_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_sub_u8_u8 PROC

; 203  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 204  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 205  :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 206  :     result._const.u16 =t0->u8 -t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	2b c1		 sub	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 207  :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 208  : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_sub_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_mat4_mat4 PROC

; 174  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 175  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 176  :     
; 177  :     result._const.type =TMAT4;

  0003d	c7 44 24 08 12
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 18

; 178  :     result._const.matrix[0] =t0->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00065	f2 0f 11 44 0c
	10		 movsd	 QWORD PTR result$[rsp+rcx+16], xmm0

; 179  :     result._const.matrix[0] =t0->matrix[0] +t1->matrix[0];

  0006b	b8 08 00 00 00	 mov	 eax, 8
  00070	48 6b c0 00	 imul	 rax, rax, 0
  00074	b9 08 00 00 00	 mov	 ecx, 8
  00079	48 6b c9 00	 imul	 rcx, rcx, 0
  0007d	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00085	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0008d	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00093	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00099	b8 08 00 00 00	 mov	 eax, 8
  0009e	48 6b c0 00	 imul	 rax, rax, 0
  000a2	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 180  :     result._const.matrix[1] =t0->matrix[1] +t1->matrix[1];

  000a8	b8 08 00 00 00	 mov	 eax, 8
  000ad	48 6b c0 01	 imul	 rax, rax, 1
  000b1	b9 08 00 00 00	 mov	 ecx, 8
  000b6	48 6b c9 01	 imul	 rcx, rcx, 1
  000ba	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000c2	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000ca	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000d0	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000d6	b8 08 00 00 00	 mov	 eax, 8
  000db	48 6b c0 01	 imul	 rax, rax, 1
  000df	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 181  :     result._const.matrix[2] =t0->matrix[2] +t1->matrix[2];

  000e5	b8 08 00 00 00	 mov	 eax, 8
  000ea	48 6b c0 02	 imul	 rax, rax, 2
  000ee	b9 08 00 00 00	 mov	 ecx, 8
  000f3	48 6b c9 02	 imul	 rcx, rcx, 2
  000f7	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000ff	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00107	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0010d	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00113	b8 08 00 00 00	 mov	 eax, 8
  00118	48 6b c0 02	 imul	 rax, rax, 2
  0011c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 182  :     result._const.matrix[3] =t0->matrix[3] +t1->matrix[3];

  00122	b8 08 00 00 00	 mov	 eax, 8
  00127	48 6b c0 03	 imul	 rax, rax, 3
  0012b	b9 08 00 00 00	 mov	 ecx, 8
  00130	48 6b c9 03	 imul	 rcx, rcx, 3
  00134	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0013c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00144	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0014a	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00150	b8 08 00 00 00	 mov	 eax, 8
  00155	48 6b c0 03	 imul	 rax, rax, 3
  00159	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 183  :     result._const.matrix[4] =t0->matrix[4] +t1->matrix[4];

  0015f	b8 08 00 00 00	 mov	 eax, 8
  00164	48 6b c0 04	 imul	 rax, rax, 4
  00168	b9 08 00 00 00	 mov	 ecx, 8
  0016d	48 6b c9 04	 imul	 rcx, rcx, 4
  00171	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00179	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00181	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00187	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0018d	b8 08 00 00 00	 mov	 eax, 8
  00192	48 6b c0 04	 imul	 rax, rax, 4
  00196	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 184  :     result._const.matrix[5] =t0->matrix[5] +t1->matrix[5];

  0019c	b8 08 00 00 00	 mov	 eax, 8
  001a1	48 6b c0 05	 imul	 rax, rax, 5
  001a5	b9 08 00 00 00	 mov	 ecx, 8
  001aa	48 6b c9 05	 imul	 rcx, rcx, 5
  001ae	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001b6	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001be	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  001c4	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001ca	b8 08 00 00 00	 mov	 eax, 8
  001cf	48 6b c0 05	 imul	 rax, rax, 5
  001d3	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 185  :     result._const.matrix[6] =t0->matrix[6] +t1->matrix[6];

  001d9	b8 08 00 00 00	 mov	 eax, 8
  001de	48 6b c0 06	 imul	 rax, rax, 6
  001e2	b9 08 00 00 00	 mov	 ecx, 8
  001e7	48 6b c9 06	 imul	 rcx, rcx, 6
  001eb	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001f3	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001fb	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00201	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00207	b8 08 00 00 00	 mov	 eax, 8
  0020c	48 6b c0 06	 imul	 rax, rax, 6
  00210	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 186  :     result._const.matrix[7] =t0->matrix[7] +t1->matrix[7];

  00216	b8 08 00 00 00	 mov	 eax, 8
  0021b	48 6b c0 07	 imul	 rax, rax, 7
  0021f	b9 08 00 00 00	 mov	 ecx, 8
  00224	48 6b c9 07	 imul	 rcx, rcx, 7
  00228	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00230	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00238	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0023e	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00244	b8 08 00 00 00	 mov	 eax, 8
  00249	48 6b c0 07	 imul	 rax, rax, 7
  0024d	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 187  :     result._const.matrix[8] =t0->matrix[8] +t1->matrix[8];

  00253	b8 08 00 00 00	 mov	 eax, 8
  00258	48 6b c0 08	 imul	 rax, rax, 8
  0025c	b9 08 00 00 00	 mov	 ecx, 8
  00261	48 6b c9 08	 imul	 rcx, rcx, 8
  00265	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0026d	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00275	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0027b	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00281	b8 08 00 00 00	 mov	 eax, 8
  00286	48 6b c0 08	 imul	 rax, rax, 8
  0028a	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 188  :     result._const.matrix[9] =t0->matrix[9] +t1->matrix[9];

  00290	b8 08 00 00 00	 mov	 eax, 8
  00295	48 6b c0 09	 imul	 rax, rax, 9
  00299	b9 08 00 00 00	 mov	 ecx, 8
  0029e	48 6b c9 09	 imul	 rcx, rcx, 9
  002a2	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  002aa	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  002b2	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  002b8	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  002be	b8 08 00 00 00	 mov	 eax, 8
  002c3	48 6b c0 09	 imul	 rax, rax, 9
  002c7	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 189  :     result._const.matrix[10] =t0->matrix[10] +t1->matrix[10];

  002cd	b8 08 00 00 00	 mov	 eax, 8
  002d2	48 6b c0 0a	 imul	 rax, rax, 10
  002d6	b9 08 00 00 00	 mov	 ecx, 8
  002db	48 6b c9 0a	 imul	 rcx, rcx, 10
  002df	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  002e7	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  002ef	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  002f5	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  002fb	b8 08 00 00 00	 mov	 eax, 8
  00300	48 6b c0 0a	 imul	 rax, rax, 10
  00304	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 190  :     result._const.matrix[11] =t0->matrix[11] +t1->matrix[11];

  0030a	b8 08 00 00 00	 mov	 eax, 8
  0030f	48 6b c0 0b	 imul	 rax, rax, 11
  00313	b9 08 00 00 00	 mov	 ecx, 8
  00318	48 6b c9 0b	 imul	 rcx, rcx, 11
  0031c	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00324	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0032c	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00332	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00338	b8 08 00 00 00	 mov	 eax, 8
  0033d	48 6b c0 0b	 imul	 rax, rax, 11
  00341	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 191  :     result._const.matrix[12] =t0->matrix[12] +t1->matrix[12];

  00347	b8 08 00 00 00	 mov	 eax, 8
  0034c	48 6b c0 0c	 imul	 rax, rax, 12
  00350	b9 08 00 00 00	 mov	 ecx, 8
  00355	48 6b c9 0c	 imul	 rcx, rcx, 12
  00359	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00361	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00369	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0036f	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00375	b8 08 00 00 00	 mov	 eax, 8
  0037a	48 6b c0 0c	 imul	 rax, rax, 12
  0037e	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 192  :     result._const.matrix[13] =t0->matrix[13] +t1->matrix[13];

  00384	b8 08 00 00 00	 mov	 eax, 8
  00389	48 6b c0 0d	 imul	 rax, rax, 13
  0038d	b9 08 00 00 00	 mov	 ecx, 8
  00392	48 6b c9 0d	 imul	 rcx, rcx, 13
  00396	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0039e	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003a6	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  003ac	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  003b2	b8 08 00 00 00	 mov	 eax, 8
  003b7	48 6b c0 0d	 imul	 rax, rax, 13
  003bb	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 193  :     result._const.matrix[14] =t0->matrix[14] +t1->matrix[14];

  003c1	b8 08 00 00 00	 mov	 eax, 8
  003c6	48 6b c0 0e	 imul	 rax, rax, 14
  003ca	b9 08 00 00 00	 mov	 ecx, 8
  003cf	48 6b c9 0e	 imul	 rcx, rcx, 14
  003d3	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  003db	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  003e3	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  003e9	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  003ef	b8 08 00 00 00	 mov	 eax, 8
  003f4	48 6b c0 0e	 imul	 rax, rax, 14
  003f8	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 194  :     result._const.matrix[15] =t0->matrix[15] +t1->matrix[15];

  003fe	b8 08 00 00 00	 mov	 eax, 8
  00403	48 6b c0 0f	 imul	 rax, rax, 15
  00407	b9 08 00 00 00	 mov	 ecx, 8
  0040c	48 6b c9 0f	 imul	 rcx, rcx, 15
  00410	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00418	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00420	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00426	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0042c	b8 08 00 00 00	 mov	 eax, 8
  00431	48 6b c0 0f	 imul	 rax, rax, 15
  00435	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 195  :     
; 196  :     return result;

  0043b	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0043f	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00447	48 8b f0	 mov	 rsi, rax
  0044a	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0044f	f3 a4		 rep movsb
  00451	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 197  : }

  00459	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00460	5f		 pop	 rdi
  00461	5e		 pop	 rsi
  00462	c3		 ret	 0
_add_mat4_mat4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_mat3_mat3 PROC

; 155  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 156  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 157  :     
; 158  :     result._const.type =TMAT3;

  0003d	c7 44 24 08 11
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 17

; 159  :     result._const.matrix[0] =t0->matrix[0] +t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 160  :     result._const.matrix[1] =t0->matrix[1] +t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 161  :     result._const.matrix[2] =t0->matrix[2] +t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 162  :     result._const.matrix[3] =t0->matrix[3] +t1->matrix[3];

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 03	 imul	 rax, rax, 3
  00105	b9 08 00 00 00	 mov	 ecx, 8
  0010a	48 6b c9 03	 imul	 rcx, rcx, 3
  0010e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00116	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0011e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00124	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 03	 imul	 rax, rax, 3
  00133	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 163  :     result._const.matrix[4] =t0->matrix[4] +t1->matrix[4];

  00139	b8 08 00 00 00	 mov	 eax, 8
  0013e	48 6b c0 04	 imul	 rax, rax, 4
  00142	b9 08 00 00 00	 mov	 ecx, 8
  00147	48 6b c9 04	 imul	 rcx, rcx, 4
  0014b	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00153	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0015b	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00161	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00167	b8 08 00 00 00	 mov	 eax, 8
  0016c	48 6b c0 04	 imul	 rax, rax, 4
  00170	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 164  :     result._const.matrix[5] =t0->matrix[5] +t1->matrix[5];

  00176	b8 08 00 00 00	 mov	 eax, 8
  0017b	48 6b c0 05	 imul	 rax, rax, 5
  0017f	b9 08 00 00 00	 mov	 ecx, 8
  00184	48 6b c9 05	 imul	 rcx, rcx, 5
  00188	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00190	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00198	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0019e	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001a4	b8 08 00 00 00	 mov	 eax, 8
  001a9	48 6b c0 05	 imul	 rax, rax, 5
  001ad	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 165  :     result._const.matrix[6] =t0->matrix[6] +t1->matrix[6];

  001b3	b8 08 00 00 00	 mov	 eax, 8
  001b8	48 6b c0 06	 imul	 rax, rax, 6
  001bc	b9 08 00 00 00	 mov	 ecx, 8
  001c1	48 6b c9 06	 imul	 rcx, rcx, 6
  001c5	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  001cd	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  001d5	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  001db	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  001e1	b8 08 00 00 00	 mov	 eax, 8
  001e6	48 6b c0 06	 imul	 rax, rax, 6
  001ea	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 166  :     result._const.matrix[7] =t0->matrix[7] +t1->matrix[7];

  001f0	b8 08 00 00 00	 mov	 eax, 8
  001f5	48 6b c0 07	 imul	 rax, rax, 7
  001f9	b9 08 00 00 00	 mov	 ecx, 8
  001fe	48 6b c9 07	 imul	 rcx, rcx, 7
  00202	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0020a	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00212	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00218	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0021e	b8 08 00 00 00	 mov	 eax, 8
  00223	48 6b c0 07	 imul	 rax, rax, 7
  00227	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 167  :     result._const.matrix[8] =t0->matrix[8] +t1->matrix[8];

  0022d	b8 08 00 00 00	 mov	 eax, 8
  00232	48 6b c0 08	 imul	 rax, rax, 8
  00236	b9 08 00 00 00	 mov	 ecx, 8
  0023b	48 6b c9 08	 imul	 rcx, rcx, 8
  0023f	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00247	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0024f	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00255	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0025b	b8 08 00 00 00	 mov	 eax, 8
  00260	48 6b c0 08	 imul	 rax, rax, 8
  00264	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 168  :     
; 169  :     return result;

  0026a	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0026e	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00276	48 8b f0	 mov	 rsi, rax
  00279	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0027e	f3 a4		 rep movsb
  00280	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 170  : }

  00288	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0028f	5f		 pop	 rdi
  00290	5e		 pop	 rsi
  00291	c3		 ret	 0
_add_mat3_mat3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_mat2_mat2 PROC

; 141  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 142  :     CalcResult result={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 143  :     
; 144  :     result._const.type =TMAT2;

  0003d	c7 44 24 08 10
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 16

; 145  :     result._const.matrix[0] = t0->matrix[0] +t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 146  :     result._const.matrix[1] = t0->matrix[1] +t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 147  :     result._const.matrix[2] = t0->matrix[2] +t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 148  :     result._const.matrix[3] = t0->matrix[3] +t1->matrix[3];

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 03	 imul	 rax, rax, 3
  00105	b9 08 00 00 00	 mov	 ecx, 8
  0010a	48 6b c9 03	 imul	 rcx, rcx, 3
  0010e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00116	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0011e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00124	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 03	 imul	 rax, rax, 3
  00133	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 149  :     
; 150  :     return result;

  00139	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0013d	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00145	48 8b f0	 mov	 rsi, rax
  00148	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0014d	f3 a4		 rep movsb
  0014f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 151  : }

  00157	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0015e	5f		 pop	 rdi
  0015f	5e		 pop	 rsi
  00160	c3		 ret	 0
_add_mat2_mat2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_vec4_vec4 PROC

; 127  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 128  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 129  :     
; 130  :     result._const.type =TVEC4;

  0003d	c7 44 24 08 0f
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 15

; 131  :     result._const.matrix[0] =t0->matrix[0] +t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 132  :     result._const.matrix[1] =t0->matrix[1] +t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 133  :     result._const.matrix[2] =t0->matrix[2] +t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 134  :     result._const.matrix[3] =t0->matrix[3] +t1->matrix[3];

  000fc	b8 08 00 00 00	 mov	 eax, 8
  00101	48 6b c0 03	 imul	 rax, rax, 3
  00105	b9 08 00 00 00	 mov	 ecx, 8
  0010a	48 6b c9 03	 imul	 rcx, rcx, 3
  0010e	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00116	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  0011e	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  00124	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  0012a	b8 08 00 00 00	 mov	 eax, 8
  0012f	48 6b c0 03	 imul	 rax, rax, 3
  00133	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 135  :     
; 136  :     return result;

  00139	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  0013d	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00145	48 8b f0	 mov	 rsi, rax
  00148	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0014d	f3 a4		 rep movsb
  0014f	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 137  : }

  00157	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0015e	5f		 pop	 rdi
  0015f	5e		 pop	 rsi
  00160	c3		 ret	 0
_add_vec4_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_vec3_vec3 PROC

; 114  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 115  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 116  :     
; 117  :     result._const.type =TVEC3;

  0003d	c7 44 24 08 0e
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 14

; 118  :     result._const.matrix[0] =t0->matrix[0] + t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 119  :     result._const.matrix[1] =t0->matrix[1] + t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 120  :     result._const.matrix[2] =t0->matrix[2] + t1->matrix[2];

  000bf	b8 08 00 00 00	 mov	 eax, 8
  000c4	48 6b c0 02	 imul	 rax, rax, 2
  000c8	b9 08 00 00 00	 mov	 ecx, 8
  000cd	48 6b c9 02	 imul	 rcx, rcx, 2
  000d1	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  000d9	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000e1	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000e7	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000ed	b8 08 00 00 00	 mov	 eax, 8
  000f2	48 6b c0 02	 imul	 rax, rax, 2
  000f6	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 121  :     
; 122  :     return result;

  000fc	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00100	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00108	48 8b f0	 mov	 rsi, rax
  0010b	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00110	f3 a4		 rep movsb
  00112	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 123  : }

  0011a	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00121	5f		 pop	 rdi
  00122	5e		 pop	 rsi
  00123	c3		 ret	 0
_add_vec3_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_vec2_vec2 PROC

; 102  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 103  :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 104  :     
; 105  :     result._const.type =TVEC2;

  0003d	c7 44 24 08 0d
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 13

; 106  :     result._const.matrix[0] =t0->matrix[0] + t1->matrix[0];

  00045	b8 08 00 00 00	 mov	 eax, 8
  0004a	48 6b c0 00	 imul	 rax, rax, 0
  0004e	b9 08 00 00 00	 mov	 ecx, 8
  00053	48 6b c9 00	 imul	 rcx, rcx, 0
  00057	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0005f	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  00067	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0006d	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  00073	b8 08 00 00 00	 mov	 eax, 8
  00078	48 6b c0 00	 imul	 rax, rax, 0
  0007c	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 107  :     result._const.matrix[1] =t0->matrix[1] + t1->matrix[1];

  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	b9 08 00 00 00	 mov	 ecx, 8
  00090	48 6b c9 01	 imul	 rcx, rcx, 1
  00094	48 8b 94 24 b8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0009c	48 8b bc 24 c0
	00 00 00	 mov	 rdi, QWORD PTR t1$[rsp]
  000a4	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  000aa	f2 0f 58 44 0f
	08		 addsd	 xmm0, QWORD PTR [rdi+rcx+8]
  000b0	b8 08 00 00 00	 mov	 eax, 8
  000b5	48 6b c0 01	 imul	 rax, rax, 1
  000b9	f2 0f 11 44 04
	10		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 108  :     
; 109  :     return result;

  000bf	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  000c3	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000cb	48 8b f0	 mov	 rsi, rax
  000ce	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000d3	f3 a4		 rep movsb
  000d5	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 110  : }

  000dd	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  000e4	5f		 pop	 rdi
  000e5	5e		 pop	 rsi
  000e6	c3		 ret	 0
_add_vec2_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_real_real PROC

; 93   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 94   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 95   :     result._const.type =TREAL;

  0003d	c7 44 24 08 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 96   :     result._const.real =t0->real + t1->real;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 58 41 08	 addsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 97   :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 98   : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_add_real_real ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_f64_f64 PROC

; 84   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 85   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 86   :     result._const.type =TF64;

  0003d	c7 44 24 08 0a
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 10

; 87   :     result._const.f64 =t0->f64 + t1->f64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  0005a	f2 0f 58 41 08	 addsd	 xmm0, QWORD PTR [rcx+8]
  0005f	f2 0f 11 44 24
	10		 movsd	 QWORD PTR result$[rsp+16], xmm0

; 88   :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 89   : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_add_f64_f64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_f32_f32 PROC

; 75   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 76   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 77   :     result._const.type =TF32;

  0003d	c7 44 24 08 09
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 9

; 78   :     result._const.f32 =t0->f32 + t1->f32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00055	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [rax+8]
  0005a	f3 0f 58 41 08	 addss	 xmm0, DWORD PTR [rcx+8]
  0005f	f3 0f 11 44 24
	10		 movss	 DWORD PTR result$[rsp+16], xmm0

; 79   :     return result;

  00065	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00069	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00071	48 8b f0	 mov	 rsi, rax
  00074	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00079	f3 a4		 rep movsb
  0007b	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 80   : }

  00083	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  0008a	5f		 pop	 rdi
  0008b	5e		 pop	 rsi
  0008c	c3		 ret	 0
_add_f32_f32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_i64_i64 PROC

; 66   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 67   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 68   :     result._const.type =TI64;

  0003d	c7 44 24 08 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 69   :     result._const.i64 =t0->i64 + t1->i64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0005d	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 70   :     return result;

  00062	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00066	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006e	48 8b f0	 mov	 rsi, rax
  00071	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00076	f3 a4		 rep movsb
  00078	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 71   : }

  00080	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00087	5f		 pop	 rdi
  00088	5e		 pop	 rsi
  00089	c3		 ret	 0
_add_i64_i64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_i32_i32 PROC

; 57   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 58   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 59   :     result._const.type =TI32;

  0003d	c7 44 24 08 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 60   :     result._const.i32 =t0->i32 + t1->i32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00050	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00058	03 41 08	 add	 eax, DWORD PTR [rcx+8]
  0005b	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 61   :     return result;

  0005f	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00063	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006b	48 8b f0	 mov	 rsi, rax
  0006e	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00073	f3 a4		 rep movsb
  00075	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 62   : }

  0007d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00084	5f		 pop	 rdi
  00085	5e		 pop	 rsi
  00086	c3		 ret	 0
_add_i32_i32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_i16_i16 PROC

; 48   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 49   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 50   :     result._const.type =TI16;

  0003d	c7 44 24 08 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 51   :     result._const.i16 =t0->i16 + t1->i16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f bf 49 08	 movsx	 ecx, WORD PTR [rcx+8]
  0005d	03 c1		 add	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 52   :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 53   : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_add_i16_i16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_i8_i8 PROC

; 39   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 40   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 41   :     result._const.type =TI8;

  0003d	c7 44 24 08 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 42   :     result._const.i8 =t0->i8 + t1->i8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f be 49 08	 movsx	 ecx, BYTE PTR [rcx+8]
  0005d	03 c1		 add	 eax, ecx
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 43   :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 44   : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_add_i8_i8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_u64_u64 PROC

; 30   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 31   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 32   :     result._const.type =TU64;

  0003d	c7 44 24 08 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 33   :     result._const.u64 =t0->u64 + t1->u64;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	48 03 41 08	 add	 rax, QWORD PTR [rcx+8]
  0005d	48 89 44 24 10	 mov	 QWORD PTR result$[rsp+16], rax

; 34   :     return result;

  00062	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00066	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006e	48 8b f0	 mov	 rsi, rax
  00071	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00076	f3 a4		 rep movsb
  00078	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 35   : }

  00080	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00087	5f		 pop	 rdi
  00088	5e		 pop	 rsi
  00089	c3		 ret	 0
_add_u64_u64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_u32_u32 PROC

; 21   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 22   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 23   :     result._const.type =TU32;

  0003d	c7 44 24 08 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 24   :     result._const.u32 =t0->u32 + t1->u32;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	8b 40 08	 mov	 eax, DWORD PTR [rax+8]
  00050	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00058	03 41 08	 add	 eax, DWORD PTR [rcx+8]
  0005b	89 44 24 10	 mov	 DWORD PTR result$[rsp+16], eax

; 25   :     return result;

  0005f	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00063	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006b	48 8b f0	 mov	 rsi, rax
  0006e	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00073	f3 a4		 rep movsb
  00075	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 26   : }

  0007d	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00084	5f		 pop	 rdi
  00085	5e		 pop	 rsi
  00086	c3		 ret	 0
_add_u32_u32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_u16_u16 PROC

; 12   : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 13   :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 14   :     result._const.type =TU16;

  0003d	c7 44 24 08 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 15   :     result._const.u16 =t0->u16 + t1->u16;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b7 49 08	 movzx	 ecx, WORD PTR [rcx+8]
  0005d	03 c1		 add	 eax, ecx
  0005f	66 89 44 24 10	 mov	 WORD PTR result$[rsp+16], ax

; 16   :     return result;

  00064	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00068	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00070	48 8b f0	 mov	 rsi, rax
  00073	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00078	f3 a4		 rep movsb
  0007a	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 17   : }

  00082	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00089	5f		 pop	 rdi
  0008a	5e		 pop	 rsi
  0008b	c3		 ret	 0
_add_u16_u16 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_func_signatures.c
_TEXT	SEGMENT
result$ = 0
__$ReturnAddress$ = 176
t0$ = 184
t1$ = 192
_add_u8_u8 PROC

; 3    : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 81 ec 98 00
	00 00		 sub	 rsp, 152		; 00000098H

; 4    :     CalcResult result ={.success=1};

  00018	c7 04 24 01 00
	00 00		 mov	 DWORD PTR result$[rsp], 1
  0001f	c7 44 24 08 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00027	c6 44 24 10 00	 mov	 BYTE PTR result$[rsp+16], 0
  0002c	48 8d 44 24 11	 lea	 rax, QWORD PTR result$[rsp+17]
  00031	48 8b f8	 mov	 rdi, rax
  00034	33 c0		 xor	 eax, eax
  00036	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  0003b	f3 aa		 rep stosb

; 5    :     result._const.type =TU8;

  0003d	c7 44 24 08 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 6    :     result._const.u8 =t0->u8 +t1->u8;

  00045	48 8b 84 24 b8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004d	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  00051	48 8b 8c 24 c0
	00 00 00	 mov	 rcx, QWORD PTR t1$[rsp]
  00059	0f b6 49 08	 movzx	 ecx, BYTE PTR [rcx+8]
  0005d	03 c1		 add	 eax, ecx
  0005f	88 44 24 10	 mov	 BYTE PTR result$[rsp+16], al

; 7    :     return result;

  00063	48 8d 04 24	 lea	 rax, QWORD PTR result$[rsp]
  00067	48 8b bc 24 b0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0006f	48 8b f0	 mov	 rsi, rax
  00072	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00077	f3 a4		 rep movsb
  00079	48 8b 84 24 b0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 8    : }

  00081	48 81 c4 98 00
	00 00		 add	 rsp, 152		; 00000098H
  00088	5f		 pop	 rdi
  00089	5e		 pop	 rsi
  0008a	c3		 ret	 0
_add_u8_u8 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
i$1 = 32
result$ = 40
funcName$ = 64
LookupFunction PROC

; 592  : {

$LN7:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 593  :     Function *result=NULL;

  00009	48 c7 44 24 28
	00 00 00 00	 mov	 QWORD PTR result$[rsp], 0

; 594  :     for (int i=0;

  00012	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR i$1[rsp], 0
  0001a	eb 0a		 jmp	 SHORT $LN4@LookupFunc
$LN2@LookupFunc:

; 596  :          i++)

  0001c	8b 44 24 20	 mov	 eax, DWORD PTR i$1[rsp]
  00020	ff c0		 inc	 eax
  00022	89 44 24 20	 mov	 DWORD PTR i$1[rsp], eax
$LN4@LookupFunc:

; 595  :          i<(sizeof(_functions)/sizeof(Function));

  00026	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  0002b	48 83 f8 15	 cmp	 rax, 21
  0002f	73 41		 jae	 SHORT $LN3@LookupFunc

; 597  :     {
; 598  :         if (IsStringEqual(funcName, _functions[i].name))

  00031	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00036	48 6b c0 18	 imul	 rax, rax, 24
  0003a	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_functions
  00041	48 8b 14 01	 mov	 rdx, QWORD PTR [rcx+rax]
  00045	48 8b 4c 24 40	 mov	 rcx, QWORD PTR funcName$[rsp]
  0004a	e8 00 00 00 00	 call	 IsStringEqual
  0004f	85 c0		 test	 eax, eax
  00051	74 1d		 je	 SHORT $LN5@LookupFunc

; 599  :         {
; 600  :             result =&_functions[i];

  00053	48 63 44 24 20	 movsxd	 rax, DWORD PTR i$1[rsp]
  00058	48 6b c0 18	 imul	 rax, rax, 24
  0005c	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_functions
  00063	48 03 c8	 add	 rcx, rax
  00066	48 8b c1	 mov	 rax, rcx
  00069	48 89 44 24 28	 mov	 QWORD PTR result$[rsp], rax

; 601  :             break;

  0006e	eb 02		 jmp	 SHORT $LN3@LookupFunc
$LN5@LookupFunc:

; 602  :         }
; 603  :     }

  00070	eb aa		 jmp	 SHORT $LN2@LookupFunc
$LN3@LookupFunc:

; 604  :     return result;

  00072	48 8b 44 24 28	 mov	 rax, QWORD PTR result$[rsp]

; 605  : }

  00077	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0007b	c3		 ret	 0
LookupFunction ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
count$ = 0
tv93 = 4
result$ = 8
str0$ = 32
str1$ = 40
IsStringEqual PROC

; 576  : {

$LN7:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 18	 sub	 rsp, 24

; 577  :     _u32 count=0;

  0000e	c7 04 24 00 00
	00 00		 mov	 DWORD PTR count$[rsp], 0
$LN2@IsStringEq:

; 578  :     _bool result;
; 579  :     while (str0[count]
; 580  :            && str1[count]
; 581  :            && str0[count]==str1[count])

  00015	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00018	48 8b 4c 24 20	 mov	 rcx, QWORD PTR str0$[rsp]
  0001d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00021	85 c0		 test	 eax, eax
  00023	74 36		 je	 SHORT $LN3@IsStringEq
  00025	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00028	48 8b 4c 24 28	 mov	 rcx, QWORD PTR str1$[rsp]
  0002d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00031	85 c0		 test	 eax, eax
  00033	74 26		 je	 SHORT $LN3@IsStringEq
  00035	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00038	48 8b 4c 24 20	 mov	 rcx, QWORD PTR str0$[rsp]
  0003d	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00041	8b 0c 24	 mov	 ecx, DWORD PTR count$[rsp]
  00044	48 8b 54 24 28	 mov	 rdx, QWORD PTR str1$[rsp]
  00049	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  0004d	3b c1		 cmp	 eax, ecx
  0004f	75 0a		 jne	 SHORT $LN3@IsStringEq

; 582  :     {
; 583  :         count++;

  00051	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  00054	ff c0		 inc	 eax
  00056	89 04 24	 mov	 DWORD PTR count$[rsp], eax

; 584  :     }

  00059	eb ba		 jmp	 SHORT $LN2@IsStringEq
$LN3@IsStringEq:

; 585  :     
; 586  :     result =(str0[count]==str1[count]);

  0005b	8b 04 24	 mov	 eax, DWORD PTR count$[rsp]
  0005e	48 8b 4c 24 20	 mov	 rcx, QWORD PTR str0$[rsp]
  00063	0f be 04 01	 movsx	 eax, BYTE PTR [rcx+rax]
  00067	8b 0c 24	 mov	 ecx, DWORD PTR count$[rsp]
  0006a	48 8b 54 24 28	 mov	 rdx, QWORD PTR str1$[rsp]
  0006f	0f be 0c 0a	 movsx	 ecx, BYTE PTR [rdx+rcx]
  00073	3b c1		 cmp	 eax, ecx
  00075	75 0a		 jne	 SHORT $LN5@IsStringEq
  00077	c7 44 24 04 01
	00 00 00	 mov	 DWORD PTR tv93[rsp], 1
  0007f	eb 08		 jmp	 SHORT $LN6@IsStringEq
$LN5@IsStringEq:
  00081	c7 44 24 04 00
	00 00 00	 mov	 DWORD PTR tv93[rsp], 0
$LN6@IsStringEq:
  00089	8b 44 24 04	 mov	 eax, DWORD PTR tv93[rsp]
  0008d	89 44 24 08	 mov	 DWORD PTR result$[rsp], eax

; 587  :     return result;

  00091	8b 44 24 08	 mov	 eax, DWORD PTR result$[rsp]

; 588  : }

  00095	48 83 c4 18	 add	 rsp, 24
  00099	c3		 ret	 0
IsStringEqual ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
tv72 = 32
buf$ = 64
c$ = 72
t0$ = 80
TypeToString PROC

; 570  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 571  :     return _func_toString[t0->type](buf, c, t0);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	8b 00		 mov	 eax, DWORD PTR [rax]
  00019	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:_func_toString
  00020	48 89 4c 24 20	 mov	 QWORD PTR tv72[rsp], rcx
  00025	4c 8b 44 24 50	 mov	 r8, QWORD PTR t0$[rsp]
  0002a	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  0002e	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00033	4c 8b 4c 24 20	 mov	 r9, QWORD PTR tv72[rsp]
  00038	41 ff 14 c1	 call	 QWORD PTR [r9+rax*8]

; 572  : }

  0003c	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00040	c3		 ret	 0
TypeToString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 144
tv154 = 152
buf$ = 240
c$ = 248
t0$ = 256
_mat4_toString PROC

; 539  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	53		 push	 rbx
  0000f	55		 push	 rbp
  00010	56		 push	 rsi
  00011	57		 push	 rdi
  00012	41 54		 push	 r12
  00014	41 55		 push	 r13
  00016	41 56		 push	 r14
  00018	41 57		 push	 r15
  0001a	48 81 ec a8 00
	00 00		 sub	 rsp, 168		; 000000a8H

; 540  :     int result=snprintf(buf, c, "(%f, %f, %f, %f), (%f, %f, %f, %f), (%f, %f, %f, %f), (%f, %f, %f))", t0->matrix[0], t0->matrix[1], t0->matrix[2], t0->matrix[4], t0->matrix[5], t0->matrix[6], t0->matrix[7], t0->matrix[8], t0->matrix[9], t0->matrix[10], t0->matrix[11], t0->matrix[12], t0->matrix[13], t0->matrix[14], t0->matrix[15]);

  00021	b8 08 00 00 00	 mov	 eax, 8
  00026	48 6b c0 0f	 imul	 rax, rax, 15
  0002a	b9 08 00 00 00	 mov	 ecx, 8
  0002f	48 6b c9 0e	 imul	 rcx, rcx, 14
  00033	ba 08 00 00 00	 mov	 edx, 8
  00038	48 6b d2 0d	 imul	 rdx, rdx, 13
  0003c	41 b8 08 00 00
	00		 mov	 r8d, 8
  00042	4d 6b c0 0c	 imul	 r8, r8, 12
  00046	41 b9 08 00 00
	00		 mov	 r9d, 8
  0004c	4d 6b c9 0b	 imul	 r9, r9, 11
  00050	41 ba 08 00 00
	00		 mov	 r10d, 8
  00056	4d 6b d2 0a	 imul	 r10, r10, 10
  0005a	41 bb 08 00 00
	00		 mov	 r11d, 8
  00060	4d 6b db 09	 imul	 r11, r11, 9
  00064	bb 08 00 00 00	 mov	 ebx, 8
  00069	48 6b db 08	 imul	 rbx, rbx, 8
  0006d	bf 08 00 00 00	 mov	 edi, 8
  00072	48 6b ff 07	 imul	 rdi, rdi, 7
  00076	be 08 00 00 00	 mov	 esi, 8
  0007b	48 6b f6 06	 imul	 rsi, rsi, 6
  0007f	bd 08 00 00 00	 mov	 ebp, 8
  00084	48 6b ed 05	 imul	 rbp, rbp, 5
  00088	41 be 08 00 00
	00		 mov	 r14d, 8
  0008e	4d 6b f6 04	 imul	 r14, r14, 4
  00092	41 bf 08 00 00
	00		 mov	 r15d, 8
  00098	4d 6b ff 02	 imul	 r15, r15, 2
  0009c	41 bc 08 00 00
	00		 mov	 r12d, 8
  000a2	4d 6b e4 01	 imul	 r12, r12, 1
  000a6	41 bd 08 00 00
	00		 mov	 r13d, 8
  000ac	4d 6b ed 00	 imul	 r13, r13, 0
  000b0	4c 89 ac 24 98
	00 00 00	 mov	 QWORD PTR tv154[rsp], r13
  000b8	4c 8b ac 24 00
	01 00 00	 mov	 r13, QWORD PTR t0$[rsp]
  000c0	f2 42 0f 10 44
	28 08		 movsd	 xmm0, QWORD PTR [rax+r13+8]
  000c7	f2 0f 11 84 24
	88 00 00 00	 movsd	 QWORD PTR [rsp+136], xmm0
  000d0	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000d8	f2 0f 10 44 08
	08		 movsd	 xmm0, QWORD PTR [rax+rcx+8]
  000de	f2 0f 11 84 24
	80 00 00 00	 movsd	 QWORD PTR [rsp+128], xmm0
  000e7	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000ef	f2 0f 10 44 10
	08		 movsd	 xmm0, QWORD PTR [rax+rdx+8]
  000f5	f2 0f 11 44 24
	78		 movsd	 QWORD PTR [rsp+120], xmm0
  000fb	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00103	f2 42 0f 10 44
	00 08		 movsd	 xmm0, QWORD PTR [rax+r8+8]
  0010a	f2 0f 11 44 24
	70		 movsd	 QWORD PTR [rsp+112], xmm0
  00110	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00118	f2 42 0f 10 44
	08 08		 movsd	 xmm0, QWORD PTR [rax+r9+8]
  0011f	f2 0f 11 44 24
	68		 movsd	 QWORD PTR [rsp+104], xmm0
  00125	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0012d	f2 42 0f 10 44
	10 08		 movsd	 xmm0, QWORD PTR [rax+r10+8]
  00134	f2 0f 11 44 24
	60		 movsd	 QWORD PTR [rsp+96], xmm0
  0013a	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00142	f2 42 0f 10 44
	18 08		 movsd	 xmm0, QWORD PTR [rax+r11+8]
  00149	f2 0f 11 44 24
	58		 movsd	 QWORD PTR [rsp+88], xmm0
  0014f	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00157	f2 0f 10 44 18
	08		 movsd	 xmm0, QWORD PTR [rax+rbx+8]
  0015d	f2 0f 11 44 24
	50		 movsd	 QWORD PTR [rsp+80], xmm0
  00163	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0016b	f2 0f 10 44 38
	08		 movsd	 xmm0, QWORD PTR [rax+rdi+8]
  00171	f2 0f 11 44 24
	48		 movsd	 QWORD PTR [rsp+72], xmm0
  00177	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0017f	f2 0f 10 44 30
	08		 movsd	 xmm0, QWORD PTR [rax+rsi+8]
  00185	f2 0f 11 44 24
	40		 movsd	 QWORD PTR [rsp+64], xmm0
  0018b	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00193	f2 0f 10 44 28
	08		 movsd	 xmm0, QWORD PTR [rax+rbp+8]
  00199	f2 0f 11 44 24
	38		 movsd	 QWORD PTR [rsp+56], xmm0
  0019f	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  001a7	f2 42 0f 10 44
	30 08		 movsd	 xmm0, QWORD PTR [rax+r14+8]
  001ae	f2 0f 11 44 24
	30		 movsd	 QWORD PTR [rsp+48], xmm0
  001b4	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  001bc	f2 42 0f 10 44
	38 08		 movsd	 xmm0, QWORD PTR [rax+r15+8]
  001c3	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  001c9	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  001d1	f2 42 0f 10 44
	20 08		 movsd	 xmm0, QWORD PTR [rax+r12+8]
  001d8	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  001de	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  001e6	48 8b 8c 24 98
	00 00 00	 mov	 rcx, QWORD PTR tv154[rsp]
  001ee	f2 0f 10 5c 08
	08		 movsd	 xmm3, QWORD PTR [rax+rcx+8]
  001f4	66 49 0f 7e d9	 movq	 r9, xmm3
  001f9	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37645
  00200	8b 94 24 f8 00
	00 00		 mov	 edx, DWORD PTR c$[rsp]
  00207	48 8b 8c 24 f0
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  0020f	e8 00 00 00 00	 call	 snprintf
  00214	89 84 24 90 00
	00 00		 mov	 DWORD PTR result$[rsp], eax

; 541  :     return 0;

  0021b	33 c0		 xor	 eax, eax

; 542  : }

  0021d	48 81 c4 a8 00
	00 00		 add	 rsp, 168		; 000000a8H
  00224	41 5f		 pop	 r15
  00226	41 5e		 pop	 r14
  00228	41 5d		 pop	 r13
  0022a	41 5c		 pop	 r12
  0022c	5f		 pop	 rdi
  0022d	5e		 pop	 rsi
  0022e	5d		 pop	 rbp
  0022f	5b		 pop	 rbx
  00230	c3		 ret	 0
_mat4_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 96
buf$ = 144
c$ = 152
t0$ = 160
_mat3_toString PROC

; 534  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	53		 push	 rbx
  0000f	56		 push	 rsi
  00010	57		 push	 rdi
  00011	48 83 ec 70	 sub	 rsp, 112		; 00000070H

; 535  :     int result=snprintf(buf, c, "((%f, %f, %f), (%f, %f, %f), (%f, %f %f))", t0->matrix[0], t0->matrix[1], t0->matrix[2], t0->matrix[3], t0->matrix[4], t0->matrix[5], t0->matrix[6], t0->matrix[7], t0->matrix[8]);

  00015	b8 08 00 00 00	 mov	 eax, 8
  0001a	48 6b c0 08	 imul	 rax, rax, 8
  0001e	b9 08 00 00 00	 mov	 ecx, 8
  00023	48 6b c9 07	 imul	 rcx, rcx, 7
  00027	ba 08 00 00 00	 mov	 edx, 8
  0002c	48 6b d2 06	 imul	 rdx, rdx, 6
  00030	41 b8 08 00 00
	00		 mov	 r8d, 8
  00036	4d 6b c0 05	 imul	 r8, r8, 5
  0003a	41 b9 08 00 00
	00		 mov	 r9d, 8
  00040	4d 6b c9 04	 imul	 r9, r9, 4
  00044	41 ba 08 00 00
	00		 mov	 r10d, 8
  0004a	4d 6b d2 03	 imul	 r10, r10, 3
  0004e	41 bb 08 00 00
	00		 mov	 r11d, 8
  00054	4d 6b db 02	 imul	 r11, r11, 2
  00058	bb 08 00 00 00	 mov	 ebx, 8
  0005d	48 6b db 01	 imul	 rbx, rbx, 1
  00061	bf 08 00 00 00	 mov	 edi, 8
  00066	48 6b ff 00	 imul	 rdi, rdi, 0
  0006a	48 8b b4 24 a0
	00 00 00	 mov	 rsi, QWORD PTR t0$[rsp]
  00072	f2 0f 10 44 06
	08		 movsd	 xmm0, QWORD PTR [rsi+rax+8]
  00078	f2 0f 11 44 24
	58		 movsd	 QWORD PTR [rsp+88], xmm0
  0007e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00086	f2 0f 10 44 08
	08		 movsd	 xmm0, QWORD PTR [rax+rcx+8]
  0008c	f2 0f 11 44 24
	50		 movsd	 QWORD PTR [rsp+80], xmm0
  00092	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0009a	f2 0f 10 44 10
	08		 movsd	 xmm0, QWORD PTR [rax+rdx+8]
  000a0	f2 0f 11 44 24
	48		 movsd	 QWORD PTR [rsp+72], xmm0
  000a6	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000ae	f2 42 0f 10 44
	00 08		 movsd	 xmm0, QWORD PTR [rax+r8+8]
  000b5	f2 0f 11 44 24
	40		 movsd	 QWORD PTR [rsp+64], xmm0
  000bb	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000c3	f2 42 0f 10 44
	08 08		 movsd	 xmm0, QWORD PTR [rax+r9+8]
  000ca	f2 0f 11 44 24
	38		 movsd	 QWORD PTR [rsp+56], xmm0
  000d0	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000d8	f2 42 0f 10 44
	10 08		 movsd	 xmm0, QWORD PTR [rax+r10+8]
  000df	f2 0f 11 44 24
	30		 movsd	 QWORD PTR [rsp+48], xmm0
  000e5	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000ed	f2 42 0f 10 44
	18 08		 movsd	 xmm0, QWORD PTR [rax+r11+8]
  000f4	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  000fa	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00102	f2 0f 10 44 18
	08		 movsd	 xmm0, QWORD PTR [rax+rbx+8]
  00108	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  0010e	48 8b 84 24 a0
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00116	f2 0f 10 5c 38
	08		 movsd	 xmm3, QWORD PTR [rax+rdi+8]
  0011c	66 49 0f 7e d9	 movq	 r9, xmm3
  00121	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37638
  00128	8b 94 24 98 00
	00 00		 mov	 edx, DWORD PTR c$[rsp]
  0012f	48 8b 8c 24 90
	00 00 00	 mov	 rcx, QWORD PTR buf$[rsp]
  00137	e8 00 00 00 00	 call	 snprintf
  0013c	89 44 24 60	 mov	 DWORD PTR result$[rsp], eax

; 536  :     return 0;

  00140	33 c0		 xor	 eax, eax

; 537  : }

  00142	48 83 c4 70	 add	 rsp, 112		; 00000070H
  00146	5f		 pop	 rdi
  00147	5e		 pop	 rsi
  00148	5b		 pop	 rbx
  00149	c3		 ret	 0
_mat3_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 64
buf$ = 96
c$ = 104
t0$ = 112
_mat2_toString PROC

; 529  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 530  :     int result=snprintf(buf, c, "((%f, %f), (%f, %f))", t0->matrix[0], t0->matrix[1], t0->matrix[2], t0->matrix[3]);

  00012	b8 08 00 00 00	 mov	 eax, 8
  00017	48 6b c0 03	 imul	 rax, rax, 3
  0001b	b9 08 00 00 00	 mov	 ecx, 8
  00020	48 6b c9 02	 imul	 rcx, rcx, 2
  00024	ba 08 00 00 00	 mov	 edx, 8
  00029	48 6b d2 01	 imul	 rdx, rdx, 1
  0002d	41 b8 08 00 00
	00		 mov	 r8d, 8
  00033	4d 6b c0 00	 imul	 r8, r8, 0
  00037	4c 8b 4c 24 70	 mov	 r9, QWORD PTR t0$[rsp]
  0003c	f2 41 0f 10 44
	01 08		 movsd	 xmm0, QWORD PTR [r9+rax+8]
  00043	f2 0f 11 44 24
	30		 movsd	 QWORD PTR [rsp+48], xmm0
  00049	48 8b 44 24 70	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	f2 0f 10 44 08
	08		 movsd	 xmm0, QWORD PTR [rax+rcx+8]
  00054	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  0005a	48 8b 44 24 70	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 10 44 10
	08		 movsd	 xmm0, QWORD PTR [rax+rdx+8]
  00065	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  0006b	48 8b 44 24 70	 mov	 rax, QWORD PTR t0$[rsp]
  00070	f2 42 0f 10 5c
	00 08		 movsd	 xmm3, QWORD PTR [rax+r8+8]
  00077	66 49 0f 7e d9	 movq	 r9, xmm3
  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37631
  00083	8b 54 24 68	 mov	 edx, DWORD PTR c$[rsp]
  00087	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  0008c	e8 00 00 00 00	 call	 snprintf
  00091	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 531  :     return result;

  00095	8b 44 24 40	 mov	 eax, DWORD PTR result$[rsp]

; 532  : }

  00099	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009d	c3		 ret	 0
_mat2_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 64
buf$ = 96
c$ = 104
t0$ = 112
_vec4_toString PROC

; 524  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 525  :     int result=snprintf(buf, c, "(%f, %f, %f, %f)", t0->matrix[0], t0->matrix[1], t0->matrix[2], t0->matrix[3]);

  00012	b8 08 00 00 00	 mov	 eax, 8
  00017	48 6b c0 03	 imul	 rax, rax, 3
  0001b	b9 08 00 00 00	 mov	 ecx, 8
  00020	48 6b c9 02	 imul	 rcx, rcx, 2
  00024	ba 08 00 00 00	 mov	 edx, 8
  00029	48 6b d2 01	 imul	 rdx, rdx, 1
  0002d	41 b8 08 00 00
	00		 mov	 r8d, 8
  00033	4d 6b c0 00	 imul	 r8, r8, 0
  00037	4c 8b 4c 24 70	 mov	 r9, QWORD PTR t0$[rsp]
  0003c	f2 41 0f 10 44
	01 08		 movsd	 xmm0, QWORD PTR [r9+rax+8]
  00043	f2 0f 11 44 24
	30		 movsd	 QWORD PTR [rsp+48], xmm0
  00049	48 8b 44 24 70	 mov	 rax, QWORD PTR t0$[rsp]
  0004e	f2 0f 10 44 08
	08		 movsd	 xmm0, QWORD PTR [rax+rcx+8]
  00054	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  0005a	48 8b 44 24 70	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 10 44 10
	08		 movsd	 xmm0, QWORD PTR [rax+rdx+8]
  00065	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  0006b	48 8b 44 24 70	 mov	 rax, QWORD PTR t0$[rsp]
  00070	f2 42 0f 10 5c
	00 08		 movsd	 xmm3, QWORD PTR [rax+r8+8]
  00077	66 49 0f 7e d9	 movq	 r9, xmm3
  0007c	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37624
  00083	8b 54 24 68	 mov	 edx, DWORD PTR c$[rsp]
  00087	48 8b 4c 24 60	 mov	 rcx, QWORD PTR buf$[rsp]
  0008c	e8 00 00 00 00	 call	 snprintf
  00091	89 44 24 40	 mov	 DWORD PTR result$[rsp], eax

; 526  :     return result;

  00095	8b 44 24 40	 mov	 eax, DWORD PTR result$[rsp]

; 527  : }

  00099	48 83 c4 58	 add	 rsp, 88			; 00000058H
  0009d	c3		 ret	 0
_vec4_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 48
buf$ = 80
c$ = 88
t0$ = 96
_vec3_toString PROC

; 519  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 520  :     int result=snprintf(buf, c, "(%f, %f, %f)", t0->matrix[0], t0->matrix[1], t0->matrix[2]);

  00012	b8 08 00 00 00	 mov	 eax, 8
  00017	48 6b c0 02	 imul	 rax, rax, 2
  0001b	b9 08 00 00 00	 mov	 ecx, 8
  00020	48 6b c9 01	 imul	 rcx, rcx, 1
  00024	ba 08 00 00 00	 mov	 edx, 8
  00029	48 6b d2 00	 imul	 rdx, rdx, 0
  0002d	4c 8b 44 24 60	 mov	 r8, QWORD PTR t0$[rsp]
  00032	f2 41 0f 10 44
	00 08		 movsd	 xmm0, QWORD PTR [r8+rax+8]
  00039	f2 0f 11 44 24
	28		 movsd	 QWORD PTR [rsp+40], xmm0
  0003f	48 8b 44 24 60	 mov	 rax, QWORD PTR t0$[rsp]
  00044	f2 0f 10 44 08
	08		 movsd	 xmm0, QWORD PTR [rax+rcx+8]
  0004a	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  00050	48 8b 44 24 60	 mov	 rax, QWORD PTR t0$[rsp]
  00055	f2 0f 10 5c 10
	08		 movsd	 xmm3, QWORD PTR [rax+rdx+8]
  0005b	66 49 0f 7e d9	 movq	 r9, xmm3
  00060	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37617
  00067	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  0006b	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00070	e8 00 00 00 00	 call	 snprintf
  00075	89 44 24 30	 mov	 DWORD PTR result$[rsp], eax

; 521  :     return result;

  00079	8b 44 24 30	 mov	 eax, DWORD PTR result$[rsp]

; 522  : }

  0007d	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00081	c3		 ret	 0
_vec3_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 48
buf$ = 80
c$ = 88
t0$ = 96
_vec2_toString PROC

; 514  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 515  :     int result=snprintf(buf, c, "(%f, %f)", t0->matrix[0], t0->matrix[1]);

  00012	b8 08 00 00 00	 mov	 eax, 8
  00017	48 6b c0 01	 imul	 rax, rax, 1
  0001b	b9 08 00 00 00	 mov	 ecx, 8
  00020	48 6b c9 00	 imul	 rcx, rcx, 0
  00024	48 8b 54 24 60	 mov	 rdx, QWORD PTR t0$[rsp]
  00029	f2 0f 10 44 02
	08		 movsd	 xmm0, QWORD PTR [rdx+rax+8]
  0002f	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  00035	48 8b 44 24 60	 mov	 rax, QWORD PTR t0$[rsp]
  0003a	f2 0f 10 5c 08
	08		 movsd	 xmm3, QWORD PTR [rax+rcx+8]
  00040	66 49 0f 7e d9	 movq	 r9, xmm3
  00045	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37610
  0004c	8b 54 24 58	 mov	 edx, DWORD PTR c$[rsp]
  00050	48 8b 4c 24 50	 mov	 rcx, QWORD PTR buf$[rsp]
  00055	e8 00 00 00 00	 call	 snprintf
  0005a	89 44 24 30	 mov	 DWORD PTR result$[rsp], eax

; 516  :     return result;

  0005e	8b 44 24 30	 mov	 eax, DWORD PTR result$[rsp]

; 517  : }

  00062	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00066	c3		 ret	 0
_vec2_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_real_toString PROC

; 509  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 510  :     int result=snprintf(buf, c, "%f", t0->real);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	f2 0f 10 58 08	 movsd	 xmm3, QWORD PTR [rax+8]
  0001c	66 49 0f 7e d9	 movq	 r9, xmm3
  00021	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37603
  00028	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00031	e8 00 00 00 00	 call	 snprintf
  00036	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 511  :     return result;

  0003a	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 512  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_real_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
tv67 = 40
buf$ = 64
c$ = 72
t0$ = 80
_bool_toString PROC

; 504  : {

$LN5:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 505  :     int result=snprintf(buf, c, t0->bool ?"true" :"false");

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	83 78 08 00	 cmp	 DWORD PTR [rax+8], 0
  0001b	74 0e		 je	 SHORT $LN3@bool_toStr
  0001d	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG37595
  00024	48 89 44 24 28	 mov	 QWORD PTR tv67[rsp], rax
  00029	eb 0c		 jmp	 SHORT $LN4@bool_toStr
$LN3@bool_toStr:
  0002b	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG37596
  00032	48 89 44 24 28	 mov	 QWORD PTR tv67[rsp], rax
$LN4@bool_toStr:
  00037	4c 8b 44 24 28	 mov	 r8, QWORD PTR tv67[rsp]
  0003c	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00040	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00045	e8 00 00 00 00	 call	 snprintf
  0004a	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 506  :     return result;

  0004e	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 507  : }

  00052	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00056	c3		 ret	 0
_bool_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_f64_toString PROC

; 499  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 500  :     int result=snprintf(buf, c, "%f", t0->f64);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	f2 0f 10 58 08	 movsd	 xmm3, QWORD PTR [rax+8]
  0001c	66 49 0f 7e d9	 movq	 r9, xmm3
  00021	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37588
  00028	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  0002c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00031	e8 00 00 00 00	 call	 snprintf
  00036	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 501  :     return result;

  0003a	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 502  : }

  0003e	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00042	c3		 ret	 0
_f64_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_f32_toString PROC

; 494  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 495  :     int result=snprintf(buf, c, "%f", t0->f32);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [rax+8]
  0001c	0f 28 d8	 movaps	 xmm3, xmm0
  0001f	66 49 0f 7e d9	 movq	 r9, xmm3
  00024	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37581
  0002b	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  0002f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00034	e8 00 00 00 00	 call	 snprintf
  00039	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 496  :     return result;

  0003d	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 497  : }

  00041	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00045	c3		 ret	 0
_f32_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_i64_toString PROC

; 489  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 490  :     int result=snprintf(buf, c, "%dll", t0->i64);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37574
  00022	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002b	e8 00 00 00 00	 call	 snprintf
  00030	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 491  :     return result;

  00034	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 492  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
_i64_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_i32_toString PROC

; 484  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 485  :     int result=snprintf(buf, c, "%d", t0->i32);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	44 8b 48 08	 mov	 r9d, DWORD PTR [rax+8]
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37567
  00022	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002b	e8 00 00 00 00	 call	 snprintf
  00030	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 486  :     return result;

  00034	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 487  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
_i32_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_i16_toString PROC

; 479  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 480  :     int result=snprintf(buf, c, "%dh", t0->i16);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	0f bf 40 08	 movsx	 eax, WORD PTR [rax+8]
  0001b	44 8b c8	 mov	 r9d, eax
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37560
  00025	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002e	e8 00 00 00 00	 call	 snprintf
  00033	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 481  :     return result;

  00037	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 482  : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
_i16_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_i8_toString PROC

; 474  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 475  :     int result=snprintf(buf, c, "%dhh", t0->i8);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	0f be 40 08	 movsx	 eax, BYTE PTR [rax+8]
  0001b	44 8b c8	 mov	 r9d, eax
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37553
  00025	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002e	e8 00 00 00 00	 call	 snprintf
  00033	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 476  :     return result;

  00037	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 477  : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
_i8_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_u64_toString PROC

; 469  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 470  :     int result=snprintf(buf, c, "%ull", t0->u64);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	4c 8b 48 08	 mov	 r9, QWORD PTR [rax+8]
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37546
  00022	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002b	e8 00 00 00 00	 call	 snprintf
  00030	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 471  :     return result;

  00034	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 472  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
_u64_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_u32_toString PROC

; 464  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 465  :     int result=snprintf(buf, c, "%u", t0->u32);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	44 8b 48 08	 mov	 r9d, DWORD PTR [rax+8]
  0001b	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37539
  00022	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00026	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002b	e8 00 00 00 00	 call	 snprintf
  00030	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 466  :     return result;

  00034	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 467  : }

  00038	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003c	c3		 ret	 0
_u32_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_u16_toString PROC

; 459  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 460  :     int result=snprintf(buf, c, "%uh", t0->u16);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	0f b7 40 08	 movzx	 eax, WORD PTR [rax+8]
  0001b	44 8b c8	 mov	 r9d, eax
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37532
  00025	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002e	e8 00 00 00 00	 call	 snprintf
  00033	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 461  :     return result;

  00037	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 462  : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
_u16_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_u8_toString PROC

; 454  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 455  :     int result=snprintf(buf, c, "%uhh", t0->u8);

  00012	48 8b 44 24 50	 mov	 rax, QWORD PTR t0$[rsp]
  00017	0f b6 40 08	 movzx	 eax, BYTE PTR [rax+8]
  0001b	44 8b c8	 mov	 r9d, eax
  0001e	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37525
  00025	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  00029	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  0002e	e8 00 00 00 00	 call	 snprintf
  00033	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 456  :     return result;

  00037	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 457  : }

  0003b	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0003f	c3		 ret	 0
_u8_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
buf$ = 64
c$ = 72
t0$ = 80
_None_toString PROC

; 449  : {

$LN3:
  00000	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 450  :     int result=snprintf(buf, c, "None");

  00012	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37518
  00019	8b 54 24 48	 mov	 edx, DWORD PTR c$[rsp]
  0001d	48 8b 4c 24 40	 mov	 rcx, QWORD PTR buf$[rsp]
  00022	e8 00 00 00 00	 call	 snprintf
  00027	89 44 24 20	 mov	 DWORD PTR result$[rsp], eax

; 451  :     return result;

  0002b	8b 44 24 20	 mov	 eax, DWORD PTR result$[rsp]

; 452  : }

  0002f	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00033	c3		 ret	 0
_None_toString ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
tv69 = 48
result$ = 64
__$ReturnAddress$ = 240
t0$ = 248
__magnitude PROC

; 385  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 386  :     CalcResult result={.success=1};

  00013	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 50 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 51	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 387  :     
; 388  :     result._const.type =TREAL;

  00039	c7 44 24 48 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 389  :     switch (t0->type)

  00041	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00049	8b 00		 mov	 eax, DWORD PTR [rax]
  0004b	89 44 24 30	 mov	 DWORD PTR tv69[rsp], eax
  0004f	83 7c 24 30 0d	 cmp	 DWORD PTR tv69[rsp], 13
  00054	74 17		 je	 SHORT $LN4@magnitude
  00056	83 7c 24 30 0e	 cmp	 DWORD PTR tv69[rsp], 14
  0005b	74 4d		 je	 SHORT $LN5@magnitude
  0005d	83 7c 24 30 0f	 cmp	 DWORD PTR tv69[rsp], 15
  00062	0f 84 93 00 00
	00		 je	 $LN6@magnitude
  00068	e9 fd 00 00 00	 jmp	 $LN7@magnitude
$LN4@magnitude:

; 390  :     {
; 391  :         case TVEC2:
; 392  :         _magnitude_vec2(&result._const, t0->matrix[0], t0->matrix[1]);

  0006d	b8 08 00 00 00	 mov	 eax, 8
  00072	48 6b c0 01	 imul	 rax, rax, 1
  00076	b9 08 00 00 00	 mov	 ecx, 8
  0007b	48 6b c9 00	 imul	 rcx, rcx, 0
  0007f	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00087	f2 0f 10 54 02
	08		 movsd	 xmm2, QWORD PTR [rdx+rax+8]
  0008d	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00095	f2 0f 10 4c 08
	08		 movsd	 xmm1, QWORD PTR [rax+rcx+8]
  0009b	48 8d 4c 24 48	 lea	 rcx, QWORD PTR result$[rsp+8]
  000a0	e8 00 00 00 00	 call	 _magnitude_vec2

; 393  :         break;

  000a5	e9 c8 00 00 00	 jmp	 $LN2@magnitude
$LN5@magnitude:

; 394  :         case TVEC3:
; 395  :         _magnitude_vec3(&result._const, t0->matrix[0], t0->matrix[1], t0->matrix[2]);

  000aa	b8 08 00 00 00	 mov	 eax, 8
  000af	48 6b c0 02	 imul	 rax, rax, 2
  000b3	b9 08 00 00 00	 mov	 ecx, 8
  000b8	48 6b c9 01	 imul	 rcx, rcx, 1
  000bc	ba 08 00 00 00	 mov	 edx, 8
  000c1	48 6b d2 00	 imul	 rdx, rdx, 0
  000c5	48 8b bc 24 f8
	00 00 00	 mov	 rdi, QWORD PTR t0$[rsp]
  000cd	f2 0f 10 5c 07
	08		 movsd	 xmm3, QWORD PTR [rdi+rax+8]
  000d3	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000db	f2 0f 10 54 08
	08		 movsd	 xmm2, QWORD PTR [rax+rcx+8]
  000e1	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000e9	f2 0f 10 4c 10
	08		 movsd	 xmm1, QWORD PTR [rax+rdx+8]
  000ef	48 8d 4c 24 48	 lea	 rcx, QWORD PTR result$[rsp+8]
  000f4	e8 00 00 00 00	 call	 _magnitude_vec3

; 396  :         break;

  000f9	eb 77		 jmp	 SHORT $LN2@magnitude
$LN6@magnitude:

; 397  :         case TVEC4:
; 398  :         _magnitude_vec4(&result._const, t0->matrix[0], t0->matrix[1], t0->matrix[2], t0->matrix[3]);

  000fb	b8 08 00 00 00	 mov	 eax, 8
  00100	48 6b c0 03	 imul	 rax, rax, 3
  00104	b9 08 00 00 00	 mov	 ecx, 8
  00109	48 6b c9 02	 imul	 rcx, rcx, 2
  0010d	ba 08 00 00 00	 mov	 edx, 8
  00112	48 6b d2 01	 imul	 rdx, rdx, 1
  00116	bf 08 00 00 00	 mov	 edi, 8
  0011b	48 6b ff 00	 imul	 rdi, rdi, 0
  0011f	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR t0$[rsp]
  00127	f2 41 0f 10 44
	00 08		 movsd	 xmm0, QWORD PTR [r8+rax+8]
  0012e	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  00134	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0013c	f2 0f 10 5c 08
	08		 movsd	 xmm3, QWORD PTR [rax+rcx+8]
  00142	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0014a	f2 0f 10 54 10
	08		 movsd	 xmm2, QWORD PTR [rax+rdx+8]
  00150	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00158	f2 0f 10 4c 38
	08		 movsd	 xmm1, QWORD PTR [rax+rdi+8]
  0015e	48 8d 4c 24 48	 lea	 rcx, QWORD PTR result$[rsp+8]
  00163	e8 00 00 00 00	 call	 _magnitude_vec4

; 399  :         break;

  00168	eb 08		 jmp	 SHORT $LN2@magnitude
$LN7@magnitude:

; 400  :         default:
; 401  :         result.success=0;

  0016a	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
$LN2@magnitude:

; 402  :     }
; 403  :     return result;

  00172	48 8d 44 24 40	 lea	 rax, QWORD PTR result$[rsp]
  00177	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0017f	48 8b f0	 mov	 rsi, rax
  00182	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00187	f3 a4		 rep movsb
  00189	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 404  : }

  00191	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00198	5f		 pop	 rdi
  00199	5e		 pop	 rsi
  0019a	c3		 ret	 0
__magnitude ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 48
x$ = 56
y$ = 64
z$ = 72
w$ = 80
_magnitude_vec4 PROC

; 379  : {

$LN3:
  00000	f2 0f 11 5c 24
	20		 movsd	 QWORD PTR [rsp+32], xmm3
  00006	f2 0f 11 54 24
	18		 movsd	 QWORD PTR [rsp+24], xmm2
  0000c	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 380  :     result->real =sqrt(x*x +y*y +z*z +w*w);

  0001b	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR x$[rsp]
  00021	f2 0f 59 44 24
	38		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00027	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR y$[rsp]
  0002d	f2 0f 59 4c 24
	40		 mulsd	 xmm1, QWORD PTR y$[rsp]
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f2 0f 10 4c 24
	48		 movsd	 xmm1, QWORD PTR z$[rsp]
  0003d	f2 0f 59 4c 24
	48		 mulsd	 xmm1, QWORD PTR z$[rsp]
  00043	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00047	f2 0f 10 4c 24
	50		 movsd	 xmm1, QWORD PTR w$[rsp]
  0004d	f2 0f 59 4c 24
	50		 mulsd	 xmm1, QWORD PTR w$[rsp]
  00053	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00057	e8 00 00 00 00	 call	 sqrt
  0005c	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  00061	f2 0f 11 40 08	 movsd	 QWORD PTR [rax+8], xmm0

; 381  : }

  00066	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0006a	c3		 ret	 0
_magnitude_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 48
x$ = 56
y$ = 64
z$ = 72
_magnitude_vec3 PROC

; 373  : {

$LN3:
  00000	f2 0f 11 5c 24
	20		 movsd	 QWORD PTR [rsp+32], xmm3
  00006	f2 0f 11 54 24
	18		 movsd	 QWORD PTR [rsp+24], xmm2
  0000c	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 374  :     result->real =sqrt(x*x +y*y +z*z);

  0001b	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR x$[rsp]
  00021	f2 0f 59 44 24
	38		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00027	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR y$[rsp]
  0002d	f2 0f 59 4c 24
	40		 mulsd	 xmm1, QWORD PTR y$[rsp]
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f2 0f 10 4c 24
	48		 movsd	 xmm1, QWORD PTR z$[rsp]
  0003d	f2 0f 59 4c 24
	48		 mulsd	 xmm1, QWORD PTR z$[rsp]
  00043	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00047	e8 00 00 00 00	 call	 sqrt
  0004c	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  00051	f2 0f 11 40 08	 movsd	 QWORD PTR [rax+8], xmm0

; 375  : }

  00056	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0005a	c3		 ret	 0
_magnitude_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 48
x$ = 56
y$ = 64
_magnitude_vec2 PROC

; 367  : {

$LN3:
  00000	f2 0f 11 54 24
	18		 movsd	 QWORD PTR [rsp+24], xmm2
  00006	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 368  :     result->real =sqrt(x*x +y*y);

  00015	f2 0f 10 44 24
	38		 movsd	 xmm0, QWORD PTR x$[rsp]
  0001b	f2 0f 59 44 24
	38		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00021	f2 0f 10 4c 24
	40		 movsd	 xmm1, QWORD PTR y$[rsp]
  00027	f2 0f 59 4c 24
	40		 mulsd	 xmm1, QWORD PTR y$[rsp]
  0002d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00031	e8 00 00 00 00	 call	 sqrt
  00036	48 8b 44 24 30	 mov	 rax, QWORD PTR result$[rsp]
  0003b	f2 0f 11 40 08	 movsd	 QWORD PTR [rax+8], xmm0

; 369  : }

  00040	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00044	c3		 ret	 0
_magnitude_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
tv69 = 48
result$ = 64
__$ReturnAddress$ = 240
t0$ = 248
__normalize PROC

; 344  : {

$LN9:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec d8 00
	00 00		 sub	 rsp, 216		; 000000d8H

; 345  :     CalcResult result ={.success=1};

  00013	c7 44 24 40 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 48 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 50 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 51	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 346  :     
; 347  :     switch (t0->type)

  00039	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00041	8b 00		 mov	 eax, DWORD PTR [rax]
  00043	89 44 24 30	 mov	 DWORD PTR tv69[rsp], eax
  00047	83 7c 24 30 0d	 cmp	 DWORD PTR tv69[rsp], 13
  0004c	74 17		 je	 SHORT $LN4@normalize
  0004e	83 7c 24 30 0e	 cmp	 DWORD PTR tv69[rsp], 14
  00053	74 4d		 je	 SHORT $LN5@normalize
  00055	83 7c 24 30 0f	 cmp	 DWORD PTR tv69[rsp], 15
  0005a	0f 84 93 00 00
	00		 je	 $LN6@normalize
  00060	e9 fd 00 00 00	 jmp	 $LN7@normalize
$LN4@normalize:

; 348  :     {
; 349  :         case TVEC2:
; 350  :         _normalize_vec2(&result._const, t0->matrix[0], t0->matrix[1]);

  00065	b8 08 00 00 00	 mov	 eax, 8
  0006a	48 6b c0 01	 imul	 rax, rax, 1
  0006e	b9 08 00 00 00	 mov	 ecx, 8
  00073	48 6b c9 00	 imul	 rcx, rcx, 0
  00077	48 8b 94 24 f8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0007f	f2 0f 10 54 02
	08		 movsd	 xmm2, QWORD PTR [rdx+rax+8]
  00085	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0008d	f2 0f 10 4c 08
	08		 movsd	 xmm1, QWORD PTR [rax+rcx+8]
  00093	48 8d 4c 24 48	 lea	 rcx, QWORD PTR result$[rsp+8]
  00098	e8 00 00 00 00	 call	 _normalize_vec2

; 351  :         break;

  0009d	e9 c8 00 00 00	 jmp	 $LN2@normalize
$LN5@normalize:

; 352  :         case TVEC3:
; 353  :         _normalize_vec3(&result._const, t0->matrix[0], t0->matrix[1], t0->matrix[2]);

  000a2	b8 08 00 00 00	 mov	 eax, 8
  000a7	48 6b c0 02	 imul	 rax, rax, 2
  000ab	b9 08 00 00 00	 mov	 ecx, 8
  000b0	48 6b c9 01	 imul	 rcx, rcx, 1
  000b4	ba 08 00 00 00	 mov	 edx, 8
  000b9	48 6b d2 00	 imul	 rdx, rdx, 0
  000bd	48 8b bc 24 f8
	00 00 00	 mov	 rdi, QWORD PTR t0$[rsp]
  000c5	f2 0f 10 5c 07
	08		 movsd	 xmm3, QWORD PTR [rdi+rax+8]
  000cb	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000d3	f2 0f 10 54 08
	08		 movsd	 xmm2, QWORD PTR [rax+rcx+8]
  000d9	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  000e1	f2 0f 10 4c 10
	08		 movsd	 xmm1, QWORD PTR [rax+rdx+8]
  000e7	48 8d 4c 24 48	 lea	 rcx, QWORD PTR result$[rsp+8]
  000ec	e8 00 00 00 00	 call	 _normalize_vec3

; 354  :         break;

  000f1	eb 77		 jmp	 SHORT $LN2@normalize
$LN6@normalize:

; 355  :         case TVEC4:
; 356  :         _normalize_vec4(&result._const, t0->matrix[0], t0->matrix[1], t0->matrix[2], t0->matrix[3]);

  000f3	b8 08 00 00 00	 mov	 eax, 8
  000f8	48 6b c0 03	 imul	 rax, rax, 3
  000fc	b9 08 00 00 00	 mov	 ecx, 8
  00101	48 6b c9 02	 imul	 rcx, rcx, 2
  00105	ba 08 00 00 00	 mov	 edx, 8
  0010a	48 6b d2 01	 imul	 rdx, rdx, 1
  0010e	bf 08 00 00 00	 mov	 edi, 8
  00113	48 6b ff 00	 imul	 rdi, rdi, 0
  00117	4c 8b 84 24 f8
	00 00 00	 mov	 r8, QWORD PTR t0$[rsp]
  0011f	f2 41 0f 10 44
	00 08		 movsd	 xmm0, QWORD PTR [r8+rax+8]
  00126	f2 0f 11 44 24
	20		 movsd	 QWORD PTR [rsp+32], xmm0
  0012c	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00134	f2 0f 10 5c 08
	08		 movsd	 xmm3, QWORD PTR [rax+rcx+8]
  0013a	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00142	f2 0f 10 54 10
	08		 movsd	 xmm2, QWORD PTR [rax+rdx+8]
  00148	48 8b 84 24 f8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  00150	f2 0f 10 4c 38
	08		 movsd	 xmm1, QWORD PTR [rax+rdi+8]
  00156	48 8d 4c 24 48	 lea	 rcx, QWORD PTR result$[rsp+8]
  0015b	e8 00 00 00 00	 call	 _normalize_vec4

; 357  :         break;

  00160	eb 08		 jmp	 SHORT $LN2@normalize
$LN7@normalize:

; 358  :         default:
; 359  :         result.success =0;

  00162	c7 44 24 40 00
	00 00 00	 mov	 DWORD PTR result$[rsp], 0
$LN2@normalize:

; 360  :         break;
; 361  :     }
; 362  :     return result;

  0016a	48 8d 44 24 40	 lea	 rax, QWORD PTR result$[rsp]
  0016f	48 8b bc 24 f0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00177	48 8b f0	 mov	 rsi, rax
  0017a	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0017f	f3 a4		 rep movsb
  00181	48 8b 84 24 f0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 363  : }

  00189	48 81 c4 d8 00
	00 00		 add	 rsp, 216		; 000000d8H
  00190	5f		 pop	 rdi
  00191	5e		 pop	 rsi
  00192	c3		 ret	 0
__normalize ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
norm$ = 32
result$ = 64
x$ = 72
y$ = 80
z$ = 88
w$ = 96
_normalize_vec4 PROC

; 332  : {

$LN3:
  00000	f2 0f 11 5c 24
	20		 movsd	 QWORD PTR [rsp+32], xmm3
  00006	f2 0f 11 54 24
	18		 movsd	 QWORD PTR [rsp+24], xmm2
  0000c	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 333  :     _real norm =1.0/sqrt(x*x +y*y +z*z +w*w);

  0001b	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR x$[rsp]
  00021	f2 0f 59 44 24
	48		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00027	f2 0f 10 4c 24
	50		 movsd	 xmm1, QWORD PTR y$[rsp]
  0002d	f2 0f 59 4c 24
	50		 mulsd	 xmm1, QWORD PTR y$[rsp]
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f2 0f 10 4c 24
	58		 movsd	 xmm1, QWORD PTR z$[rsp]
  0003d	f2 0f 59 4c 24
	58		 mulsd	 xmm1, QWORD PTR z$[rsp]
  00043	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00047	f2 0f 10 4c 24
	60		 movsd	 xmm1, QWORD PTR w$[rsp]
  0004d	f2 0f 59 4c 24
	60		 mulsd	 xmm1, QWORD PTR w$[rsp]
  00053	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00057	e8 00 00 00 00	 call	 sqrt
  0005c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00064	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00068	0f 28 c1	 movaps	 xmm0, xmm1
  0006b	f2 0f 11 44 24
	20		 movsd	 QWORD PTR norm$[rsp], xmm0

; 334  :     
; 335  :     result->type =TVEC4;

  00071	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00076	c7 00 0f 00 00
	00		 mov	 DWORD PTR [rax], 15

; 336  :     result->matrix[0] =x*norm;

  0007c	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR x$[rsp]
  00082	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  00088	b8 08 00 00 00	 mov	 eax, 8
  0008d	48 6b c0 00	 imul	 rax, rax, 0
  00091	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00096	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 337  :     result->matrix[1] =y*norm;

  0009c	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR y$[rsp]
  000a2	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  000a8	b8 08 00 00 00	 mov	 eax, 8
  000ad	48 6b c0 01	 imul	 rax, rax, 1
  000b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  000b6	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 338  :     result->matrix[2] =z*norm;

  000bc	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR z$[rsp]
  000c2	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  000c8	b8 08 00 00 00	 mov	 eax, 8
  000cd	48 6b c0 02	 imul	 rax, rax, 2
  000d1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  000d6	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 339  :     result->matrix[3] =w*norm;

  000dc	f2 0f 10 44 24
	60		 movsd	 xmm0, QWORD PTR w$[rsp]
  000e2	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  000e8	b8 08 00 00 00	 mov	 eax, 8
  000ed	48 6b c0 03	 imul	 rax, rax, 3
  000f1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  000f6	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 340  : }

  000fc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00100	c3		 ret	 0
_normalize_vec4 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
norm$ = 32
result$ = 64
x$ = 72
y$ = 80
z$ = 88
_normalize_vec3 PROC

; 321  : {

$LN3:
  00000	f2 0f 11 5c 24
	20		 movsd	 QWORD PTR [rsp+32], xmm3
  00006	f2 0f 11 54 24
	18		 movsd	 QWORD PTR [rsp+24], xmm2
  0000c	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  00012	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00017	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 322  :     _real norm =1.0/sqrt(x*x +y*y +z*z);

  0001b	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR x$[rsp]
  00021	f2 0f 59 44 24
	48		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00027	f2 0f 10 4c 24
	50		 movsd	 xmm1, QWORD PTR y$[rsp]
  0002d	f2 0f 59 4c 24
	50		 mulsd	 xmm1, QWORD PTR y$[rsp]
  00033	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00037	f2 0f 10 4c 24
	58		 movsd	 xmm1, QWORD PTR z$[rsp]
  0003d	f2 0f 59 4c 24
	58		 mulsd	 xmm1, QWORD PTR z$[rsp]
  00043	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00047	e8 00 00 00 00	 call	 sqrt
  0004c	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  00054	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00058	0f 28 c1	 movaps	 xmm0, xmm1
  0005b	f2 0f 11 44 24
	20		 movsd	 QWORD PTR norm$[rsp], xmm0

; 323  :     
; 324  :     result->type =TVEC3;

  00061	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00066	c7 00 0e 00 00
	00		 mov	 DWORD PTR [rax], 14

; 325  :     result->matrix[0] =x*norm;

  0006c	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR x$[rsp]
  00072	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  00078	b8 08 00 00 00	 mov	 eax, 8
  0007d	48 6b c0 00	 imul	 rax, rax, 0
  00081	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00086	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 326  :     result->matrix[1] =y*norm;

  0008c	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR y$[rsp]
  00092	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  00098	b8 08 00 00 00	 mov	 eax, 8
  0009d	48 6b c0 01	 imul	 rax, rax, 1
  000a1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  000a6	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 327  :     result->matrix[2] =z*norm;

  000ac	f2 0f 10 44 24
	58		 movsd	 xmm0, QWORD PTR z$[rsp]
  000b2	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  000b8	b8 08 00 00 00	 mov	 eax, 8
  000bd	48 6b c0 02	 imul	 rax, rax, 2
  000c1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  000c6	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 328  : }

  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
_normalize_vec3 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
norm$ = 32
result$ = 64
x$ = 72
y$ = 80
_normalize_vec2 PROC

; 311  : {

$LN3:
  00000	f2 0f 11 54 24
	18		 movsd	 QWORD PTR [rsp+24], xmm2
  00006	f2 0f 11 4c 24
	10		 movsd	 QWORD PTR [rsp+16], xmm1
  0000c	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00011	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 312  :     _real norm =1.0/sqrt(x*x +y*y);

  00015	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR x$[rsp]
  0001b	f2 0f 59 44 24
	48		 mulsd	 xmm0, QWORD PTR x$[rsp]
  00021	f2 0f 10 4c 24
	50		 movsd	 xmm1, QWORD PTR y$[rsp]
  00027	f2 0f 59 4c 24
	50		 mulsd	 xmm1, QWORD PTR y$[rsp]
  0002d	f2 0f 58 c1	 addsd	 xmm0, xmm1
  00031	e8 00 00 00 00	 call	 sqrt
  00036	f2 0f 10 0d 00
	00 00 00	 movsd	 xmm1, QWORD PTR __real@3ff0000000000000
  0003e	f2 0f 5e c8	 divsd	 xmm1, xmm0
  00042	0f 28 c1	 movaps	 xmm0, xmm1
  00045	f2 0f 11 44 24
	20		 movsd	 QWORD PTR norm$[rsp], xmm0

; 313  :     
; 314  :     result->type =TVEC2;

  0004b	48 8b 44 24 40	 mov	 rax, QWORD PTR result$[rsp]
  00050	c7 00 0d 00 00
	00		 mov	 DWORD PTR [rax], 13

; 315  :     result->matrix[0] =x*norm;

  00056	f2 0f 10 44 24
	48		 movsd	 xmm0, QWORD PTR x$[rsp]
  0005c	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  00062	b8 08 00 00 00	 mov	 eax, 8
  00067	48 6b c0 00	 imul	 rax, rax, 0
  0006b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00070	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 316  :     result->matrix[1] =y*norm;

  00076	f2 0f 10 44 24
	50		 movsd	 xmm0, QWORD PTR y$[rsp]
  0007c	f2 0f 59 44 24
	20		 mulsd	 xmm0, QWORD PTR norm$[rsp]
  00082	b8 08 00 00 00	 mov	 eax, 8
  00087	48 6b c0 01	 imul	 rax, rax, 1
  0008b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR result$[rsp]
  00090	f2 0f 11 44 01
	08		 movsd	 QWORD PTR [rcx+rax+8], xmm0

; 317  : }

  00096	48 83 c4 38	 add	 rsp, 56			; 00000038H
  0009a	c3		 ret	 0
_normalize_vec2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__g	PROC

; 299  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 300  :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 301  :     result._const.type =TREAL;

  00039	c7 44 24 28 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 302  :     if (IsRealConst(&result, t0))

  00041	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00049	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  0004e	e8 00 00 00 00	 call	 IsRealConst
  00053	85 c0		 test	 eax, eax
  00055	74 1b		 je	 SHORT $LN2@g

; 303  :     {
; 304  :         result._const.real =1.0f+t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  00067	f2 0f 58 40 08	 addsd	 xmm0, QWORD PTR [rax+8]
  0006c	f2 0f 11 44 24
	30		 movsd	 QWORD PTR result$[rsp+16], xmm0
$LN2@g:

; 305  :     }
; 306  :     return result;

  00072	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  00077	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007f	48 8b f0	 mov	 rsi, rax
  00082	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00087	f3 a4		 rep movsb
  00089	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 307  : }

  00091	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00098	5f		 pop	 rdi
  00099	5e		 pop	 rsi
  0009a	c3		 ret	 0
__g	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__h	PROC

; 286  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 287  :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 288  :     
; 289  :     result._const.type =TREAL;

  00039	c7 44 24 28 0c
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 12

; 290  :     if (IsRealConst(&result, t0))

  00041	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00049	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  0004e	e8 00 00 00 00	 call	 IsRealConst
  00053	85 c0		 test	 eax, eax
  00055	74 1b		 je	 SHORT $LN2@h

; 291  :     {
; 292  :         result._const.real =4.0f * t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@4010000000000000
  00067	f2 0f 59 40 08	 mulsd	 xmm0, QWORD PTR [rax+8]
  0006c	f2 0f 11 44 24
	30		 movsd	 QWORD PTR result$[rsp+16], xmm0
$LN2@h:

; 293  :     }
; 294  :     return result;

  00072	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  00077	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  0007f	48 8b f0	 mov	 rsi, rax
  00082	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00087	f3 a4		 rep movsb
  00089	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 295  : }

  00091	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00098	5f		 pop	 rdi
  00099	5e		 pop	 rsi
  0009a	c3		 ret	 0
__h	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
vArgs$ = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
__mat4	PROC

; 269  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 270  :     CalcResult result ={.success=1};

  0001d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  0002d	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  00032	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00041	f3 aa		 rep stosb

; 271  :     va_list vArgs;
; 272  :     
; 273  :     result._const.type =TMAT4;

  00043	c7 44 24 38 12
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 18

; 274  :     if (IsRealConst(&result, t0))

  0004b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result$[rsp]
  00058	e8 00 00 00 00	 call	 IsRealConst
  0005d	85 c0		 test	 eax, eax
  0005f	74 47		 je	 SHORT $LN2@mat4

; 275  :     {
; 276  :         result._const.matrix[0] =t0->real;

  00061	b8 08 00 00 00	 mov	 eax, 8
  00066	48 6b c0 00	 imul	 rax, rax, 0
  0006a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00072	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [rcx+8]
  00077	f2 0f 11 44 04
	40		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 277  :         va_start(vArgs, t0);

  0007d	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR t0$[rsp+8]
  00085	48 89 44 24 20	 mov	 QWORD PTR vArgs$[rsp], rax

; 278  :         GetReals(vArgs, &result, 15);

  0008a	41 b8 0f 00 00
	00		 mov	 r8d, 15
  00090	48 8d 54 24 30	 lea	 rdx, QWORD PTR result$[rsp]
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vArgs$[rsp]
  0009a	e8 00 00 00 00	 call	 GetReals

; 279  :         va_end(vArgs);

  0009f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vArgs$[rsp], 0
$LN2@mat4:

; 280  :     }
; 281  :     return result;

  000a8	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  000ad	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000b5	48 8b f0	 mov	 rsi, rax
  000b8	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000bd	f3 a4		 rep movsb
  000bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 282  : }

  000c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000ce	5f		 pop	 rdi
  000cf	5e		 pop	 rsi
  000d0	c3		 ret	 0
__mat4	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
vArgs$ = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
__mat3	PROC

; 252  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 253  :     CalcResult result ={.success=1};

  0001d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  0002d	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  00032	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00041	f3 aa		 rep stosb

; 254  :     va_list vArgs;
; 255  :     
; 256  :     result._const.type =TMAT3;

  00043	c7 44 24 38 11
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 17

; 257  :     if (IsRealConst(&result, t0))

  0004b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result$[rsp]
  00058	e8 00 00 00 00	 call	 IsRealConst
  0005d	85 c0		 test	 eax, eax
  0005f	74 47		 je	 SHORT $LN2@mat3

; 258  :     {
; 259  :         result._const.matrix[0] =t0->real;

  00061	b8 08 00 00 00	 mov	 eax, 8
  00066	48 6b c0 00	 imul	 rax, rax, 0
  0006a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00072	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [rcx+8]
  00077	f2 0f 11 44 04
	40		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 260  :         va_start(vArgs, t0);

  0007d	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR t0$[rsp+8]
  00085	48 89 44 24 20	 mov	 QWORD PTR vArgs$[rsp], rax

; 261  :         GetReals(vArgs, &result, 8);

  0008a	41 b8 08 00 00
	00		 mov	 r8d, 8
  00090	48 8d 54 24 30	 lea	 rdx, QWORD PTR result$[rsp]
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vArgs$[rsp]
  0009a	e8 00 00 00 00	 call	 GetReals

; 262  :         va_end(vArgs);

  0009f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vArgs$[rsp], 0
$LN2@mat3:

; 263  :     }
; 264  :     return result;

  000a8	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  000ad	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000b5	48 8b f0	 mov	 rsi, rax
  000b8	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000bd	f3 a4		 rep movsb
  000bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 265  : }

  000c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000ce	5f		 pop	 rdi
  000cf	5e		 pop	 rsi
  000d0	c3		 ret	 0
__mat3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
vArgs$ = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
__mat2	PROC

; 235  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 236  :     CalcResult result ={.success=1};

  0001d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  0002d	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  00032	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00041	f3 aa		 rep stosb

; 237  :     va_list vArgs;
; 238  :     
; 239  :     result._const.type =TMAT2;

  00043	c7 44 24 38 10
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 16

; 240  :     if (IsRealConst(&result, t0))

  0004b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result$[rsp]
  00058	e8 00 00 00 00	 call	 IsRealConst
  0005d	85 c0		 test	 eax, eax
  0005f	74 47		 je	 SHORT $LN2@mat2

; 241  :     {
; 242  :         result._const.matrix[0] =t0->real;

  00061	b8 08 00 00 00	 mov	 eax, 8
  00066	48 6b c0 00	 imul	 rax, rax, 0
  0006a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00072	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [rcx+8]
  00077	f2 0f 11 44 04
	40		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 243  :         va_start(vArgs, t0);

  0007d	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR t0$[rsp+8]
  00085	48 89 44 24 20	 mov	 QWORD PTR vArgs$[rsp], rax

; 244  :         GetReals(vArgs, &result, 3);

  0008a	41 b8 03 00 00
	00		 mov	 r8d, 3
  00090	48 8d 54 24 30	 lea	 rdx, QWORD PTR result$[rsp]
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vArgs$[rsp]
  0009a	e8 00 00 00 00	 call	 GetReals

; 245  :         va_end(vArgs);

  0009f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vArgs$[rsp], 0
$LN2@mat2:

; 246  :     }
; 247  :     return result;

  000a8	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  000ad	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000b5	48 8b f0	 mov	 rsi, rax
  000b8	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000bd	f3 a4		 rep movsb
  000bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 248  : }

  000c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000ce	5f		 pop	 rdi
  000cf	5e		 pop	 rsi
  000d0	c3		 ret	 0
__mat2	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
vArgs$ = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
__vec4	PROC

; 218  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 219  :     CalcResult result ={.success=1};

  0001d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  0002d	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  00032	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00041	f3 aa		 rep stosb

; 220  :     va_list vArgs;
; 221  :     
; 222  :     result._const.type =TVEC4;

  00043	c7 44 24 38 0f
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 15

; 223  :     if (IsRealConst(&result, t0))

  0004b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result$[rsp]
  00058	e8 00 00 00 00	 call	 IsRealConst
  0005d	85 c0		 test	 eax, eax
  0005f	74 47		 je	 SHORT $LN2@vec4

; 224  :     {
; 225  :         result._const.matrix[0] =t0->real;

  00061	b8 08 00 00 00	 mov	 eax, 8
  00066	48 6b c0 00	 imul	 rax, rax, 0
  0006a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00072	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [rcx+8]
  00077	f2 0f 11 44 04
	40		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 226  :         va_start(vArgs, t0);

  0007d	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR t0$[rsp+8]
  00085	48 89 44 24 20	 mov	 QWORD PTR vArgs$[rsp], rax

; 227  :         GetReals(vArgs, &result, 3);

  0008a	41 b8 03 00 00
	00		 mov	 r8d, 3
  00090	48 8d 54 24 30	 lea	 rdx, QWORD PTR result$[rsp]
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vArgs$[rsp]
  0009a	e8 00 00 00 00	 call	 GetReals

; 228  :         va_end(vArgs);

  0009f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vArgs$[rsp], 0
$LN2@vec4:

; 229  :     }
; 230  :     return result;

  000a8	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  000ad	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000b5	48 8b f0	 mov	 rsi, rax
  000b8	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000bd	f3 a4		 rep movsb
  000bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 231  : }

  000c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000ce	5f		 pop	 rdi
  000cf	5e		 pop	 rsi
  000d0	c3		 ret	 0
__vec4	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
vArgs$ = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
__vec3	PROC

; 201  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 202  :     CalcResult result ={.success=1};

  0001d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  0002d	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  00032	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00041	f3 aa		 rep stosb

; 203  :     va_list vArgs;
; 204  :     
; 205  :     result._const.type =TVEC3;

  00043	c7 44 24 38 0e
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 14

; 206  :     if (IsRealConst(&result, t0))

  0004b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result$[rsp]
  00058	e8 00 00 00 00	 call	 IsRealConst
  0005d	85 c0		 test	 eax, eax
  0005f	74 47		 je	 SHORT $LN2@vec3

; 207  :     {
; 208  :         result._const.matrix[0] =t0->real;

  00061	b8 08 00 00 00	 mov	 eax, 8
  00066	48 6b c0 00	 imul	 rax, rax, 0
  0006a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00072	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [rcx+8]
  00077	f2 0f 11 44 04
	40		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 209  :         va_start(vArgs, t0);

  0007d	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR t0$[rsp+8]
  00085	48 89 44 24 20	 mov	 QWORD PTR vArgs$[rsp], rax

; 210  :         GetReals(vArgs, &result, 2);

  0008a	41 b8 02 00 00
	00		 mov	 r8d, 2
  00090	48 8d 54 24 30	 lea	 rdx, QWORD PTR result$[rsp]
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vArgs$[rsp]
  0009a	e8 00 00 00 00	 call	 GetReals

; 211  :         va_end(vArgs);

  0009f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vArgs$[rsp], 0
$LN2@vec3:

; 212  :     }
; 213  :     return result;

  000a8	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  000ad	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000b5	48 8b f0	 mov	 rsi, rax
  000b8	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000bd	f3 a4		 rep movsb
  000bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 214  : }

  000c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000ce	5f		 pop	 rdi
  000cf	5e		 pop	 rsi
  000d0	c3		 ret	 0
__vec3	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
vArgs$ = 32
result$ = 48
__$ReturnAddress$ = 224
t0$ = 232
__vec2	PROC

; 184  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000f	4c 89 4c 24 20	 mov	 QWORD PTR [rsp+32], r9
  00014	56		 push	 rsi
  00015	57		 push	 rdi
  00016	48 81 ec c8 00
	00 00		 sub	 rsp, 200		; 000000c8H

; 185  :     CalcResult result ={.success=1};

  0001d	c7 44 24 30 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  00025	c7 44 24 38 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  0002d	c6 44 24 40 00	 mov	 BYTE PTR result$[rsp+16], 0
  00032	48 8d 44 24 41	 lea	 rax, QWORD PTR result$[rsp+17]
  00037	48 8b f8	 mov	 rdi, rax
  0003a	33 c0		 xor	 eax, eax
  0003c	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00041	f3 aa		 rep stosb

; 186  :     va_list vArgs;
; 187  :     
; 188  :     result._const.type =TVEC2;

  00043	c7 44 24 38 0d
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 13

; 189  :     if (IsRealConst(&result, t0))

  0004b	48 8b 94 24 e8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00053	48 8d 4c 24 30	 lea	 rcx, QWORD PTR result$[rsp]
  00058	e8 00 00 00 00	 call	 IsRealConst
  0005d	85 c0		 test	 eax, eax
  0005f	74 47		 je	 SHORT $LN2@vec2

; 190  :     {
; 191  :         result._const.matrix[0] =t0->real;

  00061	b8 08 00 00 00	 mov	 eax, 8
  00066	48 6b c0 00	 imul	 rax, rax, 0
  0006a	48 8b 8c 24 e8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00072	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [rcx+8]
  00077	f2 0f 11 44 04
	40		 movsd	 QWORD PTR result$[rsp+rax+16], xmm0

; 192  :         va_start(vArgs, t0);

  0007d	48 8d 84 24 f0
	00 00 00	 lea	 rax, QWORD PTR t0$[rsp+8]
  00085	48 89 44 24 20	 mov	 QWORD PTR vArgs$[rsp], rax

; 193  :         GetReals(vArgs, &result, 1);

  0008a	41 b8 01 00 00
	00		 mov	 r8d, 1
  00090	48 8d 54 24 30	 lea	 rdx, QWORD PTR result$[rsp]
  00095	48 8b 4c 24 20	 mov	 rcx, QWORD PTR vArgs$[rsp]
  0009a	e8 00 00 00 00	 call	 GetReals

; 194  :         va_end(vArgs);

  0009f	48 c7 44 24 20
	00 00 00 00	 mov	 QWORD PTR vArgs$[rsp], 0
$LN2@vec2:

; 195  :     }
; 196  :     return result;

  000a8	48 8d 44 24 30	 lea	 rax, QWORD PTR result$[rsp]
  000ad	48 8b bc 24 e0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000b5	48 8b f0	 mov	 rsi, rax
  000b8	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000bd	f3 a4		 rep movsb
  000bf	48 8b 84 24 e0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 197  : }

  000c7	48 81 c4 c8 00
	00 00		 add	 rsp, 200		; 000000c8H
  000ce	5f		 pop	 rdi
  000cf	5e		 pop	 rsi
  000d0	c3		 ret	 0
__vec2	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
n$ = 32
tv67 = 36
tv66 = 40
t$1 = 48
vArgs$ = 80
calc$ = 88
c$ = 96
GetReals PROC

; 166  : {

$LN7:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 48	 sub	 rsp, 72			; 00000048H

; 167  :     int n=0;

  00013	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR n$[rsp], 0
$LN2@GetReals:

; 168  :     while (n++<c)

  0001b	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0001f	89 44 24 28	 mov	 DWORD PTR tv66[rsp], eax
  00023	8b 44 24 60	 mov	 eax, DWORD PTR c$[rsp]
  00027	89 44 24 24	 mov	 DWORD PTR tv67[rsp], eax
  0002b	8b 44 24 20	 mov	 eax, DWORD PTR n$[rsp]
  0002f	ff c0		 inc	 eax
  00031	89 44 24 20	 mov	 DWORD PTR n$[rsp], eax
  00035	8b 44 24 24	 mov	 eax, DWORD PTR tv67[rsp]
  00039	39 44 24 28	 cmp	 DWORD PTR tv66[rsp], eax
  0003d	7d 4f		 jge	 SHORT $LN3@GetReals

; 169  :     {
; 170  :         Type *t =va_arg(vArgs, Type *);

  0003f	48 8b 44 24 50	 mov	 rax, QWORD PTR vArgs$[rsp]
  00044	48 83 c0 08	 add	 rax, 8
  00048	48 89 44 24 50	 mov	 QWORD PTR vArgs$[rsp], rax
  0004d	48 8b 44 24 50	 mov	 rax, QWORD PTR vArgs$[rsp]
  00052	48 8b 40 f8	 mov	 rax, QWORD PTR [rax-8]
  00056	48 89 44 24 30	 mov	 QWORD PTR t$1[rsp], rax

; 171  :         if (IsRealConst(calc, t))

  0005b	48 8b 54 24 30	 mov	 rdx, QWORD PTR t$1[rsp]
  00060	48 8b 4c 24 58	 mov	 rcx, QWORD PTR calc$[rsp]
  00065	e8 00 00 00 00	 call	 IsRealConst
  0006a	85 c0		 test	 eax, eax
  0006c	74 1c		 je	 SHORT $LN4@GetReals

; 172  :         {
; 173  :             calc->_const.matrix[n] =t->real;

  0006e	48 63 44 24 20	 movsxd	 rax, DWORD PTR n$[rsp]
  00073	48 8b 4c 24 58	 mov	 rcx, QWORD PTR calc$[rsp]
  00078	48 8b 54 24 30	 mov	 rdx, QWORD PTR t$1[rsp]
  0007d	f2 0f 10 42 08	 movsd	 xmm0, QWORD PTR [rdx+8]
  00082	f2 0f 11 44 c1
	10		 movsd	 QWORD PTR [rcx+rax*8+16], xmm0

; 174  :         }

  00088	eb 02		 jmp	 SHORT $LN5@GetReals
$LN4@GetReals:

; 175  :         else
; 176  :         {
; 177  :             break;

  0008a	eb 02		 jmp	 SHORT $LN3@GetReals
$LN5@GetReals:

; 178  :         }
; 179  :     }

  0008c	eb 8d		 jmp	 SHORT $LN2@GetReals
$LN3@GetReals:

; 180  : }

  0008e	48 83 c4 48	 add	 rsp, 72			; 00000048H
  00092	c3		 ret	 0
GetReals ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__bool	PROC

; 154  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 155  :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 156  :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 19		 je	 SHORT $LN2@bool

; 157  :     {
; 158  :         result._const.type =TBOOL;

  0004f	c7 44 24 28 0b
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 11

; 159  :         result._const.bool =(_bool)t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 2c 40 08	 cvttsd2si eax, QWORD PTR [rax+8]
  00064	89 44 24 30	 mov	 DWORD PTR result$[rsp+16], eax
$LN2@bool:

; 160  :     }
; 161  :     return result;

  00068	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006d	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00075	48 8b f0	 mov	 rsi, rax
  00078	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007d	f3 a4		 rep movsb
  0007f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 162  : }

  00087	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008e	5f		 pop	 rdi
  0008f	5e		 pop	 rsi
  00090	c3		 ret	 0
__bool	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__f64	PROC

; 142  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 143  :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 144  :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 1b		 je	 SHORT $LN2@f64

; 145  :     {
; 146  :         result._const.type =TF64;

  0004f	c7 44 24 28 0a
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 10

; 147  :         result._const.f64 =t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 10 40 08	 movsd	 xmm0, QWORD PTR [rax+8]
  00064	f2 0f 11 44 24
	30		 movsd	 QWORD PTR result$[rsp+16], xmm0
$LN2@f64:

; 148  :     }
; 149  :     return result;

  0006a	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006f	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00077	48 8b f0	 mov	 rsi, rax
  0007a	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007f	f3 a4		 rep movsb
  00081	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 150  : }

  00089	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  00090	5f		 pop	 rdi
  00091	5e		 pop	 rsi
  00092	c3		 ret	 0
__f64	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__f32	PROC

; 130  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 131  :     CalcResult result ={0};

  00013	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  00018	48 8b f8	 mov	 rdi, rax
  0001b	33 c0		 xor	 eax, eax
  0001d	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00022	f3 aa		 rep stosb

; 132  :     if (IsRealConst(&result, t0))

  00024	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0002c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00031	e8 00 00 00 00	 call	 IsRealConst
  00036	85 c0		 test	 eax, eax
  00038	74 1b		 je	 SHORT $LN2@f32

; 133  :     {
; 134  :         result._const.type =TF32;

  0003a	c7 44 24 28 09
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 9

; 135  :         result._const.f32 =(_f32)t0->real;

  00042	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004a	f2 0f 5a 40 08	 cvtsd2ss xmm0, QWORD PTR [rax+8]
  0004f	f3 0f 11 44 24
	30		 movss	 DWORD PTR result$[rsp+16], xmm0
$LN2@f32:

; 136  :     }
; 137  :     return result;

  00055	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0005a	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00062	48 8b f0	 mov	 rsi, rax
  00065	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0006a	f3 a4		 rep movsb
  0006c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 138  : }

  00074	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0007b	5f		 pop	 rdi
  0007c	5e		 pop	 rsi
  0007d	c3		 ret	 0
__f32	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__i64	PROC

; 118  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 119  :     CalcResult result ={0};

  00013	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  00018	48 8b f8	 mov	 rdi, rax
  0001b	33 c0		 xor	 eax, eax
  0001d	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  00022	f3 aa		 rep stosb

; 120  :     if (IsRealConst(&result, t0))

  00024	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  0002c	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00031	e8 00 00 00 00	 call	 IsRealConst
  00036	85 c0		 test	 eax, eax
  00038	74 1b		 je	 SHORT $LN2@i64

; 121  :     {
; 122  :         result._const.type =TI64;

  0003a	c7 44 24 28 08
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 8

; 123  :         result._const.i64 =(_i64)t0->real;

  00042	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0004a	f2 48 0f 2c 40
	08		 cvttsd2si rax, QWORD PTR [rax+8]
  00050	48 89 44 24 30	 mov	 QWORD PTR result$[rsp+16], rax
$LN2@i64:

; 124  :     }
; 125  :     return result;

  00055	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0005a	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00062	48 8b f0	 mov	 rsi, rax
  00065	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0006a	f3 a4		 rep movsb
  0006c	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 126  : }

  00074	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0007b	5f		 pop	 rdi
  0007c	5e		 pop	 rsi
  0007d	c3		 ret	 0
__i64	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__i32	PROC

; 106  : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 107  :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 108  :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 19		 je	 SHORT $LN2@i32

; 109  :     {
; 110  :         result._const.type =TI32;

  0004f	c7 44 24 28 07
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 7

; 111  :         result._const.i32 =(_i32)t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 2c 40 08	 cvttsd2si eax, QWORD PTR [rax+8]
  00064	89 44 24 30	 mov	 DWORD PTR result$[rsp+16], eax
$LN2@i32:

; 112  :     }
; 113  :     return result;

  00068	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006d	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00075	48 8b f0	 mov	 rsi, rax
  00078	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007d	f3 a4		 rep movsb
  0007f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 114  : }

  00087	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008e	5f		 pop	 rdi
  0008f	5e		 pop	 rsi
  00090	c3		 ret	 0
__i32	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__i16	PROC

; 94   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 95   :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 96   :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 1a		 je	 SHORT $LN2@i16

; 97   :     {
; 98   :         result._const.type =TI16;

  0004f	c7 44 24 28 06
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 6

; 99   :         result._const.i16 =(_i16)t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 2c 40 08	 cvttsd2si eax, QWORD PTR [rax+8]
  00064	66 89 44 24 30	 mov	 WORD PTR result$[rsp+16], ax
$LN2@i16:

; 100  :     }
; 101  :     return result;

  00069	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006e	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00076	48 8b f0	 mov	 rsi, rax
  00079	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007e	f3 a4		 rep movsb
  00080	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 102  : }

  00088	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008f	5f		 pop	 rdi
  00090	5e		 pop	 rsi
  00091	c3		 ret	 0
__i16	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__i8	PROC

; 82   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 83   :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 84   :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 19		 je	 SHORT $LN2@i8

; 85   :     {
; 86   :         result._const.type =TI8;

  0004f	c7 44 24 28 05
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 5

; 87   :         result._const.i8 =(_i8)t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 2c 40 08	 cvttsd2si eax, QWORD PTR [rax+8]
  00064	88 44 24 30	 mov	 BYTE PTR result$[rsp+16], al
$LN2@i8:

; 88   :     }
; 89   :     return result;

  00068	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006d	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00075	48 8b f0	 mov	 rsi, rax
  00078	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007d	f3 a4		 rep movsb
  0007f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 90   : }

  00087	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008e	5f		 pop	 rdi
  0008f	5e		 pop	 rsi
  00090	c3		 ret	 0
__i8	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__u64	PROC

; 70   : {

$LN5:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 71   :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 72   :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 50		 je	 SHORT $LN2@u64

; 73   :     {
; 74   :         result._const.type =TU64;

  0004f	c7 44 24 28 04
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 4

; 75   :         result._const.u64 =(_u64)t0->real;

  00057	33 c0		 xor	 eax, eax
  00059	48 8b 8c 24 d8
	00 00 00	 mov	 rcx, QWORD PTR t0$[rsp]
  00061	f2 0f 10 41 08	 movsd	 xmm0, QWORD PTR [rcx+8]
  00066	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@43e0000000000000
  0006e	72 1f		 jb	 SHORT $LN4@u64
  00070	f2 0f 5c 05 00
	00 00 00	 subsd	 xmm0, QWORD PTR __real@43e0000000000000
  00078	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR __real@43e0000000000000
  00080	73 0d		 jae	 SHORT $LN4@u64
  00082	48 b9 00 00 00
	00 00 00 00 80	 mov	 rcx, -9223372036854775808 ; 8000000000000000H
  0008c	48 03 c1	 add	 rax, rcx
$LN4@u64:
  0008f	f2 48 0f 2c c8	 cvttsd2si rcx, xmm0
  00094	48 03 c8	 add	 rcx, rax
  00097	48 8b c1	 mov	 rax, rcx
  0009a	48 89 44 24 30	 mov	 QWORD PTR result$[rsp+16], rax
$LN2@u64:

; 76   :     }
; 77   :     return result;

  0009f	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  000a4	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  000ac	48 8b f0	 mov	 rsi, rax
  000af	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  000b4	f3 a4		 rep movsb
  000b6	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 78   : }

  000be	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  000c5	5f		 pop	 rdi
  000c6	5e		 pop	 rsi
  000c7	c3		 ret	 0
__u64	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__u32	PROC

; 58   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 59   :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 60   :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 1a		 je	 SHORT $LN2@u32

; 61   :     {
; 62   :         result._const.type =TU32;

  0004f	c7 44 24 28 03
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 3

; 63   :         result._const.u32 =(_u32)t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 48 0f 2c 40
	08		 cvttsd2si rax, QWORD PTR [rax+8]
  00065	89 44 24 30	 mov	 DWORD PTR result$[rsp+16], eax
$LN2@u32:

; 64   :     }
; 65   :     return result;

  00069	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006e	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00076	48 8b f0	 mov	 rsi, rax
  00079	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007e	f3 a4		 rep movsb
  00080	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 66   : }

  00088	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008f	5f		 pop	 rdi
  00090	5e		 pop	 rsi
  00091	c3		 ret	 0
__u32	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__u16	PROC

; 46   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 47   :     CalcResult result ={.success=1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 48   :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 1a		 je	 SHORT $LN2@u16

; 49   :     {
; 50   :         result._const.type =TU16;

  0004f	c7 44 24 28 02
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 2

; 51   :         result._const.u16 =(_u16)t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 2c 40 08	 cvttsd2si eax, QWORD PTR [rax+8]
  00064	66 89 44 24 30	 mov	 WORD PTR result$[rsp+16], ax
$LN2@u16:

; 52   :     }
; 53   :     return result;

  00069	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006e	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00076	48 8b f0	 mov	 rsi, rax
  00079	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007e	f3 a4		 rep movsb
  00080	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 54   : }

  00088	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008f	5f		 pop	 rdi
  00090	5e		 pop	 rsi
  00091	c3		 ret	 0
__u16	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
result$ = 32
__$ReturnAddress$ = 208
t0$ = 216
__u8	PROC

; 34   : {

$LN4:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	56		 push	 rsi
  0000b	57		 push	 rdi
  0000c	48 81 ec b8 00
	00 00		 sub	 rsp, 184		; 000000b8H

; 35   :     CalcResult result ={.success =1};

  00013	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR result$[rsp], 1
  0001b	c7 44 24 28 00
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 0
  00023	c6 44 24 30 00	 mov	 BYTE PTR result$[rsp+16], 0
  00028	48 8d 44 24 31	 lea	 rax, QWORD PTR result$[rsp+17]
  0002d	48 8b f8	 mov	 rdi, rax
  00030	33 c0		 xor	 eax, eax
  00032	b9 7f 00 00 00	 mov	 ecx, 127		; 0000007fH
  00037	f3 aa		 rep stosb

; 36   :     if (IsRealConst(&result, t0))

  00039	48 8b 94 24 d8
	00 00 00	 mov	 rdx, QWORD PTR t0$[rsp]
  00041	48 8d 4c 24 20	 lea	 rcx, QWORD PTR result$[rsp]
  00046	e8 00 00 00 00	 call	 IsRealConst
  0004b	85 c0		 test	 eax, eax
  0004d	74 19		 je	 SHORT $LN2@u8

; 37   :     {
; 38   :         result._const.type =TU8;

  0004f	c7 44 24 28 01
	00 00 00	 mov	 DWORD PTR result$[rsp+8], 1

; 39   :         result._const.u8 =(_u8)t0->real;

  00057	48 8b 84 24 d8
	00 00 00	 mov	 rax, QWORD PTR t0$[rsp]
  0005f	f2 0f 2c 40 08	 cvttsd2si eax, QWORD PTR [rax+8]
  00064	88 44 24 30	 mov	 BYTE PTR result$[rsp+16], al
$LN2@u8:

; 40   :     }
; 41   :     return result;

  00068	48 8d 44 24 20	 lea	 rax, QWORD PTR result$[rsp]
  0006d	48 8b bc 24 d0
	00 00 00	 mov	 rdi, QWORD PTR __$ReturnAddress$[rsp]
  00075	48 8b f0	 mov	 rsi, rax
  00078	b9 90 00 00 00	 mov	 ecx, 144		; 00000090H
  0007d	f3 a4		 rep movsb
  0007f	48 8b 84 24 d0
	00 00 00	 mov	 rax, QWORD PTR __$ReturnAddress$[rsp]

; 42   : }

  00087	48 81 c4 b8 00
	00 00		 add	 rsp, 184		; 000000b8H
  0008e	5f		 pop	 rdi
  0008f	5e		 pop	 rsi
  00090	c3		 ret	 0
__u8	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\lang_v2_functions.c
_TEXT	SEGMENT
calc$ = 8
t0$ = 16
IsRealConst PROC

; 22   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 23   :     if (t0->type !=TREAL)

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR t0$[rsp]
  0000f	83 38 0c	 cmp	 DWORD PTR [rax], 12
  00012	74 26		 je	 SHORT $LN2@IsRealCons

; 24   :     {
; 25   :         calc->success =0;

  00014	48 8b 44 24 08	 mov	 rax, QWORD PTR calc$[rsp]
  00019	c7 00 00 00 00
	00		 mov	 DWORD PTR [rax], 0

; 26   :         calc->err.unexpType =t0->type;

  0001f	48 8b 44 24 08	 mov	 rax, QWORD PTR calc$[rsp]
  00024	48 8b 4c 24 10	 mov	 rcx, QWORD PTR t0$[rsp]
  00029	8b 09		 mov	 ecx, DWORD PTR [rcx]
  0002b	89 48 08	 mov	 DWORD PTR [rax+8], ecx

; 27   :         calc->err.expType =TREAL;

  0002e	48 8b 44 24 08	 mov	 rax, QWORD PTR calc$[rsp]
  00033	c7 40 0c 0c 00
	00 00		 mov	 DWORD PTR [rax+12], 12
$LN2@IsRealCons:

; 28   :     }
; 29   :     return calc->success;

  0003a	48 8b 44 24 08	 mov	 rax, QWORD PTR calc$[rsp]
  0003f	8b 00		 mov	 eax, DWORD PTR [rax]

; 30   : }

  00041	c3		 ret	 0
IsRealConst ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
cursor$ = 48
src_cpy$ = 56
prevMode$ = 64
prevColor$ = 68
rcFill$ = 72
__$ArrayPad$ = 88
hdc$ = 112
term$ = 120
PaintTerminal PROC

; 254  : {

$LN8:
  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000a	48 83 ec 68	 sub	 rsp, 104		; 00000068H
  0000e	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  00015	48 33 c4	 xor	 rax, rsp
  00018	48 89 44 24 58	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 255  :     RECT rcFill = { term->x , term->y, term->x +term->w, term->y +term->h };

  0001d	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  00022	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  00025	89 44 24 48	 mov	 DWORD PTR rcFill$[rsp], eax
  00029	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  0002e	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00031	89 44 24 4c	 mov	 DWORD PTR rcFill$[rsp+4], eax
  00035	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  0003a	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  0003d	48 8b 4c 24 78	 mov	 rcx, QWORD PTR term$[rsp]
  00042	03 41 3c	 add	 eax, DWORD PTR [rcx+60]
  00045	89 44 24 50	 mov	 DWORD PTR rcFill$[rsp+8], eax
  00049	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  0004e	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  00051	48 8b 4c 24 78	 mov	 rcx, QWORD PTR term$[rsp]
  00056	03 41 40	 add	 eax, DWORD PTR [rcx+64]
  00059	89 44 24 54	 mov	 DWORD PTR rcFill$[rsp+12], eax

; 256  :     FillRect(hdc, &rcFill, (HBRUSH)GetStockObject(BLACK_BRUSH));

  0005d	b9 04 00 00 00	 mov	 ecx, 4
  00062	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStockObject
  00068	4c 8b c0	 mov	 r8, rax
  0006b	48 8d 54 24 48	 lea	 rdx, QWORD PTR rcFill$[rsp]
  00070	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  00075	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_FillRect

; 257  :     
; 258  :     int prevMode=SetBkMode(hdc, TRANSPARENT);

  0007b	ba 01 00 00 00	 mov	 edx, 1
  00080	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  00085	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetBkMode
  0008b	89 44 24 40	 mov	 DWORD PTR prevMode$[rsp], eax

; 259  :     int prevColor =SetTextColor(hdc, RGB(255, 255, 255));

  0008f	ba ff ff ff 00	 mov	 edx, 16777215		; 00ffffffH
  00094	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  00099	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetTextColor
  0009f	89 44 24 44	 mov	 DWORD PTR prevColor$[rsp], eax

; 260  :     SourceRange src_cpy =term->src;

  000a3	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  000a8	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  000ac	48 89 44 24 38	 mov	 QWORD PTR src_cpy$[rsp], rax

; 261  :     Cursor cursor = { .x = term->x, .y =term->y+term->offset };

  000b1	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  000b6	8b 40 34	 mov	 eax, DWORD PTR [rax+52]
  000b9	89 44 24 30	 mov	 DWORD PTR cursor$[rsp], eax
  000bd	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  000c2	8b 40 38	 mov	 eax, DWORD PTR [rax+56]
  000c5	48 8b 4c 24 78	 mov	 rcx, QWORD PTR term$[rsp]
  000ca	03 41 30	 add	 eax, DWORD PTR [rcx+48]
  000cd	89 44 24 34	 mov	 DWORD PTR cursor$[rsp+4], eax
$LN2@PaintTermi:

; 262  :     
; 263  :     
; 264  :     while (term->buf.end !=src_cpy.start
; 265  :            && cursor.y < term->h)

  000d1	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  000d6	48 8b 4c 24 38	 mov	 rcx, QWORD PTR src_cpy$[rsp]
  000db	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  000df	0f 84 b3 00 00
	00		 je	 $LN3@PaintTermi
  000e5	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  000ea	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  000ed	39 44 24 34	 cmp	 DWORD PTR cursor$[rsp+4], eax
  000f1	0f 8d a1 00 00
	00		 jge	 $LN3@PaintTermi

; 266  :     {
; 267  :         if (*src_cpy.start =='\n'
; 268  :             || (cursor.x +term->fnt.w) > term->w)

  000f7	48 8b 44 24 38	 mov	 rax, QWORD PTR src_cpy$[rsp]
  000fc	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000ff	83 f8 0a	 cmp	 eax, 10
  00102	74 1a		 je	 SHORT $LN5@PaintTermi
  00104	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  00109	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  0010c	8b 4c 24 30	 mov	 ecx, DWORD PTR cursor$[rsp]
  00110	03 c8		 add	 ecx, eax
  00112	8b c1		 mov	 eax, ecx
  00114	48 8b 4c 24 78	 mov	 rcx, QWORD PTR term$[rsp]
  00119	3b 41 3c	 cmp	 eax, DWORD PTR [rcx+60]
  0011c	7e 1c		 jle	 SHORT $LN4@PaintTermi
$LN5@PaintTermi:

; 269  :         {
; 270  :             cursor.x =0;

  0011e	c7 44 24 30 00
	00 00 00	 mov	 DWORD PTR cursor$[rsp], 0

; 271  :             cursor.y += term->fnt.h;

  00126	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  0012b	8b 40 2c	 mov	 eax, DWORD PTR [rax+44]
  0012e	8b 4c 24 34	 mov	 ecx, DWORD PTR cursor$[rsp+4]
  00132	03 c8		 add	 ecx, eax
  00134	8b c1		 mov	 eax, ecx
  00136	89 44 24 34	 mov	 DWORD PTR cursor$[rsp+4], eax
$LN4@PaintTermi:

; 272  :         }
; 273  :         if (*src_cpy.start !='\n')

  0013a	48 8b 44 24 38	 mov	 rax, QWORD PTR src_cpy$[rsp]
  0013f	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00142	83 f8 0a	 cmp	 eax, 10
  00145	74 35		 je	 SHORT $LN6@PaintTermi

; 274  :         {
; 275  :             TextOutA(hdc, cursor.x, cursor.y, src_cpy.start, 1);

  00147	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR [rsp+32], 1
  0014f	4c 8b 4c 24 38	 mov	 r9, QWORD PTR src_cpy$[rsp]
  00154	44 8b 44 24 34	 mov	 r8d, DWORD PTR cursor$[rsp+4]
  00159	8b 54 24 30	 mov	 edx, DWORD PTR cursor$[rsp]
  0015d	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  00162	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TextOutA

; 276  :             cursor.x += term->fnt.w;

  00168	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  0016d	8b 40 28	 mov	 eax, DWORD PTR [rax+40]
  00170	8b 4c 24 30	 mov	 ecx, DWORD PTR cursor$[rsp]
  00174	03 c8		 add	 ecx, eax
  00176	8b c1		 mov	 eax, ecx
  00178	89 44 24 30	 mov	 DWORD PTR cursor$[rsp], eax
$LN6@PaintTermi:

; 277  :         }
; 278  :         src_cpy.start =IncrementCircular(term->buf.buffer, src_cpy.start);

  0017c	48 8b 54 24 38	 mov	 rdx, QWORD PTR src_cpy$[rsp]
  00181	48 8b 44 24 78	 mov	 rax, QWORD PTR term$[rsp]
  00186	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00189	e8 00 00 00 00	 call	 IncrementCircular
  0018e	48 89 44 24 38	 mov	 QWORD PTR src_cpy$[rsp], rax

; 279  :     }

  00193	e9 39 ff ff ff	 jmp	 $LN2@PaintTermi
$LN3@PaintTermi:

; 280  :     SetBkMode(hdc, prevMode);

  00198	8b 54 24 40	 mov	 edx, DWORD PTR prevMode$[rsp]
  0019c	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  001a1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetBkMode

; 281  :     SetTextColor(hdc, prevColor);

  001a7	8b 54 24 44	 mov	 edx, DWORD PTR prevColor$[rsp]
  001ab	48 8b 4c 24 70	 mov	 rcx, QWORD PTR hdc$[rsp]
  001b0	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetTextColor

; 282  : }

  001b6	48 8b 4c 24 58	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  001bb	48 33 cc	 xor	 rcx, rsp
  001be	e8 00 00 00 00	 call	 __security_check_cookie
  001c3	48 83 c4 68	 add	 rsp, 104		; 00000068H
  001c7	c3		 ret	 0
PaintTerminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
term$ = 64
str$ = 72
c$ = 80
InputTerminal PROC

; 234  : {

$LN3:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 235  :     static char _buf[256];
; 236  :     c=snprintf(_buf, 256, ">> %.*s\n",c, str);

  00013	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00018	48 89 44 24 20	 mov	 QWORD PTR [rsp+32], rax
  0001d	44 8b 4c 24 50	 mov	 r9d, DWORD PTR c$[rsp]
  00022	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG37128
  00029	ba 00 01 00 00	 mov	 edx, 256		; 00000100H
  0002e	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:?_buf@?1??InputTerminal@@9@9
  00035	e8 00 00 00 00	 call	 snprintf
  0003a	89 44 24 50	 mov	 DWORD PTR c$[rsp], eax

; 237  :     InputTermBuffer(term, _buf, c);

  0003e	44 8b 44 24 50	 mov	 r8d, DWORD PTR c$[rsp]
  00043	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:?_buf@?1??InputTerminal@@9@9
  0004a	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  0004f	e8 00 00 00 00	 call	 InputTermBuffer

; 238  : #if 0
; 239  :     if (ret.type == RET_VAL)
; 240  :     {
; 241  :         c =snprintf(_buf, 256, "%f\n", ret.val);
; 242  :         InputTermBuffer(term, _buf, c);
; 243  :     }
; 244  :     else if (ret.type ==RET_ERROR)
; 245  :     {
; 246  :         c =GetErrorDesc(ret.error, _buf);
; 247  :         InputTermBuffer(term, _buf, c);
; 248  :     }
; 249  : #endif
; 250  : }

  00054	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00058	c3		 ret	 0
InputTerminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
tv69 = 32
tv75 = 33
tv67 = 36
term$ = 64
str$ = 72
c$ = 80
InputTermBuffer PROC

; 215  : {

$LN9:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000a	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000f	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 216  :     if (c!=-1)

  00013	83 7c 24 50 ff	 cmp	 DWORD PTR c$[rsp], -1
  00018	74 45		 je	 SHORT $LN6@InputTermB
$LN2@InputTermB:

; 217  :     {
; 218  :         while (c--)

  0001a	8b 44 24 50	 mov	 eax, DWORD PTR c$[rsp]
  0001e	89 44 24 24	 mov	 DWORD PTR tv67[rsp], eax
  00022	8b 44 24 50	 mov	 eax, DWORD PTR c$[rsp]
  00026	ff c8		 dec	 eax
  00028	89 44 24 50	 mov	 DWORD PTR c$[rsp], eax
  0002c	83 7c 24 24 00	 cmp	 DWORD PTR tv67[rsp], 0
  00031	74 2a		 je	 SHORT $LN3@InputTermB

; 219  :         {
; 220  :             InputTermChar(term, *str++);

  00033	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00038	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  0003b	88 44 24 20	 mov	 BYTE PTR tv69[rsp], al
  0003f	0f b6 54 24 20	 movzx	 edx, BYTE PTR tv69[rsp]
  00044	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00049	e8 00 00 00 00	 call	 InputTermChar
  0004e	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00053	48 ff c0	 inc	 rax
  00056	48 89 44 24 48	 mov	 QWORD PTR str$[rsp], rax

; 221  :         }

  0005b	eb bd		 jmp	 SHORT $LN2@InputTermB
$LN3@InputTermB:

; 222  :     }

  0005d	eb 36		 jmp	 SHORT $LN7@InputTermB
$LN6@InputTermB:
$LN4@InputTermB:

; 223  :     else
; 224  :     {
; 225  :         while (*str)

  0005f	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00064	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00067	85 c0		 test	 eax, eax
  00069	74 2a		 je	 SHORT $LN5@InputTermB

; 226  :         {
; 227  :             InputTermChar(term, *str++);

  0006b	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  00070	0f b6 00	 movzx	 eax, BYTE PTR [rax]
  00073	88 44 24 21	 mov	 BYTE PTR tv75[rsp], al
  00077	0f b6 54 24 21	 movzx	 edx, BYTE PTR tv75[rsp]
  0007c	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00081	e8 00 00 00 00	 call	 InputTermChar
  00086	48 8b 44 24 48	 mov	 rax, QWORD PTR str$[rsp]
  0008b	48 ff c0	 inc	 rax
  0008e	48 89 44 24 48	 mov	 QWORD PTR str$[rsp], rax

; 228  :         }

  00093	eb ca		 jmp	 SHORT $LN4@InputTermB
$LN5@InputTermB:
$LN7@InputTermB:

; 229  :     }
; 230  : }

  00095	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00099	c3		 ret	 0
InputTermBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
term$ = 48
c$ = 56
InputTermChar PROC

; 204  : {

$LN4:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 205  :     if (c == '\n')

  0000d	0f be 44 24 38	 movsx	 eax, BYTE PTR c$[rsp]
  00012	83 f8 0a	 cmp	 eax, 10
  00015	75 0a		 jne	 SHORT $LN2@InputTermC

; 206  :     {
; 207  :         AddLine(term);

  00017	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0001c	e8 00 00 00 00	 call	 AddLine
$LN2@InputTermC:

; 208  :     }
; 209  :     AddToBuffer(term, c);

  00021	0f b6 54 24 38	 movzx	 edx, BYTE PTR c$[rsp]
  00026	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0002b	e8 00 00 00 00	 call	 AddToBuffer

; 210  :     term->cursor.x += term->fnt.w;

  00030	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  00035	8b 40 20	 mov	 eax, DWORD PTR [rax+32]
  00038	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0003d	03 41 28	 add	 eax, DWORD PTR [rcx+40]
  00040	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  00045	89 41 20	 mov	 DWORD PTR [rcx+32], eax

; 211  : }

  00048	48 83 c4 28	 add	 rsp, 40			; 00000028H
  0004c	c3		 ret	 0
InputTermChar ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
term$ = 48
AddLine	PROC

; 185  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 186  : 	term->cursor.x =0;

  00009	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  0000e	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [rax+32], 0

; 187  :     
; 188  : 	term->cursor.y += term->fnt.h;

  00015	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  0001a	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  0001d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  00022	03 41 2c	 add	 eax, DWORD PTR [rcx+44]
  00025	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0002a	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 189  : 	if ((term->cursor.y +term->fnt.h) > term->h)

  0002d	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  00032	8b 40 24	 mov	 eax, DWORD PTR [rax+36]
  00035	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0003a	03 41 2c	 add	 eax, DWORD PTR [rcx+44]
  0003d	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  00042	3b 41 40	 cmp	 eax, DWORD PTR [rcx+64]
  00045	7e 7a		 jle	 SHORT $LN2@AddLine

; 190  : 	{
; 191  : 		term->offset += term->h - term->cursor.y  -term->fnt.h;

  00047	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  0004c	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  00051	8b 49 24	 mov	 ecx, DWORD PTR [rcx+36]
  00054	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  00057	2b c1		 sub	 eax, ecx
  00059	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0005e	2b 41 2c	 sub	 eax, DWORD PTR [rcx+44]
  00061	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  00066	03 41 30	 add	 eax, DWORD PTR [rcx+48]
  00069	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0006e	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 192  : 		term->cursor.y = term->h -term->fnt.h;

  00071	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  00076	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0007b	8b 49 2c	 mov	 ecx, DWORD PTR [rcx+44]
  0007e	8b 40 40	 mov	 eax, DWORD PTR [rax+64]
  00081	2b c1		 sub	 eax, ecx
  00083	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  00088	89 41 24	 mov	 DWORD PTR [rcx+36], eax

; 193  :         
; 194  : 		if ((-term->offset) > term->fnt.h)

  0008b	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  00090	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  00093	f7 d8		 neg	 eax
  00095	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  0009a	3b 41 2c	 cmp	 eax, DWORD PTR [rcx+44]
  0009d	7e 22		 jle	 SHORT $LN3@AddLine

; 195  : 		{
; 196  : 			term->offset += term->fnt.h;

  0009f	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  000a4	8b 40 30	 mov	 eax, DWORD PTR [rax+48]
  000a7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  000ac	03 41 2c	 add	 eax, DWORD PTR [rcx+44]
  000af	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  000b4	89 41 30	 mov	 DWORD PTR [rcx+48], eax

; 197  : 			IncrementLine(term);

  000b7	48 8b 4c 24 30	 mov	 rcx, QWORD PTR term$[rsp]
  000bc	e8 00 00 00 00	 call	 IncrementLine
$LN3@AddLine:
$LN2@AddLine:

; 198  : 		}
; 199  : 	}
; 200  : }

  000c1	48 83 c4 28	 add	 rsp, 40			; 00000028H
  000c5	c3		 ret	 0
AddLine	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
c$ = 32
count$ = 36
tv76 = 40
tv75 = 44
term$ = 64
IncrementLine PROC

; 170  : {

$LN5:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 171  : 	term->src.start = IncrementCircular(term->buf.buffer, term->src.start);

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0000e	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00012	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00017	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0001a	e8 00 00 00 00	 call	 IncrementCircular
  0001f	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00024	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 172  : 	int count= term->w /term->fnt.w;

  00028	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0002d	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00030	99		 cdq
  00031	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00036	f7 79 28	 idiv	 DWORD PTR [rcx+40]
  00039	89 44 24 24	 mov	 DWORD PTR count$[rsp], eax

; 173  : 	int c=0;

  0003d	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR c$[rsp], 0
$LN2@IncrementL:

; 174  : 	while (c++ != count
; 175  :            && *term->src.start != '\n')

  00045	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  00049	89 44 24 2c	 mov	 DWORD PTR tv75[rsp], eax
  0004d	8b 44 24 24	 mov	 eax, DWORD PTR count$[rsp]
  00051	89 44 24 28	 mov	 DWORD PTR tv76[rsp], eax
  00055	8b 44 24 20	 mov	 eax, DWORD PTR c$[rsp]
  00059	ff c0		 inc	 eax
  0005b	89 44 24 20	 mov	 DWORD PTR c$[rsp], eax
  0005f	8b 44 24 28	 mov	 eax, DWORD PTR tv76[rsp]
  00063	39 44 24 2c	 cmp	 DWORD PTR tv75[rsp], eax
  00067	74 32		 je	 SHORT $LN3@IncrementL
  00069	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0006e	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  00072	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00075	83 f8 0a	 cmp	 eax, 10
  00078	74 21		 je	 SHORT $LN3@IncrementL

; 176  : 	{
; 177  : 		term->src.start = IncrementCircular(term->buf.buffer, term->src.start);

  0007a	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0007f	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  00083	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00088	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0008b	e8 00 00 00 00	 call	 IncrementCircular
  00090	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00095	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 178  : 	}

  00099	eb aa		 jmp	 SHORT $LN2@IncrementL
$LN3@IncrementL:

; 179  : 	term->src.start = IncrementCircular(term->buf.buffer, term->src.start);

  0009b	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  000a0	48 8b 50 18	 mov	 rdx, QWORD PTR [rax+24]
  000a4	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  000a9	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000ac	e8 00 00 00 00	 call	 IncrementCircular
  000b1	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  000b6	48 89 41 18	 mov	 QWORD PTR [rcx+24], rax

; 180  : 	term->line++;

  000ba	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  000bf	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  000c2	ff c0		 inc	 eax
  000c4	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  000c9	89 41 44	 mov	 DWORD PTR [rcx+68], eax

; 181  : }

  000cc	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d0	c3		 ret	 0
IncrementLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
buf_end$ = 32
buf_start$ = 40
term$ = 64
c$ = 72
AddToBuffer PROC

; 151  : {

$LN5:
  00000	88 54 24 10	 mov	 BYTE PTR [rsp+16], dl
  00004	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00009	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 152  : 	char *buf_start =term->buf.start;

  0000d	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00012	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00016	48 89 44 24 28	 mov	 QWORD PTR buf_start$[rsp], rax

; 153  : 	char *buf_end =term->buf.end;

  0001b	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00020	48 8b 40 10	 mov	 rax, QWORD PTR [rax+16]
  00024	48 89 44 24 20	 mov	 QWORD PTR buf_end$[rsp], rax

; 154  :     
; 155  : 	*buf_end =c;

  00029	48 8b 44 24 20	 mov	 rax, QWORD PTR buf_end$[rsp]
  0002e	0f b6 4c 24 48	 movzx	 ecx, BYTE PTR c$[rsp]
  00033	88 08		 mov	 BYTE PTR [rax], cl

; 156  :     
; 157  : 	term->buf.end =IncrementCircular(term->buf.buffer, term->buf.end);

  00035	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0003a	48 8b 50 10	 mov	 rdx, QWORD PTR [rax+16]
  0003e	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00043	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00046	e8 00 00 00 00	 call	 IncrementCircular
  0004b	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00050	48 89 41 10	 mov	 QWORD PTR [rcx+16], rax

; 158  : 	if (term->buf.end ==term->buf.start)

  00054	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00059	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  0005e	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00062	48 39 48 10	 cmp	 QWORD PTR [rax+16], rcx
  00066	75 2c		 jne	 SHORT $LN2@AddToBuffe

; 159  : 	{
; 160  : 		IncrementBuffer(term);

  00068	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  0006d	e8 00 00 00 00	 call	 IncrementBuffer

; 161  : 		if (buf_start ==term->src.start)

  00072	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00077	48 8b 40 18	 mov	 rax, QWORD PTR [rax+24]
  0007b	48 39 44 24 28	 cmp	 QWORD PTR buf_start$[rsp], rax
  00080	75 12		 jne	 SHORT $LN3@AddToBuffe

; 162  : 		{
; 163  : 			term->src.start =term->buf.start;

  00082	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00087	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  0008c	48 8b 49 08	 mov	 rcx, QWORD PTR [rcx+8]
  00090	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx
$LN3@AddToBuffe:
$LN2@AddToBuffe:

; 164  : 		}
; 165  : 	}
; 166  : }

  00094	48 83 c4 38	 add	 rsp, 56			; 00000038H
  00098	c3		 ret	 0
AddToBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
count$ = 32
width$ = 36
term$ = 64
IncrementBuffer PROC

; 131  : {

$LN6:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 38	 sub	 rsp, 56			; 00000038H

; 132  :     int width =term->w /term->fnt.w;

  00009	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0000e	8b 40 3c	 mov	 eax, DWORD PTR [rax+60]
  00011	99		 cdq
  00012	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00017	f7 79 28	 idiv	 DWORD PTR [rcx+40]
  0001a	89 44 24 24	 mov	 DWORD PTR width$[rsp], eax

; 133  : 	term->buf.start = IncrementCircular(term->buf.buffer, term->buf.start);

  0001e	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00023	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00027	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0002c	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0002f	e8 00 00 00 00	 call	 IncrementCircular
  00034	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00039	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 134  :     int count =1;

  0003d	c7 44 24 20 01
	00 00 00	 mov	 DWORD PTR count$[rsp], 1
$LN2@IncrementB:

; 135  :     
; 136  : 	while (*term->buf.start != '\n'
; 137  :            && count <width)

  00045	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0004a	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  0004e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00051	83 f8 0a	 cmp	 eax, 10
  00054	74 35		 je	 SHORT $LN3@IncrementB
  00056	8b 44 24 24	 mov	 eax, DWORD PTR width$[rsp]
  0005a	39 44 24 20	 cmp	 DWORD PTR count$[rsp], eax
  0005e	7d 2b		 jge	 SHORT $LN3@IncrementB

; 138  : 	{
; 139  :         count++;

  00060	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00064	ff c0		 inc	 eax
  00066	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax

; 140  : 		term->buf.start = IncrementCircular(term->buf.buffer, term->buf.start);

  0006a	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  0006f	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  00073	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00078	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  0007b	e8 00 00 00 00	 call	 IncrementCircular
  00080	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  00085	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax

; 141  : 	}

  00089	eb ba		 jmp	 SHORT $LN2@IncrementB
$LN3@IncrementB:

; 142  :     if (*term->buf.start =='\n')

  0008b	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  00090	48 8b 40 08	 mov	 rax, QWORD PTR [rax+8]
  00094	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00097	83 f8 0a	 cmp	 eax, 10
  0009a	75 1f		 jne	 SHORT $LN4@IncrementB

; 143  :     {
; 144  :         term->buf.start = IncrementCircular(term->buf.buffer, term->buf.start);

  0009c	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  000a1	48 8b 50 08	 mov	 rdx, QWORD PTR [rax+8]
  000a5	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  000aa	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  000ad	e8 00 00 00 00	 call	 IncrementCircular
  000b2	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  000b7	48 89 41 08	 mov	 QWORD PTR [rcx+8], rax
$LN4@IncrementB:

; 145  :     }
; 146  : 	term->line--;

  000bb	48 8b 44 24 40	 mov	 rax, QWORD PTR term$[rsp]
  000c0	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  000c3	ff c8		 dec	 eax
  000c5	48 8b 4c 24 40	 mov	 rcx, QWORD PTR term$[rsp]
  000ca	89 41 44	 mov	 DWORD PTR [rcx+68], eax

; 147  : }

  000cd	48 83 c4 38	 add	 rsp, 56			; 00000038H
  000d1	c3		 ret	 0
IncrementBuffer ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
count$ = 32
line$ = 36
width$ = 40
buf_cpy$ = 48
term$ = 112
w$ = 120
h$ = 128
UpdateTerminal PROC

; 101  : {

$LN8:
  00000	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  00005	89 54 24 10	 mov	 DWORD PTR [rsp+16], edx
  00009	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  0000e	56		 push	 rsi
  0000f	57		 push	 rdi
  00010	48 83 ec 58	 sub	 rsp, 88			; 00000058H

; 102  :     int width = w/term->fnt.w;

  00014	8b 44 24 78	 mov	 eax, DWORD PTR w$[rsp]
  00018	99		 cdq
  00019	48 8b 4c 24 70	 mov	 rcx, QWORD PTR term$[rsp]
  0001e	f7 79 28	 idiv	 DWORD PTR [rcx+40]
  00021	89 44 24 28	 mov	 DWORD PTR width$[rsp], eax

; 103  : 	BufferRange buf_cpy =term->buf;

  00025	48 8d 44 24 30	 lea	 rax, QWORD PTR buf_cpy$[rsp]
  0002a	48 8b f8	 mov	 rdi, rax
  0002d	48 8b 74 24 70	 mov	 rsi, QWORD PTR term$[rsp]
  00032	b9 18 00 00 00	 mov	 ecx, 24
  00037	f3 a4		 rep movsb

; 104  :     int line=0;

  00039	c7 44 24 24 00
	00 00 00	 mov	 DWORD PTR line$[rsp], 0

; 105  :     int count=0;

  00041	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0
$LN2@UpdateTerm:

; 106  :     
; 107  : 	while (line !=term->line)

  00049	48 8b 44 24 70	 mov	 rax, QWORD PTR term$[rsp]
  0004e	8b 40 44	 mov	 eax, DWORD PTR [rax+68]
  00051	39 44 24 24	 cmp	 DWORD PTR line$[rsp], eax
  00055	0f 84 8d 00 00
	00		 je	 $LN3@UpdateTerm

; 108  : 	{
; 109  : 		buf_cpy.start = IncrementCircular(buf_cpy.buffer, buf_cpy.start);

  0005b	48 8b 54 24 38	 mov	 rdx, QWORD PTR buf_cpy$[rsp+8]
  00060	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf_cpy$[rsp]
  00065	e8 00 00 00 00	 call	 IncrementCircular
  0006a	48 89 44 24 38	 mov	 QWORD PTR buf_cpy$[rsp+8], rax

; 110  :         count++;

  0006f	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00073	ff c0		 inc	 eax
  00075	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax
$LN4@UpdateTerm:

; 111  : 		while (*buf_cpy.start != '\n'
; 112  :                && count <width)

  00079	48 8b 44 24 38	 mov	 rax, QWORD PTR buf_cpy$[rsp+8]
  0007e	0f be 00	 movsx	 eax, BYTE PTR [rax]
  00081	83 f8 0a	 cmp	 eax, 10
  00084	74 2a		 je	 SHORT $LN5@UpdateTerm
  00086	8b 44 24 28	 mov	 eax, DWORD PTR width$[rsp]
  0008a	39 44 24 20	 cmp	 DWORD PTR count$[rsp], eax
  0008e	7d 20		 jge	 SHORT $LN5@UpdateTerm

; 113  :         {
; 114  :             count ++;

  00090	8b 44 24 20	 mov	 eax, DWORD PTR count$[rsp]
  00094	ff c0		 inc	 eax
  00096	89 44 24 20	 mov	 DWORD PTR count$[rsp], eax

; 115  : 			buf_cpy.start = IncrementCircular(buf_cpy.buffer, buf_cpy.start);

  0009a	48 8b 54 24 38	 mov	 rdx, QWORD PTR buf_cpy$[rsp+8]
  0009f	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf_cpy$[rsp]
  000a4	e8 00 00 00 00	 call	 IncrementCircular
  000a9	48 89 44 24 38	 mov	 QWORD PTR buf_cpy$[rsp+8], rax

; 116  : 		}

  000ae	eb c9		 jmp	 SHORT $LN4@UpdateTerm
$LN5@UpdateTerm:

; 117  :         if (*buf_cpy.start =='\n')

  000b0	48 8b 44 24 38	 mov	 rax, QWORD PTR buf_cpy$[rsp+8]
  000b5	0f be 00	 movsx	 eax, BYTE PTR [rax]
  000b8	83 f8 0a	 cmp	 eax, 10
  000bb	75 14		 jne	 SHORT $LN6@UpdateTerm

; 118  :         {
; 119  :             buf_cpy.start = IncrementCircular(buf_cpy.buffer, buf_cpy.start);

  000bd	48 8b 54 24 38	 mov	 rdx, QWORD PTR buf_cpy$[rsp+8]
  000c2	48 8b 4c 24 30	 mov	 rcx, QWORD PTR buf_cpy$[rsp]
  000c7	e8 00 00 00 00	 call	 IncrementCircular
  000cc	48 89 44 24 38	 mov	 QWORD PTR buf_cpy$[rsp+8], rax
$LN6@UpdateTerm:

; 120  :         }
; 121  :         count=0;

  000d1	c7 44 24 20 00
	00 00 00	 mov	 DWORD PTR count$[rsp], 0

; 122  : 		line++;

  000d9	8b 44 24 24	 mov	 eax, DWORD PTR line$[rsp]
  000dd	ff c0		 inc	 eax
  000df	89 44 24 24	 mov	 DWORD PTR line$[rsp], eax

; 123  : 	}

  000e3	e9 61 ff ff ff	 jmp	 $LN2@UpdateTerm
$LN3@UpdateTerm:

; 124  :     
; 125  : 	term->w =w;

  000e8	48 8b 44 24 70	 mov	 rax, QWORD PTR term$[rsp]
  000ed	8b 4c 24 78	 mov	 ecx, DWORD PTR w$[rsp]
  000f1	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 126  :     term->h =h;

  000f4	48 8b 44 24 70	 mov	 rax, QWORD PTR term$[rsp]
  000f9	8b 8c 24 80 00
	00 00		 mov	 ecx, DWORD PTR h$[rsp]
  00100	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 127  : }

  00103	48 83 c4 58	 add	 rsp, 88			; 00000058H
  00107	5f		 pop	 rdi
  00108	5e		 pop	 rsi
  00109	c3		 ret	 0
UpdateTerminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
baseptr$ = 8
ptr$ = 16
DecrementCircular PROC

; 91   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 92   : 	if (--ptr == (baseptr-1))

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 ff c8	 dec	 rax
  00012	48 89 44 24 10	 mov	 QWORD PTR ptr$[rsp], rax
  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR baseptr$[rsp]
  0001c	48 ff c8	 dec	 rax
  0001f	48 39 44 24 10	 cmp	 QWORD PTR ptr$[rsp], rax
  00024	75 10		 jne	 SHORT $LN2@DecrementC

; 93   : 	{
; 94   : 		ptr =baseptr +ALLOC_SZ-1;

  00026	48 8b 44 24 08	 mov	 rax, QWORD PTR baseptr$[rsp]
  0002b	48 05 cf 22 00
	00		 add	 rax, 8911		; 000022cfH
  00031	48 89 44 24 10	 mov	 QWORD PTR ptr$[rsp], rax
$LN2@DecrementC:

; 95   : 	}
; 96   : 	return ptr;

  00036	48 8b 44 24 10	 mov	 rax, QWORD PTR ptr$[rsp]

; 97   : }

  0003b	c3		 ret	 0
DecrementCircular ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
baseptr$ = 8
ptr$ = 16
IncrementCircular PROC

; 81   : {

  00000	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  00005	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx

; 82   : 	if (++ptr == (baseptr +ALLOC_SZ))

  0000a	48 8b 44 24 10	 mov	 rax, QWORD PTR ptr$[rsp]
  0000f	48 ff c0	 inc	 rax
  00012	48 89 44 24 10	 mov	 QWORD PTR ptr$[rsp], rax
  00017	48 8b 44 24 08	 mov	 rax, QWORD PTR baseptr$[rsp]
  0001c	48 05 d0 22 00
	00		 add	 rax, 8912		; 000022d0H
  00022	48 39 44 24 10	 cmp	 QWORD PTR ptr$[rsp], rax
  00027	75 0a		 jne	 SHORT $LN2@IncrementC

; 83   : 	{
; 84   : 		ptr =baseptr;

  00029	48 8b 44 24 08	 mov	 rax, QWORD PTR baseptr$[rsp]
  0002e	48 89 44 24 10	 mov	 QWORD PTR ptr$[rsp], rax
$LN2@IncrementC:

; 85   : 	}
; 86   : 	return ptr;

  00033	48 8b 44 24 10	 mov	 rax, QWORD PTR ptr$[rsp]

; 87   : }

  00038	c3		 ret	 0
IncrementCircular ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
term$ = 48
UnInitTerminal PROC

; 75   : {

$LN3:
  00000	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00005	48 83 ec 28	 sub	 rsp, 40			; 00000028H

; 76   : 	VirtualFree(term->buf.buffer, 0, MEM_FREE);

  00009	41 b8 00 00 01
	00		 mov	 r8d, 65536		; 00010000H
  0000f	33 d2		 xor	 edx, edx
  00011	48 8b 44 24 30	 mov	 rax, QWORD PTR term$[rsp]
  00016	48 8b 08	 mov	 rcx, QWORD PTR [rax]
  00019	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualFree

; 77   : }

  0001f	48 83 c4 28	 add	 rsp, 40			; 00000028H
  00023	c3		 ret	 0
UnInitTerminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\terminal.c
_TEXT	SEGMENT
hdc$ = 32
tm$ = 40
__$ArrayPad$ = 96
term$ = 128
hWnd$ = 136
x$ = 144
y$ = 152
w$ = 160
h$ = 168
InitTerminal PROC

; 51   : {

$LN4:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	44 89 44 24 18	 mov	 DWORD PTR [rsp+24], r8d
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 83 ec 78	 sub	 rsp, 120		; 00000078H
  00018	48 8b 05 00 00
	00 00		 mov	 rax, QWORD PTR __security_cookie
  0001f	48 33 c4	 xor	 rax, rsp
  00022	48 89 44 24 60	 mov	 QWORD PTR __$ArrayPad$[rsp], rax

; 52   : 	HDC hdc=GetDC(hWnd);

  00027	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  0002f	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetDC
  00035	48 89 44 24 20	 mov	 QWORD PTR hdc$[rsp], rax

; 53   : 	TEXTMETRICA tm;
; 54   : 	GetTextMetricsA(hdc, &tm);

  0003a	48 8d 54 24 28	 lea	 rdx, QWORD PTR tm$[rsp]
  0003f	48 8b 4c 24 20	 mov	 rcx, QWORD PTR hdc$[rsp]
  00044	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetTextMetricsA

; 55   : 	term->fnt.w = tm.tmAveCharWidth;

  0004a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00052	8b 4c 24 3c	 mov	 ecx, DWORD PTR tm$[rsp+20]
  00056	89 48 28	 mov	 DWORD PTR [rax+40], ecx

; 56   : 	term->fnt.h = tm.tmHeight;

  00059	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00061	8b 4c 24 28	 mov	 ecx, DWORD PTR tm$[rsp]
  00065	89 48 2c	 mov	 DWORD PTR [rax+44], ecx

; 57   :     
; 58   : 	term->x =x;

  00068	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00070	8b 8c 24 90 00
	00 00		 mov	 ecx, DWORD PTR x$[rsp]
  00077	89 48 34	 mov	 DWORD PTR [rax+52], ecx

; 59   : 	term->y =y;

  0007a	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00082	8b 8c 24 98 00
	00 00		 mov	 ecx, DWORD PTR y$[rsp]
  00089	89 48 38	 mov	 DWORD PTR [rax+56], ecx

; 60   : 	term->w =w;

  0008c	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00094	8b 8c 24 a0 00
	00 00		 mov	 ecx, DWORD PTR w$[rsp]
  0009b	89 48 3c	 mov	 DWORD PTR [rax+60], ecx

; 61   : 	term->h =h;

  0009e	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  000a6	8b 8c 24 a8 00
	00 00		 mov	 ecx, DWORD PTR h$[rsp]
  000ad	89 48 40	 mov	 DWORD PTR [rax+64], ecx

; 62   : 	term->buf.buffer =VirtualAlloc(NULL, ALLOC_SZ, MEM_COMMIT|MEM_RESERVE, PAGE_READWRITE);

  000b0	41 b9 04 00 00
	00		 mov	 r9d, 4
  000b6	41 b8 00 30 00
	00		 mov	 r8d, 12288		; 00003000H
  000bc	ba d0 22 00 00	 mov	 edx, 8912		; 000022d0H
  000c1	33 c9		 xor	 ecx, ecx
  000c3	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_VirtualAlloc
  000c9	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR term$[rsp]
  000d1	48 89 01	 mov	 QWORD PTR [rcx], rax

; 63   : 	assert(term->buf.buffer);

  000d4	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  000dc	48 83 38 00	 cmp	 QWORD PTR [rax], 0
  000e0	75 1b		 jne	 SHORT $LN3@InitTermin
  000e2	41 b8 3f 00 00
	00		 mov	 r8d, 63			; 0000003fH
  000e8	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG37047
  000ef	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG37048
  000f6	e8 00 00 00 00	 call	 _wassert
  000fb	33 c0		 xor	 eax, eax
$LN3@InitTermin:

; 64   : 	term->buf.start =term->buf.buffer;

  000fd	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00105	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR term$[rsp]
  0010d	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00110	48 89 48 08	 mov	 QWORD PTR [rax+8], rcx

; 65   : 	term->buf.end =term->buf.buffer;

  00114	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  0011c	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR term$[rsp]
  00124	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  00127	48 89 48 10	 mov	 QWORD PTR [rax+16], rcx

; 66   :     
; 67   : 	term->src.start =term->buf.buffer;

  0012b	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00133	48 8b 8c 24 80
	00 00 00	 mov	 rcx, QWORD PTR term$[rsp]
  0013b	48 8b 09	 mov	 rcx, QWORD PTR [rcx]
  0013e	48 89 48 18	 mov	 QWORD PTR [rax+24], rcx

; 68   : 	term->cursor.x =0;

  00142	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  0014a	c7 40 20 00 00
	00 00		 mov	 DWORD PTR [rax+32], 0

; 69   : 	term->cursor.y =0;

  00151	48 8b 84 24 80
	00 00 00	 mov	 rax, QWORD PTR term$[rsp]
  00159	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [rax+36], 0

; 70   : 	ReleaseDC(hWnd, hdc);

  00160	48 8b 54 24 20	 mov	 rdx, QWORD PTR hdc$[rsp]
  00165	48 8b 8c 24 88
	00 00 00	 mov	 rcx, QWORD PTR hWnd$[rsp]
  0016d	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ReleaseDC

; 71   : }

  00173	48 8b 4c 24 60	 mov	 rcx, QWORD PTR __$ArrayPad$[rsp]
  00178	48 33 cc	 xor	 rcx, rsp
  0017b	e8 00 00 00 00	 call	 __security_check_cookie
  00180	48 83 c4 78	 add	 rsp, 120		; 00000078H
  00184	c3		 ret	 0
InitTerminal ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File c:\Users\joshu\Documents\cal\main.c
_TEXT	SEGMENT
hWnd$ = 96
app$ = 104
wc$ = 112
msg$ = 192
hInstance$ = 256
hPrevInstance$ = 264
lpCmdline$ = 272
nCmdShow$ = 280
WinMain	PROC

; 82   : {

$LN7:
  00000	44 89 4c 24 20	 mov	 DWORD PTR [rsp+32], r9d
  00005	4c 89 44 24 18	 mov	 QWORD PTR [rsp+24], r8
  0000a	48 89 54 24 10	 mov	 QWORD PTR [rsp+16], rdx
  0000f	48 89 4c 24 08	 mov	 QWORD PTR [rsp+8], rcx
  00014	48 81 ec f8 00
	00 00		 sub	 rsp, 248		; 000000f8H

; 83   :     SetProcessDPIAware();

  0001b	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_SetProcessDPIAware

; 84   :     App *app =InitApp();

  00021	e8 00 00 00 00	 call	 InitApp
  00026	48 89 44 24 68	 mov	 QWORD PTR app$[rsp], rax

; 85   :     
; 86   :     WNDCLASSA wc =

  0002b	c7 44 24 70 02
	00 00 00	 mov	 DWORD PTR wc$[rsp], 2
  00033	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:WindowProc
  0003a	48 89 44 24 78	 mov	 QWORD PTR wc$[rsp+8], rax
  0003f	c7 84 24 80 00
	00 00 00 00 00
	00		 mov	 DWORD PTR wc$[rsp+16], 0
  0004a	c7 84 24 84 00
	00 00 00 00 00
	00		 mov	 DWORD PTR wc$[rsp+20], 0
  00055	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  0005d	48 89 84 24 88
	00 00 00	 mov	 QWORD PTR wc$[rsp+24], rax
  00065	ba 00 7f 00 00	 mov	 edx, 32512		; 00007f00H
  0006a	33 c9		 xor	 ecx, ecx
  0006c	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadIconA
  00072	48 89 84 24 90
	00 00 00	 mov	 QWORD PTR wc$[rsp+32], rax
  0007a	ba 00 7f 00 00	 mov	 edx, 32512		; 00007f00H
  0007f	33 c9		 xor	 ecx, ecx
  00081	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_LoadCursorA
  00087	48 89 84 24 98
	00 00 00	 mov	 QWORD PTR wc$[rsp+40], rax
  0008f	33 c9		 xor	 ecx, ecx
  00091	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetStockObject
  00097	48 89 84 24 a0
	00 00 00	 mov	 QWORD PTR wc$[rsp+48], rax
  0009f	48 c7 84 24 a8
	00 00 00 00 00
	00 00		 mov	 QWORD PTR wc$[rsp+56], 0
  000ab	48 8d 05 00 00
	00 00		 lea	 rax, OFFSET FLAT:$SG39219
  000b2	48 89 84 24 b0
	00 00 00	 mov	 QWORD PTR wc$[rsp+64], rax

; 87   :     {
; 88   :         .style =CS_HREDRAW,
; 89   :         .hInstance =hInstance,
; 90   :         .hIcon =LoadIconA(NULL, MAKEINTRESOURCEA(IDI_APPLICATION)),
; 91   :         .hCursor =LoadCursorA(NULL, MAKEINTRESOURCEA(IDC_ARROW)),
; 92   :         .hbrBackground =(HBRUSH)GetStockObject(WHITE_BRUSH),
; 93   :         .lpfnWndProc =WindowProc,
; 94   :         .lpszClassName =WNDCLASS_
; 95   :     };
; 96   :     assert(RegisterClassA(&wc));

  000ba	48 8d 4c 24 70	 lea	 rcx, QWORD PTR wc$[rsp]
  000bf	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_RegisterClassA
  000c5	0f b7 c0	 movzx	 eax, ax
  000c8	85 c0		 test	 eax, eax
  000ca	75 1b		 jne	 SHORT $LN5@WinMain
  000cc	41 b8 60 00 00
	00		 mov	 r8d, 96			; 00000060H
  000d2	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39220
  000d9	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG39221
  000e0	e8 00 00 00 00	 call	 _wassert
  000e5	33 c0		 xor	 eax, eax
$LN5@WinMain:

; 97   :     HWND hWnd =CreateWindowExA(0, WNDCLASS_, WNDNAME_, WS_OVERLAPPEDWINDOW, CW_USEDEFAULT, CW_USEDEFAULT, 500, 600, NULL, NULL, hInstance, app);

  000e7	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  000ec	48 89 44 24 58	 mov	 QWORD PTR [rsp+88], rax
  000f1	48 8b 84 24 00
	01 00 00	 mov	 rax, QWORD PTR hInstance$[rsp]
  000f9	48 89 44 24 50	 mov	 QWORD PTR [rsp+80], rax
  000fe	48 c7 44 24 48
	00 00 00 00	 mov	 QWORD PTR [rsp+72], 0
  00107	48 c7 44 24 40
	00 00 00 00	 mov	 QWORD PTR [rsp+64], 0
  00110	c7 44 24 38 58
	02 00 00	 mov	 DWORD PTR [rsp+56], 600	; 00000258H
  00118	c7 44 24 30 f4
	01 00 00	 mov	 DWORD PTR [rsp+48], 500	; 000001f4H
  00120	c7 44 24 28 00
	00 00 80	 mov	 DWORD PTR [rsp+40], -2147483648 ; ffffffff80000000H
  00128	c7 44 24 20 00
	00 00 80	 mov	 DWORD PTR [rsp+32], -2147483648 ; ffffffff80000000H
  00130	41 b9 00 00 cf
	00		 mov	 r9d, 13565952		; 00cf0000H
  00136	4c 8d 05 00 00
	00 00		 lea	 r8, OFFSET FLAT:$SG39222
  0013d	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39223
  00144	33 c9		 xor	 ecx, ecx
  00146	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_CreateWindowExA
  0014c	48 89 44 24 60	 mov	 QWORD PTR hWnd$[rsp], rax

; 98   :     assert(hWnd);

  00151	48 83 7c 24 60
	00		 cmp	 QWORD PTR hWnd$[rsp], 0
  00157	75 1b		 jne	 SHORT $LN6@WinMain
  00159	41 b8 62 00 00
	00		 mov	 r8d, 98			; 00000062H
  0015f	48 8d 15 00 00
	00 00		 lea	 rdx, OFFSET FLAT:$SG39224
  00166	48 8d 0d 00 00
	00 00		 lea	 rcx, OFFSET FLAT:$SG39225
  0016d	e8 00 00 00 00	 call	 _wassert
  00172	33 c0		 xor	 eax, eax
$LN6@WinMain:

; 99   :     InitTerminal(&app->term, hWnd, 0, 30, app->w, 600);

  00174	48 8b 44 24 68	 mov	 rax, QWORD PTR app$[rsp]
  00179	48 83 c0 20	 add	 rax, 32			; 00000020H
  0017d	c7 44 24 28 58
	02 00 00	 mov	 DWORD PTR [rsp+40], 600	; 00000258H
  00185	48 8b 4c 24 68	 mov	 rcx, QWORD PTR app$[rsp]
  0018a	8b 49 78	 mov	 ecx, DWORD PTR [rcx+120]
  0018d	89 4c 24 20	 mov	 DWORD PTR [rsp+32], ecx
  00191	41 b9 1e 00 00
	00		 mov	 r9d, 30
  00197	45 33 c0	 xor	 r8d, r8d
  0019a	48 8b 54 24 60	 mov	 rdx, QWORD PTR hWnd$[rsp]
  0019f	48 8b c8	 mov	 rcx, rax
  001a2	e8 00 00 00 00	 call	 InitTerminal

; 100  :     ShowWindow(hWnd, SW_SHOW);

  001a7	ba 05 00 00 00	 mov	 edx, 5
  001ac	48 8b 4c 24 60	 mov	 rcx, QWORD PTR hWnd$[rsp]
  001b1	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_ShowWindow

; 101  :     UpdateWindow(hWnd);

  001b7	48 8b 4c 24 60	 mov	 rcx, QWORD PTR hWnd$[rsp]
  001bc	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_UpdateWindow
$LN2@WinMain:

; 102  :     
; 103  :     MSG msg;
; 104  :     
; 105  :     while (GetMessageA(&msg, NULL, 0, 0))

  001c2	45 33 c9	 xor	 r9d, r9d
  001c5	45 33 c0	 xor	 r8d, r8d
  001c8	33 d2		 xor	 edx, edx
  001ca	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  001d2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_GetMessageA
  001d8	85 c0		 test	 eax, eax
  001da	74 1e		 je	 SHORT $LN3@WinMain

; 106  :     {
; 107  :         TranslateMessage(&msg);

  001dc	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  001e4	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_TranslateMessage

; 108  :         DispatchMessageA(&msg);

  001ea	48 8d 8c 24 c0
	00 00 00	 lea	 rcx, QWORD PTR msg$[rsp]
  001f2	ff 15 00 00 00
	00		 call	 QWORD PTR __imp_DispatchMessageA

; 109  :     }

  001f8	eb c8		 jmp	 SHORT $LN2@WinMain
$LN3@WinMain:

; 110  :     UnInitApp(app);

  001fa	48 8b 4c 24 68	 mov	 rcx, QWORD PTR app$[rsp]
  001ff	e8 00 00 00 00	 call	 UnInitApp

; 111  :     
; 112  :     return 0;

  00204	33 c0		 xor	 eax, eax

; 113  : }

  00206	48 81 c4 f8 00
	00 00		 add	 rsp, 248		; 000000f8H
  0020d	c3		 ret	 0
WinMain	ENDP
_TEXT	ENDS
END
